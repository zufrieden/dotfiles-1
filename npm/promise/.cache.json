{"_id":"promise","_rev":"19-374f9318dc420bec558d4929452cda13","name":"promise","description":"Bare bones Promises/A+ implementation","dist-tags":{"latest":"3.2.0"},"versions":{"1.2.1":{"name":"promise","version":"1.2.1","description":"Bare bones Promises/A+ implementation","main":"index.js","scripts":{"test":"promises-aplus-tests test/adapter-a.js"},"repository":{"type":"git","url":"https://github.com/then/promise.git"},"author":{"name":"ForbesLindesay"},"license":"MIT","dependencies":{"is-promise":"~1"},"devDependencies":{"promises-aplus-tests":"*"},"readme":"[![Build Status](https://travis-ci.org/then/promise.png)](https://travis-ci.org/then/promise)\r\n<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" align=\"right\" /></a>\r\n# promise\r\n\r\n  This a bare bones [Promises/A+](http://promises-aplus.github.com/promises-spec/) implementation.\r\n\r\n  It is designed to get the basics spot on correct, so that you can build extended promise implementations on top of it.\r\n\r\n## Installation\r\n\r\n  Client:\r\n\r\n    $ component install then/promise\r\n\r\n  Server:\r\n\r\n    $ npm install then-promise\r\n\r\n## API\r\n\r\n  In the example below shows how you can load the promise library (in a way that works on both client and server).  It then demonstrates creating a promise from scratch.  You simply call `new Promise(fn)`.  There is a complete specification for what is returned by this method in [Promises/A+](http://promises-aplus.github.com/promises-spec/).  The resolver object has two methods `reject` and `fulfill` and their use is demonstrated here:\r\n\r\n```javascript\r\nvar Promise = require('then-promise');\r\n\r\nvar promise = new Promise(function (resolver) {\r\n    get('http://www.google.com', function (err, res) {\r\n      if (err) resolver.reject(err);\r\n      else resolver.fulfill(res);\r\n    });\r\n  });\r\n```\r\n\r\n## Extending Promises\r\n\r\n  There are two options for extending the promises created by this library.\r\n\r\n### Inheritance\r\n\r\n  You can use inheritance if you want to create your own complete promise library with this as your basic starting point, perfect if you have lots of cool features you want to add.  Here is an example of a promise library called `Awesome`, which is built on top of `Promise` correctly.\r\n\r\n```javascript\r\nvar Promise = require('then-promise');\r\nfunction Awesome(fn) {\r\n  Promise.call(this, fn);\r\n}\r\nAwesome.prototype = new Promise();\r\nAwesome.prototype.constructor = Awesome;\r\n\r\n//Awesome extension\r\nAwesome.prototype.spread = function (cb) {\r\n  return this.then(function (arr) {\r\n    return cb.apply(this, arr);\r\n  })\r\n};\r\n```\r\n\r\n  N.B. if you fail to set the prototype and constructor properly or fail to do Promise.call, things can fail in really subtle ways.\r\n\r\n### Extending the Prototype\r\n\r\n  In general, you should never extend the prototype of this promise implimenation because your extensions could easily conflict with someone elses extensions.  However, this organisation will host a library of extensions which do not conflict with each other, so you can safely enable any of those.  If you think of an extension that we don't provide and you want to write it, submit an issue on this repository and (if I agree) I'll set you up with a repository and give you permission to commit to it.\r\n\r\n## License\r\n\r\n  MIT\r\n","_id":"promise@1.2.1","dist":{"shasum":"f9b5491a72695ff1c052e3fe3cf953a84e250974","tarball":"http://registry.npmjs.org/promise/-/promise-1.2.1.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"forbes","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbes","email":"forbes@lindesay.co.uk"}],"directories":{}},"1.2.2":{"name":"promise","version":"1.2.2","description":"Bare bones Promises/A+ implementation","main":"index.js","scripts":{"test":"promises-aplus-tests test/adapter-a.js"},"repository":{"type":"git","url":"https://github.com/then/promise.git"},"author":{"name":"ForbesLindesay"},"license":"MIT","dependencies":{"is-promise":"~1"},"devDependencies":{"promises-aplus-tests":"*"},"readme":"[![Build Status](https://travis-ci.org/then/promise.png)](https://travis-ci.org/then/promise)\r\n<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" align=\"right\" /></a>\r\n# promise\r\n\r\n  This a bare bones [Promises/A+](http://promises-aplus.github.com/promises-spec/) implementation.\r\n\r\n  It is designed to get the basics spot on correct, so that you can build extended promise implementations on top of it.\r\n\r\n## Installation\r\n\r\n  Client:\r\n\r\n    $ component install then/promise\r\n\r\n  Server:\r\n\r\n    $ npm install promise\r\n\r\n## API\r\n\r\n  In the example below shows how you can load the promise library (in a way that works on both client and server).  It then demonstrates creating a promise from scratch.  You simply call `new Promise(fn)`.  There is a complete specification for what is returned by this method in [Promises/A+](http://promises-aplus.github.com/promises-spec/).  The resolver object has two methods `reject` and `fulfill` and their use is demonstrated here:\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\n\r\nvar promise = new Promise(function (resolver) {\r\n    get('http://www.google.com', function (err, res) {\r\n      if (err) resolver.reject(err);\r\n      else resolver.fulfill(res);\r\n    });\r\n  });\r\n```\r\n\r\n## Extending Promises\r\n\r\n  There are two options for extending the promises created by this library.\r\n\r\n### Inheritance\r\n\r\n  You can use inheritance if you want to create your own complete promise library with this as your basic starting point, perfect if you have lots of cool features you want to add.  Here is an example of a promise library called `Awesome`, which is built on top of `Promise` correctly.\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\nfunction Awesome(fn) {\r\n  Promise.call(this, fn);\r\n}\r\nAwesome.prototype = new Promise();\r\nAwesome.prototype.constructor = Awesome;\r\n\r\n//Awesome extension\r\nAwesome.prototype.spread = function (cb) {\r\n  return this.then(function (arr) {\r\n    return cb.apply(this, arr);\r\n  })\r\n};\r\n```\r\n\r\n  N.B. if you fail to set the prototype and constructor properly or fail to do Promise.call, things can fail in really subtle ways.\r\n\r\n### Extending the Prototype\r\n\r\n  In general, you should never extend the prototype of this promise implimenation because your extensions could easily conflict with someone elses extensions.  However, this organisation will host a library of extensions which do not conflict with each other, so you can safely enable any of those.  If you think of an extension that we don't provide and you want to write it, submit an issue on this repository and (if I agree) I'll set you up with a repository and give you permission to commit to it.\r\n\r\n## License\r\n\r\n  MIT\r\n","_id":"promise@1.2.2","dist":{"shasum":"87582a27a2a631a7372aaba1ad136bd327bd2451","tarball":"http://registry.npmjs.org/promise/-/promise-1.2.2.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"1.3.0":{"name":"promise","version":"1.3.0","description":"Bare bones Promises/A+ implementation","main":"index.js","scripts":{"test":"promises-aplus-tests test/adapter-a.js"},"repository":{"type":"git","url":"https://github.com/then/promise.git"},"author":{"name":"ForbesLindesay"},"license":"MIT","dependencies":{"is-promise":"~1"},"devDependencies":{"promises-aplus-tests":"*"},"readme":"[![Build Status](https://travis-ci.org/then/promise.png)](https://travis-ci.org/then/promise)\r\n<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" align=\"right\" /></a>\r\n# promise\r\n\r\n  This a bare bones [Promises/A+](http://promises-aplus.github.com/promises-spec/) implementation.\r\n\r\n  It is designed to get the basics spot on correct, so that you can build extended promise implementations on top of it.\r\n\r\n## Installation\r\n\r\n  Client:\r\n\r\n    $ component install then/promise\r\n\r\n  Server:\r\n\r\n    $ npm install promise\r\n\r\n## API\r\n\r\n  In the example below shows how you can load the promise library (in a way that works on both client and server).  It then demonstrates creating a promise from scratch.  You simply call `new Promise(fn)`.  There is a complete specification for what is returned by this method in [Promises/A+](http://promises-aplus.github.com/promises-spec/).  The resolver object has two methods `reject` and `fulfill` and their use is demonstrated here:\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\n\r\nvar promise = new Promise(function (resolver) {\r\n    get('http://www.google.com', function (err, res) {\r\n      if (err) resolver.reject(err);\r\n      else resolver.fulfill(res);\r\n    });\r\n  });\r\n```\r\n\r\n## Extending Promises\r\n\r\n  There are two options for extending the promises created by this library.\r\n\r\n### Inheritance\r\n\r\n  You can use inheritance if you want to create your own complete promise library with this as your basic starting point, perfect if you have lots of cool features you want to add.  Here is an example of a promise library called `Awesome`, which is built on top of `Promise` correctly.\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\nfunction Awesome(fn) {\r\n  Promise.call(this, fn);\r\n}\r\nAwesome.prototype = Object.create(Promise.prototype);\r\nAwesome.prototype.constructor = Awesome;\r\n\r\n//Awesome extension\r\nAwesome.prototype.spread = function (cb) {\r\n  return this.then(function (arr) {\r\n    return cb.apply(this, arr);\r\n  })\r\n};\r\n```\r\n\r\n  N.B. if you fail to set the prototype and constructor properly or fail to do Promise.call, things can fail in really subtle ways.\r\n\r\n### Extending the Prototype\r\n\r\n  In general, you should never extend the prototype of this promise implimenation because your extensions could easily conflict with someone elses extensions.  However, this organisation will host a library of extensions which do not conflict with each other, so you can safely enable any of those.  If you think of an extension that we don't provide and you want to write it, submit an issue on this repository and (if I agree) I'll set you up with a repository and give you permission to commit to it.\r\n\r\n## License\r\n\r\n  MIT\r\n","readmeFilename":"Readme.md","_id":"promise@1.3.0","dist":{"shasum":"e5cc9a4c8278e4664ffedc01c7da84842b040175","tarball":"http://registry.npmjs.org/promise/-/promise-1.3.0.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"2.0.0":{"name":"promise","version":"2.0.0","description":"Bare bones Promises/A+ implementation","main":"index.js","scripts":{"test":"mocha -R spec --timeout 200 --slow 99999"},"repository":{"type":"git","url":"https://github.com/then/promise.git"},"author":{"name":"ForbesLindesay"},"license":"MIT","dependencies":{"is-promise":"~1"},"devDependencies":{"promises-aplus-tests":"*","mocha-as-promised":"~1.2.1","better-assert":"~1.0.0"},"readme":"[![Build Status](https://travis-ci.org/then/promise.png)](https://travis-ci.org/then/promise)\r\n<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" align=\"right\" /></a>\r\n# promise\r\n\r\n  This a bare bones [Promises/A+](http://promises-aplus.github.com/promises-spec/) implementation.\r\n\r\n  It is designed to get the basics spot on correct, so that you can build extended promise implementations on top of it.\r\n\r\n## Installation\r\n\r\n  Server:\r\n\r\n    $ npm install promise\r\n\r\n  Client:\r\n\r\n    $ component install then/promise\r\n\r\n## API\r\n\r\n  In the example below shows how you can load the promise library (in a way that works on both client and server).  It then demonstrates creating a promise from scratch.  You simply call `new Promise(fn)`.  There is a complete specification for what is returned by this method in [Promises/A+](http://promises-aplus.github.com/promises-spec/).\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\n\r\nvar promise = new Promise(function (resolve, reject) {\r\n    get('http://www.google.com', function (err, res) {\r\n      if (err) reject(err);\r\n      else resolve(res);\r\n    });\r\n  });\r\n```\r\n\r\n## Extending Promises\r\n\r\n  There are three options for extending the promises created by this library.\r\n\r\n### Inheritance\r\n\r\n  You can use inheritance if you want to create your own complete promise library with this as your basic starting point, perfect if you have lots of cool features you want to add.  Here is an example of a promise library called `Awesome`, which is built on top of `Promise` correctly.\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\nfunction Awesome(fn) {\r\n  if (!(this instanceof Awesome)) return new Awesome(fn);\r\n  Promise.call(this, fn);\r\n}\r\nAwesome.prototype = Object.create(Promise.prototype);\r\nAwesome.prototype.constructor = Awesome;\r\n\r\n//Awesome extension\r\nAwesome.prototype.spread = function (cb) {\r\n  return this.then(function (arr) {\r\n    return cb.apply(this, arr);\r\n  })\r\n};\r\n```\r\n\r\n  N.B. if you fail to set the prototype and constructor properly or fail to do Promise.call, things can fail in really subtle ways.\r\n\r\n### Wrap\r\n\r\n  This is the nuclear option, for when you want to start from scratch.  It ensures you won't be impacted by anyone who is extending the prototype (see below).\r\n\r\n```javascript\r\nfunction Uber(fn) {\r\n  if (!(this instanceof Uber)) return new Uber(fn);\r\n  var _prom = new Promise(fn);\r\n  this.then = _prom.then;\r\n}\r\n\r\nUber.prototype.spread = function (cb) {\r\n  return this.then(function (arr) {\r\n    return cb.apply(this, arr);\r\n  })\r\n};\r\n```\r\n\r\n### Extending the Prototype\r\n\r\n  In general, you should never extend the prototype of this promise implimenation because your extensions could easily conflict with someone elses extensions.  However, this organisation will host a library of extensions which do not conflict with each other, so you can safely enable any of those.  If you think of an extension that we don't provide and you want to write it, submit an issue on this repository and (if I agree) I'll set you up with a repository and give you permission to commit to it.\r\n\r\n## License\r\n\r\n  MIT\r\n","readmeFilename":"Readme.md","_id":"promise@2.0.0","dist":{"shasum":"46648aa9d605af5d2e70c3024bf59436da02b80e","tarball":"http://registry.npmjs.org/promise/-/promise-2.0.0.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"3.0.0":{"name":"promise","version":"3.0.0","description":"Bare bones Promises/A+ implementation","main":"index.js","scripts":{"test":"mocha -R spec --timeout 200 --slow 99999","test-resolve":"mocha test/resolver-tests.js -R spec --timeout 200 --slow 999999"},"repository":{"type":"git","url":"https://github.com/then/promise.git"},"author":{"name":"ForbesLindesay"},"license":"MIT","devDependencies":{"promises-aplus-tests":"*","better-assert":"~1.0","mocha":"~1.9"},"readme":"[![Build Status](https://travis-ci.org/then/promise.png)](https://travis-ci.org/then/promise)\r\n<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" align=\"right\" /></a>\r\n# promise\r\n\r\n  This a bare bones [Promises/A+](http://promises-aplus.github.com/promises-spec/) implementation.\r\n\r\n  It is designed to get the basics spot on correct, so that you can build extended promise implementations on top of it.\r\n\r\n## Installation\r\n\r\n  Server:\r\n\r\n    $ npm install promise\r\n\r\n  Client:\r\n\r\n    $ component install then/promise\r\n\r\n## API\r\n\r\n  In the example below shows how you can load the promise library (in a way that works on both client and server).  It then demonstrates creating a promise from scratch.  You simply call `new Promise(fn)`.  There is a complete specification for what is returned by this method in [Promises/A+](http://promises-aplus.github.com/promises-spec/).\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\n\r\nvar promise = new Promise(function (resolve, reject) {\r\n    get('http://www.google.com', function (err, res) {\r\n      if (err) reject(err);\r\n      else resolve(res);\r\n    });\r\n  });\r\n```\r\n\r\n## Extending Promises\r\n\r\n  There are three options for extending the promises created by this library.\r\n\r\n### Inheritance\r\n\r\n  You can use inheritance if you want to create your own complete promise library with this as your basic starting point, perfect if you have lots of cool features you want to add.  Here is an example of a promise library called `Awesome`, which is built on top of `Promise` correctly.\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\nfunction Awesome(fn) {\r\n  if (!(this instanceof Awesome)) return new Awesome(fn);\r\n  Promise.call(this, fn);\r\n}\r\nAwesome.prototype = Object.create(Promise.prototype);\r\nAwesome.prototype.constructor = Awesome;\r\n\r\n//Awesome extension\r\nAwesome.prototype.spread = function (cb) {\r\n  return this.then(function (arr) {\r\n    return cb.apply(this, arr);\r\n  })\r\n};\r\n```\r\n\r\n  N.B. if you fail to set the prototype and constructor properly or fail to do Promise.call, things can fail in really subtle ways.\r\n\r\n### Wrap\r\n\r\n  This is the nuclear option, for when you want to start from scratch.  It ensures you won't be impacted by anyone who is extending the prototype (see below).\r\n\r\n```javascript\r\nfunction Uber(fn) {\r\n  if (!(this instanceof Uber)) return new Uber(fn);\r\n  var _prom = new Promise(fn);\r\n  this.then = _prom.then;\r\n}\r\n\r\nUber.prototype.spread = function (cb) {\r\n  return this.then(function (arr) {\r\n    return cb.apply(this, arr);\r\n  })\r\n};\r\n```\r\n\r\n### Extending the Prototype\r\n\r\n  In general, you should never extend the prototype of this promise implimenation because your extensions could easily conflict with someone elses extensions.  However, this organisation will host a library of extensions which do not conflict with each other, so you can safely enable any of those.  If you think of an extension that we don't provide and you want to write it, submit an issue on this repository and (if I agree) I'll set you up with a repository and give you permission to commit to it.\r\n\r\n## License\r\n\r\n  MIT\r\n\r\n![viewcount](https://viewcount.jepso.com/count/then/promise.png)\r\n","readmeFilename":"Readme.md","_id":"promise@3.0.0","dist":{"shasum":"dca23f725ff45fea41d9c91e65632682e7530a75","tarball":"http://registry.npmjs.org/promise/-/promise-3.0.0.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"3.0.1":{"name":"promise","version":"3.0.1","description":"Bare bones Promises/A+ implementation","main":"index.js","scripts":{"test":"mocha -R spec --timeout 200 --slow 99999","test-resolve":"mocha test/resolver-tests.js -R spec --timeout 200 --slow 999999"},"repository":{"type":"git","url":"https://github.com/then/promise.git"},"author":{"name":"ForbesLindesay"},"license":"MIT","devDependencies":{"promises-aplus-tests":"*","better-assert":"~1.0","mocha":"~1.9"},"readme":"[![Build Status](https://travis-ci.org/then/promise.png)](https://travis-ci.org/then/promise)\r\n<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" align=\"right\" /></a>\r\n# promise\r\n\r\n  This a bare bones [Promises/A+](http://promises-aplus.github.com/promises-spec/) implementation.\r\n\r\n  It is designed to get the basics spot on correct, so that you can build extended promise implementations on top of it.\r\n\r\n## Installation\r\n\r\n  Server:\r\n\r\n    $ npm install promise\r\n\r\n  Client:\r\n\r\n    $ component install then/promise\r\n\r\n## API\r\n\r\n  In the example below shows how you can load the promise library (in a way that works on both client and server).  It then demonstrates creating a promise from scratch.  You simply call `new Promise(fn)`.  There is a complete specification for what is returned by this method in [Promises/A+](http://promises-aplus.github.com/promises-spec/).\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\n\r\nvar promise = new Promise(function (resolve, reject) {\r\n    get('http://www.google.com', function (err, res) {\r\n      if (err) reject(err);\r\n      else resolve(res);\r\n    });\r\n  });\r\n```\r\n\r\n## Extending Promises\r\n\r\n  There are three options for extending the promises created by this library.\r\n\r\n### Inheritance\r\n\r\n  You can use inheritance if you want to create your own complete promise library with this as your basic starting point, perfect if you have lots of cool features you want to add.  Here is an example of a promise library called `Awesome`, which is built on top of `Promise` correctly.\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\nfunction Awesome(fn) {\r\n  if (!(this instanceof Awesome)) return new Awesome(fn);\r\n  Promise.call(this, fn);\r\n}\r\nAwesome.prototype = Object.create(Promise.prototype);\r\nAwesome.prototype.constructor = Awesome;\r\n\r\n//Awesome extension\r\nAwesome.prototype.spread = function (cb) {\r\n  return this.then(function (arr) {\r\n    return cb.apply(this, arr);\r\n  })\r\n};\r\n```\r\n\r\n  N.B. if you fail to set the prototype and constructor properly or fail to do Promise.call, things can fail in really subtle ways.\r\n\r\n### Wrap\r\n\r\n  This is the nuclear option, for when you want to start from scratch.  It ensures you won't be impacted by anyone who is extending the prototype (see below).\r\n\r\n```javascript\r\nfunction Uber(fn) {\r\n  if (!(this instanceof Uber)) return new Uber(fn);\r\n  var _prom = new Promise(fn);\r\n  this.then = _prom.then;\r\n}\r\n\r\nUber.prototype.spread = function (cb) {\r\n  return this.then(function (arr) {\r\n    return cb.apply(this, arr);\r\n  })\r\n};\r\n```\r\n\r\n### Extending the Prototype\r\n\r\n  In general, you should never extend the prototype of this promise implimenation because your extensions could easily conflict with someone elses extensions.  However, this organisation will host a library of extensions which do not conflict with each other, so you can safely enable any of those.  If you think of an extension that we don't provide and you want to write it, submit an issue on this repository and (if I agree) I'll set you up with a repository and give you permission to commit to it.\r\n\r\n## License\r\n\r\n  MIT\r\n\r\n![viewcount](https://viewcount.jepso.com/count/then/promise.png)\r\n","readmeFilename":"Readme.md","_id":"promise@3.0.1","dist":{"shasum":"552433a82f2f73f9fffd94228b7b98b2c7843e0e","tarball":"http://registry.npmjs.org/promise/-/promise-3.0.1.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"3.1.0":{"name":"promise","version":"3.1.0","description":"Bare bones Promises/A+ implementation","main":"index.js","scripts":{"test":"mocha -R spec --timeout 200 --slow 99999","test-resolve":"mocha test/resolver-tests.js -R spec --timeout 200 --slow 999999","test-extensions":"mocha test/extensions-tests.js -R spec --timeout 200 --slow 999999"},"repository":{"type":"git","url":"https://github.com/then/promise.git"},"author":{"name":"ForbesLindesay"},"license":"MIT","devDependencies":{"promises-aplus-tests":"*","better-assert":"*","mocha":"*"},"readme":"<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" align=\"right\" /></a>\r\n# promise\r\n\r\n  This a bare bones [Promises/A+](http://promises-aplus.github.com/promises-spec/) implementation.\r\n\r\n  It is designed to get the basics spot on correct, so that you can build extended promise implementations on top of it.\r\n\r\n[![Build Status](https://travis-ci.org/then/promise.png)](https://travis-ci.org/then/promise)\r\n[![Dependency Status](https://gemnasium.com/then/promise.png)](https://gemnasium.com/then/promise)\r\n[![NPM version](https://badge.fury.io/js/promise.png)](http://badge.fury.io/js/promise)\r\n\r\n## Installation\r\n\r\n  Server:\r\n\r\n    $ npm install promise\r\n\r\n## Usage\r\n\r\n  The example below shows how you can load the promise library (in a way that works on both client and server).  It then demonstrates creating a promise from scratch.  You simply call `new Promise(fn)`.  There is a complete specification for what is returned by this method in [Promises/A+](http://promises-aplus.github.com/promises-spec/).\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\n\r\nvar promise = new Promise(function (resolve, reject) {\r\n  get('http://www.google.com', function (err, res) {\r\n    if (err) reject(err);\r\n    else resolve(res);\r\n  });\r\n});\r\n```\r\n\r\n## API\r\n\r\nBefore all examples, you will need:\r\n\r\n```js\r\nvar Promise = require('promise');\r\n```\r\n\r\n### Promise(resolver)\r\n\r\nThis creates and returns a new promise.  The `new` keyword before `Promise` is optional.  `resolver` must be a function.  The `resolver` function is passed two arguments:\r\n\r\n 1. `resolve` should be called with a single argument.  If it is called with a non-promise value then the promise is fulfilled with that value.  If it is called with a promise (A) then the returned promise takes on the state of that new promise (A).\r\n 2. `reject` should be called with a single argument.  The returned promise will be rejected with that argument.\r\n\r\n### Static Functions\r\n\r\n  These methods are invoked by calling `Promise.methodName`.\r\n\r\n#### Promise.from(value)\r\n\r\nConverts values and foreign promises into Promises/A+ promises.  If you pass it a value then it returns a Promise for that value.  If you pass it something that is close to a promise (such as a jQuery attempt at a promise) it returns a Promise that takes on the state of `value` (rejected or fulfilled).\r\n\r\n#### Promise.denodeify(fn)\r\n\r\nTakes a function which accepts a node style callback and returns a new function that returns a promise instead.\r\n\r\ne.g.\r\n\r\n```javascript\r\nvar fs = require('fs')\r\n\r\nvar read = Promise.denodeify(fs.readFile)\r\nvar write = Promise.denodeify(fs.writeFile)\r\n\r\nvar p = read('foo.json', 'utf8')\r\n  .then(function (str) {\r\n    return write('foo.json', JSON.stringify(JSON.parse(str), null, '  '), 'utf8')\r\n  })\r\n```\r\n\r\n#### Promise.nodeify(fn)\r\n\r\nThe twin to `denodeify` is useful when you want to export an API that can be used by people who haven't learnt about the brilliance of promises yet.\r\n\r\n```javascript\r\nmodule.exports = Promise.nodeify(awesomeAPI)\r\nfunction awesomeAPI(a, b) {\r\n  return download(a, b)\r\n}\r\n```\r\n\r\nIf the last argument passed to `module.exports` is a function, then it will be treated like a node.js callback and not parsed on to the child function, otherwise the API will just return a promise.\r\n\r\n### Prototype Methods\r\n\r\nThese methods are invoked on a promise instance by calling `myPromise.methodName`\r\n\r\n### Promise#then(onFulfilled, onRejected)\r\n\r\nThis method follows the [Promises/A+ spec](http://promises-aplus.github.io/promises-spec/).  It explains things very clearly so I recommend you read it.\r\n\r\nEither `onFulfilled` or `onRejected` will be called and they will not be called more than once.  They will be passed a single argument and will always be called asynchronously (in the next turn of the event loop).\r\n\r\nIf the promise is fulfilled then `onFulfilled` is called.  If the promise is rejected then `onRejected` is called.\r\n\r\nThe call to `.then` also returns a promise.  If the handler that is called returns a promise, the promise returned by `.then` takes on the state of that returned promise.  If the handler that is called returns a value that is not a promise, the promise returned by `.then` will be fulfilled with that value. If the handler that is called throws an exception then the promise returned by `.then` is rejected with that exception.\r\n\r\n#### Promise#done(onFulfilled, onRejected)\r\n\r\nThe same semantics as `.then` except that it does not return a promise and any exceptions are re-thrown so that they can be logged (crashing the applicaiton in non-browser environments)\r\n\r\n#### Promise#nodeify(callback)\r\n\r\nIf `callback` is `null` or `undefined` it just returns `this`.  If `callback` is a function it is called with rejection reason as the first argument and result as the second argument (as per the node.js convention).\r\n\r\nThis lets you write API functions that look like:\r\n\r\n```javascript\r\nfunciton awesomeAPI(foo, bar, callback) {\r\n  return internalAPI(foo, bar)\r\n    .then(parseResult)\r\n    .then(null, retryErrors)\r\n    .nodeify(callback)\r\n}\r\n```\r\n\r\nPeople who use typical node.js style callbacks will be able to just pass a callback and get the expected behavior.  The enlightened people can not pass a callback and will get awesome promises.\r\n\r\n## Extending Promises\r\n\r\n  There are three options for extending the promises created by this library.\r\n\r\n### Inheritance\r\n\r\n  You can use inheritance if you want to create your own complete promise library with this as your basic starting point, perfect if you have lots of cool features you want to add.  Here is an example of a promise library called `Awesome`, which is built on top of `Promise` correctly.\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\nfunction Awesome(fn) {\r\n  if (!(this instanceof Awesome)) return new Awesome(fn);\r\n  Promise.call(this, fn);\r\n}\r\nAwesome.prototype = Object.create(Promise.prototype);\r\nAwesome.prototype.constructor = Awesome;\r\n\r\n//Awesome extension\r\nAwesome.prototype.spread = function (cb) {\r\n  return this.then(function (arr) {\r\n    return cb.apply(this, arr);\r\n  })\r\n};\r\n```\r\n\r\n  N.B. if you fail to set the prototype and constructor properly or fail to do Promise.call, things can fail in really subtle ways.\r\n\r\n### Wrap\r\n\r\n  This is the nuclear option, for when you want to start from scratch.  It ensures you won't be impacted by anyone who is extending the prototype (see below).\r\n\r\n```javascript\r\nfunction Uber(fn) {\r\n  if (!(this instanceof Uber)) return new Uber(fn);\r\n  var _prom = new Promise(fn);\r\n  this.then = _prom.then;\r\n}\r\n\r\nUber.prototype.spread = function (cb) {\r\n  return this.then(function (arr) {\r\n    return cb.apply(this, arr);\r\n  })\r\n};\r\n```\r\n\r\n### Extending the Prototype\r\n\r\n  In general, you should never extend the prototype of this promise implimenation because your extensions could easily conflict with someone elses extensions.  However, this organisation will host a library of extensions which do not conflict with each other, so you can safely enable any of those.  If you think of an extension that we don't provide and you want to write it, submit an issue on this repository and (if I agree) I'll set you up with a repository and give you permission to commit to it.\r\n\r\n## License\r\n\r\n  MIT\r\n","readmeFilename":"Readme.md","_id":"promise@3.1.0","dist":{"shasum":"95a3d53460c991b6777f6559b67729909f1aa5fd","tarball":"http://registry.npmjs.org/promise/-/promise-3.1.0.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"3.2.0":{"name":"promise","version":"3.2.0","description":"Bare bones Promises/A+ implementation","main":"index.js","scripts":{"test":"mocha -R spec --timeout 200 --slow 99999","test-resolve":"mocha test/resolver-tests.js -R spec --timeout 200 --slow 999999","test-extensions":"mocha test/extensions-tests.js -R spec --timeout 200 --slow 999999"},"repository":{"type":"git","url":"https://github.com/then/promise.git"},"author":{"name":"ForbesLindesay"},"license":"MIT","devDependencies":{"promises-aplus-tests":"*","better-assert":"*","mocha":"*"},"readme":"<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" align=\"right\" /></a>\r\n# promise\r\n\r\n  This a bare bones [Promises/A+](http://promises-aplus.github.com/promises-spec/) implementation.\r\n\r\n  It is designed to get the basics spot on correct, so that you can build extended promise implementations on top of it.\r\n\r\n[![Build Status](https://travis-ci.org/then/promise.png)](https://travis-ci.org/then/promise)\r\n[![Dependency Status](https://gemnasium.com/then/promise.png)](https://gemnasium.com/then/promise)\r\n[![NPM version](https://badge.fury.io/js/promise.png)](http://badge.fury.io/js/promise)\r\n\r\n## Installation\r\n\r\n  Server:\r\n\r\n    $ npm install promise\r\n\r\n## Usage\r\n\r\n  The example below shows how you can load the promise library (in a way that works on both client and server).  It then demonstrates creating a promise from scratch.  You simply call `new Promise(fn)`.  There is a complete specification for what is returned by this method in [Promises/A+](http://promises-aplus.github.com/promises-spec/).\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\n\r\nvar promise = new Promise(function (resolve, reject) {\r\n  get('http://www.google.com', function (err, res) {\r\n    if (err) reject(err);\r\n    else resolve(res);\r\n  });\r\n});\r\n```\r\n\r\n## API\r\n\r\nBefore all examples, you will need:\r\n\r\n```js\r\nvar Promise = require('promise');\r\n```\r\n\r\n### Promise(resolver)\r\n\r\nThis creates and returns a new promise.  The `new` keyword before `Promise` is optional.  `resolver` must be a function.  The `resolver` function is passed two arguments:\r\n\r\n 1. `resolve` should be called with a single argument.  If it is called with a non-promise value then the promise is fulfilled with that value.  If it is called with a promise (A) then the returned promise takes on the state of that new promise (A).\r\n 2. `reject` should be called with a single argument.  The returned promise will be rejected with that argument.\r\n\r\n### Static Functions\r\n\r\n  These methods are invoked by calling `Promise.methodName`.\r\n\r\n#### Promise.from(value)\r\n\r\nConverts values and foreign promises into Promises/A+ promises.  If you pass it a value then it returns a Promise for that value.  If you pass it something that is close to a promise (such as a jQuery attempt at a promise) it returns a Promise that takes on the state of `value` (rejected or fulfilled).\r\n\r\n#### Promise.all(array) / Promise.all(a, b, c, ...)\r\n\r\nReturns a promise for an array.  If it is called with a single argument that `Array.isArray` then this returns a promise for a copy of that array with any promises replaced by their fulfilled values.  Otherwise it returns a promise for an array that conatins its arguments, except with promises replaced by their resolution values.  e.g.\r\n\r\n```js\r\nPromise.all([Promise.from('a'), 'b', Promise.from('c')])\r\n  .then(function (res) {\r\n    assert(res[0] === 'a')\r\n    assert(res[1] === 'b')\r\n    assert(res[2] === 'c')\r\n  })\r\n\r\nPromise.all(Promise.from('a'), 'b', Promise.from('c'))\r\n  .then(function (res) {\r\n    assert(res[0] === 'a')\r\n    assert(res[1] === 'b')\r\n    assert(res[2] === 'c')\r\n  })\r\n```\r\n\r\n#### Promise.denodeify(fn)\r\n\r\nTakes a function which accepts a node style callback and returns a new function that returns a promise instead.\r\n\r\ne.g.\r\n\r\n```javascript\r\nvar fs = require('fs')\r\n\r\nvar read = Promise.denodeify(fs.readFile)\r\nvar write = Promise.denodeify(fs.writeFile)\r\n\r\nvar p = read('foo.json', 'utf8')\r\n  .then(function (str) {\r\n    return write('foo.json', JSON.stringify(JSON.parse(str), null, '  '), 'utf8')\r\n  })\r\n```\r\n\r\n#### Promise.nodeify(fn)\r\n\r\nThe twin to `denodeify` is useful when you want to export an API that can be used by people who haven't learnt about the brilliance of promises yet.\r\n\r\n```javascript\r\nmodule.exports = Promise.nodeify(awesomeAPI)\r\nfunction awesomeAPI(a, b) {\r\n  return download(a, b)\r\n}\r\n```\r\n\r\nIf the last argument passed to `module.exports` is a function, then it will be treated like a node.js callback and not parsed on to the child function, otherwise the API will just return a promise.\r\n\r\n### Prototype Methods\r\n\r\nThese methods are invoked on a promise instance by calling `myPromise.methodName`\r\n\r\n### Promise#then(onFulfilled, onRejected)\r\n\r\nThis method follows the [Promises/A+ spec](http://promises-aplus.github.io/promises-spec/).  It explains things very clearly so I recommend you read it.\r\n\r\nEither `onFulfilled` or `onRejected` will be called and they will not be called more than once.  They will be passed a single argument and will always be called asynchronously (in the next turn of the event loop).\r\n\r\nIf the promise is fulfilled then `onFulfilled` is called.  If the promise is rejected then `onRejected` is called.\r\n\r\nThe call to `.then` also returns a promise.  If the handler that is called returns a promise, the promise returned by `.then` takes on the state of that returned promise.  If the handler that is called returns a value that is not a promise, the promise returned by `.then` will be fulfilled with that value. If the handler that is called throws an exception then the promise returned by `.then` is rejected with that exception.\r\n\r\n#### Promise#done(onFulfilled, onRejected)\r\n\r\nThe same semantics as `.then` except that it does not return a promise and any exceptions are re-thrown so that they can be logged (crashing the applicaiton in non-browser environments)\r\n\r\n#### Promise#nodeify(callback)\r\n\r\nIf `callback` is `null` or `undefined` it just returns `this`.  If `callback` is a function it is called with rejection reason as the first argument and result as the second argument (as per the node.js convention).\r\n\r\nThis lets you write API functions that look like:\r\n\r\n```javascript\r\nfunciton awesomeAPI(foo, bar, callback) {\r\n  return internalAPI(foo, bar)\r\n    .then(parseResult)\r\n    .then(null, retryErrors)\r\n    .nodeify(callback)\r\n}\r\n```\r\n\r\nPeople who use typical node.js style callbacks will be able to just pass a callback and get the expected behavior.  The enlightened people can not pass a callback and will get awesome promises.\r\n\r\n## Extending Promises\r\n\r\n  There are three options for extending the promises created by this library.\r\n\r\n### Inheritance\r\n\r\n  You can use inheritance if you want to create your own complete promise library with this as your basic starting point, perfect if you have lots of cool features you want to add.  Here is an example of a promise library called `Awesome`, which is built on top of `Promise` correctly.\r\n\r\n```javascript\r\nvar Promise = require('promise');\r\nfunction Awesome(fn) {\r\n  if (!(this instanceof Awesome)) return new Awesome(fn);\r\n  Promise.call(this, fn);\r\n}\r\nAwesome.prototype = Object.create(Promise.prototype);\r\nAwesome.prototype.constructor = Awesome;\r\n\r\n//Awesome extension\r\nAwesome.prototype.spread = function (cb) {\r\n  return this.then(function (arr) {\r\n    return cb.apply(this, arr);\r\n  })\r\n};\r\n```\r\n\r\n  N.B. if you fail to set the prototype and constructor properly or fail to do Promise.call, things can fail in really subtle ways.\r\n\r\n### Wrap\r\n\r\n  This is the nuclear option, for when you want to start from scratch.  It ensures you won't be impacted by anyone who is extending the prototype (see below).\r\n\r\n```javascript\r\nfunction Uber(fn) {\r\n  if (!(this instanceof Uber)) return new Uber(fn);\r\n  var _prom = new Promise(fn);\r\n  this.then = _prom.then;\r\n}\r\n\r\nUber.prototype.spread = function (cb) {\r\n  return this.then(function (arr) {\r\n    return cb.apply(this, arr);\r\n  })\r\n};\r\n```\r\n\r\n### Extending the Prototype\r\n\r\n  In general, you should never extend the prototype of this promise implimenation because your extensions could easily conflict with someone elses extensions.  However, this organisation will host a library of extensions which do not conflict with each other, so you can safely enable any of those.  If you think of an extension that we don't provide and you want to write it, submit an issue on this repository and (if I agree) I'll set you up with a repository and give you permission to commit to it.\r\n\r\n## License\r\n\r\n  MIT\r\n","readmeFilename":"Readme.md","_id":"promise@3.2.0","dist":{"shasum":"b4d0fa281bcd5ca9d6ade556b69dd5947b9abb94","tarball":"http://registry.npmjs.org/promise/-/promise-3.2.0.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}}},"readme":"[![Build Status](https://travis-ci.org/then/promise.png)](https://travis-ci.org/then/promise)\r\n<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" align=\"right\" /></a>\r\n# promise\r\n\r\n  This a bare bones [Promises/A+](http://promises-aplus.github.com/promises-spec/) implementation.\r\n\r\n  It is designed to get the basics spot on correct, so that you can build extended promise implementations on top of it.\r\n\r\n## Installation\r\n\r\n  Client:\r\n\r\n    $ component install then/promise\r\n\r\n  Server:\r\n\r\n    $ npm install then-promise\r\n\r\n## API\r\n\r\n  In the example below shows how you can load the promise library (in a way that works on both client and server).  It then demonstrates creating a promise from scratch.  You simply call `new Promise(fn)`.  There is a complete specification for what is returned by this method in [Promises/A+](http://promises-aplus.github.com/promises-spec/).  The resolver object has two methods `reject` and `fulfill` and their use is demonstrated here:\r\n\r\n```javascript\r\nvar Promise = require('then-promise');\r\n\r\nvar promise = new Promise(function (resolver) {\r\n    get('http://www.google.com', function (err, res) {\r\n      if (err) resolver.reject(err);\r\n      else resolver.fulfill(res);\r\n    });\r\n  });\r\n```\r\n\r\n## Extending Promises\r\n\r\n  There are two options for extending the promises created by this library.\r\n\r\n### Inheritance\r\n\r\n  You can use inheritance if you want to create your own complete promise library with this as your basic starting point, perfect if you have lots of cool features you want to add.  Here is an example of a promise library called `Awesome`, which is built on top of `Promise` correctly.\r\n\r\n```javascript\r\nvar Promise = require('then-promise');\r\nfunction Awesome(fn) {\r\n  Promise.call(this, fn);\r\n}\r\nAwesome.prototype = new Promise();\r\nAwesome.prototype.constructor = Awesome;\r\n\r\n//Awesome extension\r\nAwesome.prototype.spread = function (cb) {\r\n  return this.then(function (arr) {\r\n    return cb.apply(this, arr);\r\n  })\r\n};\r\n```\r\n\r\n  N.B. if you fail to set the prototype and constructor properly or fail to do Promise.call, things can fail in really subtle ways.\r\n\r\n### Extending the Prototype\r\n\r\n  In general, you should never extend the prototype of this promise implimenation because your extensions could easily conflict with someone elses extensions.  However, this organisation will host a library of extensions which do not conflict with each other, so you can safely enable any of those.  If you think of an extension that we don't provide and you want to write it, submit an issue on this repository and (if I agree) I'll set you up with a repository and give you permission to commit to it.\r\n\r\n## License\r\n\r\n  MIT\r\n","maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"time":{"1.2.1":"2012-12-25T12:26:04.904Z","1.2.2":"2012-12-25T14:08:06.107Z","1.3.0":"2013-01-06T06:41:50.553Z","2.0.0":"2013-03-05T02:32:42.544Z","3.0.0":"2013-05-14T12:56:57.968Z","3.0.1":"2013-05-27T19:06:50.060Z","3.1.0":"2013-06-27T20:07:49.948Z","3.2.0":"2013-07-02T13:03:21.509Z"},"author":{"name":"ForbesLindesay"},"repository":{"type":"git","url":"https://github.com/then/promise.git"},"_attachments":{"promise-3.2.0.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-sv9Da5O9PtprJDAyqyRGJg==","length":5448,"stub":true},"promise-3.1.0.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-+rVcS9kDX91SL0F+cqc3xw==","length":5072,"stub":true},"promise-3.0.1.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-/+xi876NaNWoouy/AUtQGQ==","length":3267,"stub":true},"promise-3.0.0.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-4i1nJj3vSjltvhLK4mG2/A==","length":2560,"stub":true},"promise-2.0.0.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-CrM5ovk9FfHXbOi3/B0kaA==","length":2851,"stub":true},"promise-1.3.0.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-C06NFgozQefiD6t0zX/1Ow==","length":2334,"stub":true},"promise-1.2.2.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-lRFcE+XN048JbMYAs4cjsg==","length":2255,"stub":true},"promise-1.2.1.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-1FBrf6U2L8r8uiTZVhEfWQ==","length":2257,"stub":true}},"_etag":"\"21QL5912JI6G1BEL2HE88Q35H\""}