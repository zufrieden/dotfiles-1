{"name":"dploy","version":"1.1.3","author":{"name":"Lucas Motta","email":"http://lucasmotta.com"},"description":"Command line tool to deploy websites using FTP/SFTP and git.","keywords":["ftp","sftp","deploy","git"],"repository":{"type":"git","url":"https://github.com/LeanMeanFightingMachine/dploy"},"main":"./lib/dploy","bin":{"dploy":"./bin/dploy"},"engines":{"node":">= 0.10.x"},"dependencies":{"colors":"~0.6.x","yamljs":"~0.1.x","signals":"~1.0.x","ftp":"~0.3.x","ssh2":"~0.2.x","minimatch":"~0.2.x","prompt":"~0.2.x","glob-expand":"0.0.2"},"devDependencies":{"grunt":"~0.4.x","grunt-contrib-coffee":"~0.7.x","grunt-contrib-watch":"~0.5.x","grunt-bump":"~0.0.x","grunt-shell":"~0.6.x","grunt-coffeelint":"0.0.x"},"readme":"# DPLOY\n\n**DPLOY is an FTP/SFTP deployment tool built in node.js**  \nUploads the latest changes by comparing the version on your server with your git repository.\n\n\n## Install\nInstall DPLOY and it's dependancies globally by running:\n\n```\nnpm install dploy -g\n```\n\n## Help\n```\ndploy --help\n```\n\n## Commands\n### dploy\nWill deploy the first environment that you have on your `dploy.yaml`\n\n### dploy install\nWill install the `dploy.yaml` file and set up a `post-commit` script on your `.git/hooks` folder so you can _DPLOY_ from your commit message as well.\n\n### dploy …rest\nAnything else after the `dploy` command will be used as an environment, like this:  \n  \n```\ndploy dev stage production\n```  \nIn this case _DPLOY_ will expect to find **dev**, **stage** and **production** configs on your `dploy.yaml` file.\n\n## Basic example\nIf you only have one server, just name whatever you want and run `dploy`.   \n\n```\nserver_name:\n    host: \"ftp.myserver.com\"\n    user: \"user\"\n    pass: \"password\"\n    path:\n        local: \"deploy/\"\n        remote: \"public_html/\"\n```\n\nDeploying on the command line:\n\n```\ndploy\n```\n\nYou can also set the environment that you want to upload:  \n  \n```\ndploy server_name\n```\n\n## Attributes of the dploy.yaml\n### scheme\n* Type: `String`  \n* Default: `ftp`  \n\n_DPLOY_ has two available schemes: **ftp** and **sftp**. You must provide this information, because we don't like to play guessing games.\n\n### host\n* Type: `String`  \n* Default: `none`\n\n### port\n* Type: `Number`  \n* Default: `21` when ftp and `22` when sftp\n\nThe port that your hosting server is using. Note that the default value is different depending on **scheme** that you are using.\n\n### user\n* Type: `String`  \n* Default: `none`\n\n### pass\n* Type: `String`  \n* Default: `none`\n\nIf you don't set a password and if you are using SFTP, DPLOY will try look for the **privateKey** and **publicKey**.  \nBut if we can't find any of those options, you will be prompted to type the password manually.\n\n### privateKey\n* Type: `path`  \n* Default: `none`  \n* Scheme: `sftp`  \n\nWhen using SFTP, you can set the path of your private key instead of the password. The default locations are usually:\n```\nprivateKey: ~/.ssh/id_rsa\nprivateKey: ~/.ssh/id_dsa\n```\n\n### publicKey\n* Type: `path`  \n* Default: `none`  \n* Scheme: `sftp`  \n\nIt works in the same way of the **privateKey**. The default locations are usually:\n```\npublicKey: ~/.ssh/id_rsa.pub\npublicKey: ~/.ssh/id_dsa.pub\n```\n\n### secure\n* Type: `mixed`  \n* Default: `false`  \n* Scheme: `ftp`  \n\nSet this parameter only if you are using FTPS. Set to `true` for both control and data connection encryption, `control` for control connection encryption only, or `implicit` for implicitly encrypted control connection.\n\n### secureOptions\n* Type: `object`  \n* Default: `none`  \n* Scheme: `ftp`  \n\nAdditional options to be passed together with the `secure` parameter.\n\n### revision\n* Type: `String`  \n* Default: `.rev`  \n\nTo check the different between your local files and what's on the server, we have to create a temporary file with the reference of the last commit you've uploaded. This parameter defines the name of this file.\n\n### slots\n* Type: `Number`  \n* Default: `1`  \n\nTo make the upload faster, you can create multiple connections to your server.\n\n### check\n* Type: `Boolean`  \n* Default: `false`  \n\nIf you set this parameter to `true`, you will be prompted to confirm the list of files before the actual action.\n\n### branch\n* Type: `String` or `Array`  \n* Default: `none`  \n\nYou can set a list of branches that are allowed to deploy to your server. This will also help you to avoid accidental uploads to different servers.  \nNote that you can also set a string (a single branch), rather than a list.\n\n### path.local\n* Type: `String`  \n* Default: `none`  \n\nThe local folder that you want to upload to the server. If you don't set anything, the entire folder of your project will be uploaded.\n\n### path.remote\n* Type: `String`  \n* Default: `none`    \n\nThe remote folder where your files will be uploaded. If you don't set anything, your files will be uploaded to the root of your server. We **highly recommend** that you set this!\n\n### exclude  \n* Type: `Array`  \n* Default: `none`    \n\nExclude files that are tracked by git, but that you don't want on your server. You can target individual files or use [glob](https://github.com/isaacs/minimatch) to target multiple files and file types.\n  \n* Individual files: `exclude: [\"dploy.yaml\", \"package.json\", \"path/to/file.js\"]`.\n* Using glob: `exclude: [\"*.yaml\", \"*.json\", \"path/**/*.js\", \"**/*.md\"]`.\n\n### include\n* Type: `Object`  \n* Default: `none`    \n\nThe **include** parameter is similar to the **exclude**. But instead of an array, it expects an object.  \nThe **key** of your object is what *DPLOY* is gonna search locally and the **value** of your object is the destination on the remote server (this path is relative to the **path.remote**!). Again you can also target individual files or multiple using [glob](https://github.com/isaacs/minimatch) on the key of your object.\n\n```\ninclude:\n    \"videos/kitty.mp4\": \"videos/\"\n    \"videos/*.mp4\": \"another/folder/inside/remote/path/\"\n    \"*.json\": \"data/\"\n```\n\n## Ignore include flag\nIf you are using the **include** parameter on your `dploy.yaml`, you will note that those files will always be uploaded to the server, no matter if they were modified or not (because they aren't necessarily tracked by git).  \nIn order to avoid re-uploading those files all the time, there's a tag called `--ignore-include` that you can set when calling _DPLOY_.  \n  \n```\ndploy stage --ignore-include\n```  \nOr using a shortcut:  \n  \n```\ndploy stage -i\n```\n\n\n## Multiple environments\nMost of the times we have to work on different environments (dev, stage, production…).  \nWith _DPLOY_ is really easy to make multiple deploys using a single command. All you need to do is create different configurations on your `dploy.yaml` file, like this:\n\n```\ndev:\n    host: \"dev.myserver.com\"\n    user: \"dev_user\"\n    pass: \"dev_password\"\n    path:\n        local: \"deploy/\"\n        remote: \"public_html/\"\n\nstage:\n    host: \"stage.myserver.com\"\n    user: \"stage_user\"\n    pass: \"stage_password\"\n    path:\n        local: \"deploy/\"\n        remote: \"public_html/\"\n\nproduction:\n    host: \"myserver.com\"\n    user: \"production_user\"\n    pass: \"production_password\"\n    path:\n        local: \"deploy/\"\n        remote: \"public_html/\"\n```\n\nDeploy to **stage** environment only:\n\n```\ndploy stage\n```\nOr if you want to upload to more than one environment:  \n  \n```\ndploy dev stage production\n```\n\n## Including and excluding files\nThis example will upload your local `deploy` folder to your remote `public_html` folder and:    \n\n* Will **include** all `.mp4` files inside your `videos` folder to a remote folder named `funny` on your server.\n* Will **include** all `json`, `yaml` and `xml` files at your cwd folder to a remote folder named `data`.\n* Will **exclude** all `yaml`, `json` from your `deploy` folder.\n* Will **exclude** all `js` files inside the folder `deploy/path`.\n* Will **exclude** all `md` files from your `deploy` folder.\n\n```\nserver_name:\n    host: \"ftp.myserver.com\"\n    user: \"user\"\n    pass: \"password\"\n    path:\n        local: \"deploy/\"\n        remote: \"public_html/\"\n    exclude: [\"deploy/*.yaml\", \"deploy/*.json\", \"deploy/path/**/*.js\", \"deploy/**/*.md\"]\n    include:\n        \"videos/*.mp4\": \"funny/\"\n        \"*.json *.yaml *.xml\": \"data/\"\n            \n```\n\n# Contribute\nFeel free to contribute to DPLOY in any way. If you have any issues, questions or suggestions, just create it at the issues page.  \nIf you want to create your own fork, follow the instructions bellow to build **DPLOY**:  \n\n### build\nYou need to install the dependencies from npm first and then just use grunt to compile the CoffeeScript:\n\n```\ngrunt\n```\n\n### watch\nYou can watch the changes by running the watch task from grunt:\n\n```\ngrunt watch\n```\n\n# Mentions\n**DPLOY** was inspired by another great tool written in Ruby, called [dandelion](https://github.com/scttnlsn/dandelion) from [Scott Nelson](https://github.com/scttnlsn).\n\n\n# License\nThe MIT License\n\nCopyright (c) 2013 Lean Mean Fighting Machine, Inc. http://lmfm.co.uk\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.","readmeFilename":"README.md","bugs":{"url":"https://github.com/LeanMeanFightingMachine/dploy/issues"},"homepage":"https://github.com/LeanMeanFightingMachine/dploy","_id":"dploy@1.1.3","dist":{"shasum":"3239d6327bb8cf69ae1ea4b3cdefe0122b3a35c8","tarball":"http://registry.npmjs.org/dploy/-/dploy-1.1.3.tgz"},"_from":".","_npmVersion":"1.3.17","_npmUser":{"name":"lucasmotta","email":"mail@lucasmotta.com"},"maintainers":[{"name":"lucasmotta","email":"mail@lucasmotta.com"}],"directories":{},"_etag":"\"48NM4YKGQD4XRC8JRLRFHN7B5\""}