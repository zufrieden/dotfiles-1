{"_id":"grunt-contrib-qunit","_rev":"26-b2d9ad64042d69c07c97e9a44e6232e2","name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","dist-tags":{"latest":"0.3.0"},"versions":{"0.1.0":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.1.0","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.1.0"},"devDependencies":{"grunt-contrib-jshint":"~0.1.0","grunt-contrib-internal":"*","grunt":"~0.4.0rc2","grunt-cli":"~0.1.1"},"keywords":[],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n_Note that this plugin has not yet been released, and only works with the latest bleeding-edge, in-development version of grunt. See the [When will I be able to use in-development feature 'X'?](https://github.com/gruntjs/grunt/blob/devel/docs/faq.md#when-will-i-be-able-to-use-in-development-feature-x) FAQ entry for more information._\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is converted to the appropriate `file://` URI. Finally, each URI is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from `file://` URIs is inadequate, you can specify `http://` or `https://` URIs instead. If `http://` or `https://` URIs have been specified, those URIs will be passed directly to [PhantomJS][], as-specified.\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  }\n});\n```\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URIs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URIs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Mon Dec 10 2012 16:42:20.*\n","_id":"grunt-contrib-qunit@0.1.0","dist":{"shasum":"c0bbb6bf4b35921457a496a610c936a1044e868c","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.1.0.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"}],"directories":{}},"0.1.1":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.1.1","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.1.0"},"devDependencies":{"grunt-contrib-jshint":"~0.1.1","grunt-contrib-connect":"~0.1.1","grunt-contrib-internal":"~0.4.2","grunt":"~0.4.0","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-02-14   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-17   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-08   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Mon Feb 18 2013 08:59:00.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.1.1","dist":{"shasum":"205a2f4a402273dbba5cda2ce5f22acdd91b9b75","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.1.1.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.2.0":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.2.0","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.2.0"},"devDependencies":{"grunt-contrib-jshint":"~0.2.0","grunt-contrib-connect":"~0.1.1","grunt-contrib-internal":"~0.4.2","grunt":"~0.4.0","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-02-27   v0.2.0   Update to use PhantomJS 1.8.1.\n * 2013-02-14   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-17   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-08   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Thu Feb 28 2013 11:58:59.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.2.0","dist":{"shasum":"1928b270206be9818b827e851ede7ed365fe524c","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.2.0.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.2.1":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.2.1","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.3.0"},"devDependencies":{"grunt-contrib-jshint":"~0.2.0","grunt-contrib-connect":"~0.1.1","grunt-contrib-internal":"~0.4.2","grunt":"~0.4.0","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html',\n        ],\n      },\n    },\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.',\n      },\n    },\n  },\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-04-05   v0.2.1   Update to use PhantomJS 1.9.0. Fixes PhantomJS not found errors.\n * 2013-02-28   v0.2.0   Update to use PhantomJS 1.8.1.\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-05   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Fri Apr 05 2013 19:55:03.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.2.1","dist":{"shasum":"d82be1605143de3461dd529d2d4c437ae416c506","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.2.1.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"},{"name":"jsoverson","email":"jsoverson@gmail.com"}],"directories":{}},"0.2.2":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.2.2","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.3.0"},"devDependencies":{"grunt-contrib-jshint":"~0.6.0","grunt-contrib-connect":"~0.3.0","grunt-contrib-internal":"~0.4.5","grunt":"~0.4.1","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html',\n        ]\n      }\n    }\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-06-06   v0.2.2   Warn if no assertions ran in a single test. Spaces instead of newlines for clickable urls. Wrap bridge.js in a IIFE.\n * 2013-04-05   v0.2.1   Update to use PhantomJS 1.9.0. Fixes PhantomJS not found errors.\n * 2013-02-28   v0.2.0   Update to use PhantomJS 1.8.1.\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-05   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Thu Jun 06 2013 22:11:10.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.2.2","dist":{"shasum":"8fbcea05f24b9d756b983e409d5b4c32be7f1f08","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.2.2.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"shama","email":"kyle@dontkry.com"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"},{"name":"jsoverson","email":"jsoverson@gmail.com"}],"directories":{}},"0.3.0":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.3.0","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.4.0"},"devDependencies":{"grunt-contrib-jshint":"~0.6.0","grunt-contrib-connect":"~0.3.0","grunt-contrib-internal":"~0.4.5","grunt":"~0.4.1","difflet":"~0.2.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit v0.3.0 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-qunit');\n```\n\n\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n#### OS Dependencies\nThis plugin uses PhantomJS to run tests. PhantomJS requires these dependencies\n\n**On Ubuntu/Debian**\n\n`apt-get install libfontconfig1 fontconfig libfontconfig1-dev libfreetype6-dev`\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### force\nType: `boolean`  \nDefault: `false`\n\nWhen true, the whole task will not fail when there are individual test failures, or when no assertions for a test have run. This can be set to true when you always want other tasks in the queue to be executed.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html',\n        ]\n      }\n    }\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events, with arguments, are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart` `(name)`\n* `qunit.testStart` `(name)`\n* `qunit.log` `(result, actual, expected, message, source)`\n* `qunit.testDone` `(name, failed, passed, total)`\n* `qunit.moduleDone` `(name, failed, passed, total)`\n* `qunit.done` `(failed, passed, total, runtime)`\n\nIn addition to QUnit callback-named events, the following events are emitted by Grunt:\n\n* `qunit.spawn` `(url)`: when [PhantomJS][] is spawned for a test\n* `qunit.fail.load` `(url)`: when [PhantomJS][] could not open the given url\n* `qunit.fail.timeout`: when a QUnit test times out, usually due to a missing `QUnit.start()` call\n* `qunit.error.onError` `(message, stackTrace)`\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-09-29   v0.3.0   Update grunt-lib-phantomjs to v0.4.0. Add qunit.fail.load and qunit.fail.timeout events. Update QUnit to v1.12.0. Add force option. Propagate onError events from phantomjs through the qunit.error.onError event. Remove confusing error message.\n * 2013-06-06   v0.2.2   Warn if no assertions ran in a single test. Spaces instead of newlines for clickable urls. Wrap bridge.js in a IIFE.\n * 2013-04-05   v0.2.1   Update to use PhantomJS 1.9.0. Fixes PhantomJS not found errors.\n * 2013-02-28   v0.2.0   Update to use PhantomJS 1.8.1.\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-05   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Sun Sep 29 2013 11:09:57.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.3.0","dist":{"shasum":"df1cb21a6b2c6750e81b3b8c73029d45313e43f8","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.3.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"shama","email":"kyle@dontkry.com"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"},{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"jzaefferer","email":"joern.zaefferer@gmail.com"}],"directories":{}},"0.1.1-rc5":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.1.1-rc5","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.1.0"},"devDependencies":{"grunt-contrib-jshint":"~0.1.1rc5","grunt-contrib-connect":"~0.1.0","grunt-contrib-internal":"*","grunt":"~0.4.0rc5","difflet":"~0.2.3"},"keywords":[],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n_Note that this plugin has not yet been released, and only works with the latest bleeding-edge, in-development version of grunt. See the [When will I be able to use in-development feature 'X'?](https://github.com/gruntjs/grunt/blob/devel/docs/faq.md#when-will-i-be-able-to-use-in-development-feature-x) FAQ entry for more information._\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-01-08   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Wed Jan 09 2013 14:12:29.*\n","_id":"grunt-contrib-qunit@0.1.1-rc5","dist":{"shasum":"b9b322052eba7b6b7e64ee3595583b39139f58b6","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.1.1rc5.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"}],"directories":{}},"0.1.1-rc6":{"name":"grunt-contrib-qunit","description":"Run QUnit unit tests in a headless PhantomJS instance.","version":"0.1.1-rc6","homepage":"https://github.com/gruntjs/grunt-contrib-qunit","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-qunit/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-qunit/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"grunt-lib-phantomjs":"~0.1.0"},"devDependencies":{"grunt-contrib-jshint":"0.1.1rc6","grunt-contrib-connect":"0.1.1rc6","grunt-contrib-internal":"*","grunt":"0.4.0rc6","difflet":"~0.2.3"},"keywords":[],"contributors":[{"name":"\"Cowboy\" Ben Alman","url":"http://benalman.com/"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"}],"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n_Note that this plugin has not yet been released, and only works with the latest bleeding-edge, in-development version of grunt. See the [When will I be able to use in-development feature 'X'?](https://github.com/gruntjs/grunt/blob/devel/docs/faq.md#when-will-i-be-able-to-use-in-development-feature-x) FAQ entry for more information._\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from local files is inadequate, you can specify `http://` or `https://` URLs via the `urls` option. Each URL is passed to [PhantomJS][] (one at a time).\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  }\n});\n```\n\nWildcards and URLs may be combined by specifying both.\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URLs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URLs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2013-01-17   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-08   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api. Adding \"urls\" option for specifying absolute test URLs.\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Fri Jan 18 2013 10:16:16.*\n","readmeFilename":"README.md","_id":"grunt-contrib-qunit@0.1.1-rc6","dist":{"shasum":"0b1ec3e8bad1d1543c3345c9654dbf750320fb47","tarball":"http://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.1.1rc6.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"}],"directories":{}}},"readme":"# grunt-contrib-qunit [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-qunit.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-qunit)\n\n> Run QUnit unit tests in a headless PhantomJS instance.\n\n_Note that this plugin has not yet been released, and only works with the latest bleeding-edge, in-development version of grunt. See the [When will I be able to use in-development feature 'X'?](https://github.com/gruntjs/grunt/blob/devel/docs/faq.md#when-will-i-be-able-to-use-in-development-feature-x) FAQ entry for more information._\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-qunit --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Qunit task\n_Run this task with the `grunt qunit` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\nWhen installed by npm, this plugin will automatically download and install [PhantomJS][] locally via the [grunt-lib-phantomjs][] library.\n\n[PhantomJS]: http://www.phantomjs.org/\n[grunt-lib-phantomjs]: https://github.com/gruntjs/grunt-lib-phantomjs\n\nAlso note that running grunt with the `--debug` flag will output a lot of PhantomJS-specific debugging information. This can be very helpful in seeing what actual URIs are being requested and received by PhantomJS.\n\n### Options\n\n#### timeout\nType: `Number`  \nDefault: `5000`\n\nThe amount of time (in milliseconds) that grunt will wait for a QUnit `start()` call before failing the task with an error.\n\n#### inject\nType: `String`  \nDefault: (built-in)\n\nPath to an alternate QUnit-PhantomJS bridge file to be injected. See [the built-in bridge](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js) for more information.\n\n#### (-- PhantomJS arguments)\nType: `String`  \nDefault: (none)\n\nAdditional `--` style arguments that need to be passed in to PhantomJS may be specified as options, like `{'--option': 'value'}`. This may be useful for specifying a cookies file, local storage file, or a proxy. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n### Usage examples\n\n#### Wildcards\nIn this example, `grunt qunit:all` (or `grunt qunit` because `qunit` is a [multi task][]) will test all `.html` files in the test directory _and all subdirectories_. First, the wildcard is expanded to match each individual file. Then, each matched filename is converted to the appropriate `file://` URI. Finally, each URI is passed to [PhantomJS][] (one at a time).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Testing via http:// or https://\nIn circumstances where running unit tests from `file://` URIs is inadequate, you can specify `http://` or `https://` URIs instead. If `http://` or `https://` URIs have been specified, those URIs will be passed directly to [PhantomJS][], as-specified.\n\nIn this example, `grunt qunit` will test two files, served from the server running at `localhost:8000`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  }\n});\n```\n\n#### Using the grunt-contrib-connect plugin\nIt's important to note that grunt does not automatically start a `localhost` web server. That being said, the [grunt-contrib-connect plugin][] `connect` task can be run before the `qunit` task to serve files via a simple [connect][] web server.\n\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n[connect]: http://www.senchalabs.org/connect/\n\nIn the following example, if a web server isn't running at `localhost:8000`, running `grunt qunit` with the following configuration will fail because the `qunit` task won't be able to load the specified URIs. However, running `grunt connect qunit` will first start a static [connect][] web server at `localhost:8000` with its base path set to the Gruntfile's directory. Then, the `qunit` task will be run, requesting the specified URIs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    all: ['http://localhost:8000/test/foo.html', 'http://localhost:8000/test/bar.html']\n  },\n  connect: {\n    server: {\n      options: {\n        port: 8000,\n        base: '.'\n      }\n    }\n  }\n});\n\n// This plugin provides the \"connect\" task.\ngrunt.loadNpmTasks('grunt-contrib-connect');\n\n// A convenient task alias.\ngrunt.registerTask('test', ['connect', 'qunit']);\n```\n\n#### Custom timeouts and PhantomJS options\nIn the following example, the default timeout value of `5000` is overridden with the value `10000` (timeout values are in milliseconds). Additionally, PhantomJS will read stored cookies from the specified file. See the [PhantomJS API Reference][] for a list of `--` options that PhantomJS supports.\n\n[PhantomJS API Reference]: https://github.com/ariya/phantomjs/wiki/API-Reference\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  qunit: {\n    options: {\n      timeout: 10000,\n      '--cookies-file': 'misc/cookies.txt'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Events and reporting\n[QUnit callback](http://api.qunitjs.com/category/callbacks/) methods and arguments are also emitted through grunt's event system so that you may build custom reporting tools. Please refer to to the QUnit documentation for more information.\n\nThe events (with arguments) are as follows:\n\n* `qunit.begin`\n* `qunit.moduleStart`: name\n* `qunit.testStart`: name\n* `qunit.log`: result, actual, expected, message, source\n* `qunit.testDone`: name, failed, passed, total\n* `qunit.moduleDone`: name, failed, passed, total\n* `qunit.done`: failed, passed, total, runtime\n\nIn addition to QUnit callback-named events, the following event is emitted when [PhantomJS][] is spawned for a test:\n\n* `qunit.spawn`: url\n\nYou may listen for these events like so:\n\n```js\ngrunt.event.on('qunit.spawn', function (url) {\n  grunt.log.ok(\"Running test: \" + url);\n});\n```\n\n\n## Release History\n\n * 2012-10-04   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Mon Dec 10 2012 16:42:20.*\n","maintainers":[{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"shama","email":"kyle@dontkry.com"},{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"jzaefferer","email":"joern.zaefferer@gmail.com"}],"time":{"0.1.0":"2012-12-10T21:49:58.333Z","0.1.1":"2013-02-18T17:26:12.289Z","0.2.0":"2013-02-28T17:00:17.266Z","0.2.1":"2013-04-06T04:21:15.098Z","0.2.2":"2013-06-07T05:12:44.785Z","0.3.0":"2013-09-29T18:13:04.839Z","0.1.1-rc5":"2013-01-09T19:25:07.048Z","0.1.1-rc6":"2013-01-18T15:57:21.201Z"},"author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-qunit.git"},"users":{"eugene-eeo":true},"_attachments":{"grunt-contrib-qunit-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":25,"digest":"md5-NAYwT5nX8s9Crot5BLXoAg==","length":27087,"stub":true},"grunt-contrib-qunit-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":22,"digest":"md5-bqv8REPJLVRav+dJWCYg2w==","length":22496,"stub":true},"grunt-contrib-qunit-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-tZ5iF5GhQl9xUncKNSFrRQ==","length":22376,"stub":true},"grunt-contrib-qunit-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-+CD6wKBuFvtdDlNMN2wVvg==","length":22348,"stub":true},"grunt-contrib-qunit-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-bVd9fs0L2+dK0+jEaMnF8Q==","length":22304,"stub":true},"grunt-contrib-qunit-0.1.1rc6.tgz":{"content_type":"application/octet-stream","revpos":8,"digest":"md5-bebgQuACja8Ij5qVUsEm5Q==","length":22459,"stub":true},"grunt-contrib-qunit-0.1.1rc5.tgz":{"content_type":"application/octet-stream","revpos":6,"digest":"md5-cbts1t4Ert8iKCIRceygIw==","length":22392,"stub":true},"grunt-contrib-qunit-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-9wObDhVj3I+ofwB0pf1Ogw==","length":21713,"stub":true}},"_etag":"\"909QOZ68IRM6JU1X1ZBWQD7FR\""}