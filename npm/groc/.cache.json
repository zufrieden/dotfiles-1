{"_id":"groc","_rev":"85-547c731c222e9444250d7a37a22342a5","name":"groc","description":"Documentation generation, in the spirit of literate programming.","dist-tags":{"latest":"0.6.1"},"versions":{"0.1.0":{"name":"groc","version":"0.1.0","description":"Documentation generation, the literate programming way.","keywords":["documentation","docs","generator"],"homepage":"https://github.com/nevir/groc","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.2.9","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":">= 2.0.9","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.1.0","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"54d48b005fb5c60232ecae0edd9e34f8df06d036","tarball":"http://registry.npmjs.org/groc/-/groc-0.1.0.tgz"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.1.1":{"name":"groc","version":"0.1.1","description":"Documentation generation, the literate programming way.","keywords":["documentation","docs","generator"],"homepage":"https://github.com/nevir/groc","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.2.9","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":">= 2.0.9","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.1.1","_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"9662609e135fbfda52eae472d878d55e58599abf","tarball":"http://registry.npmjs.org/groc/-/groc-0.1.1.tgz"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.0":{"name":"groc","version":"0.2.0","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.2.9","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":">= 2.0.9","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.0","_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"57c1e1d1251a5cac031d7f18fcb4b3da911b2069","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.0.tgz"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.1":{"name":"groc","version":"0.2.1","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.2.9","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":">= 2.0.9","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.1","_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"162d0372c85eda41f32324246cdc5d2150757874","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.1.tgz"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.2":{"name":"groc","version":"0.2.2","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.2.9","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":">= 2.0.9","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.2","_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"8be939cf19ef75a7952fc0b0a23593290a9406c1","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.2.tgz"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.3":{"name":"groc","version":"0.2.3","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.2.9","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":">= 2.0.9","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.3","_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"22aef6be8de8c7e98f51f72d8f8e384473daaad4","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.3.tgz"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.4":{"name":"groc","version":"0.2.4","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.2.9","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":">= 2.0.9","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.4","_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"8519a86f234e4a846ae04185bb11d84812244ce5","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.4.tgz"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.5":{"name":"groc","version":"0.2.5","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.3.0","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":">= 2.0.9","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.5","_engineSupported":true,"_npmVersion":"1.1.0-beta-4","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"78e8daadc5cfc6c576ef76dc7e28114cd3d10d07","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.5.tgz"},"readme":"# groc\n\nGroc takes your _documented_ code, and generates documentation that follows the spirit of literate\nprogramming.  Take a look at the [self-generated documentation](http://nevir.github.com/groc/),\nand see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `globs`.  For\nexample, groc's own configuration is:\n\n    {\n      \"globs\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.6":{"name":"groc","version":"0.2.6","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.3.0","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":">= 2.0.9","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.6","_engineSupported":true,"_npmVersion":"1.1.0-beta-4","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"a0756e817edd76c43f22917b65206be8ba824075","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.6.tgz"},"readme":"# groc\n\nGroc takes your _documented_ code, and generates documentation that follows the spirit of literate\nprogramming.  Take a look at the [self-generated documentation](http://nevir.github.com/groc/),\nand see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `globs`.  For\nexample, groc's own configuration is:\n\n    {\n      \"globs\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.7":{"name":"groc","version":"0.2.7","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.3.0","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":"~> 3.0.1","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.7","_engineSupported":true,"_npmVersion":"1.1.0-beta-4","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"4e622c1ed040d5c00f62f3a9cadf8bdb00dc767e","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.7.tgz"},"readme":"# groc\n\nGroc takes your _documented_ code, and generates documentation that follows the spirit of literate\nprogramming.  Take a look at the [self-generated documentation](http://nevir.github.com/groc/),\nand see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `globs`.  For\nexample, groc's own configuration is:\n\n    {\n      \"globs\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.8":{"name":"groc","version":"0.2.8","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.3.0","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":"~> 3.0.1","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","spate":"~> 0.1.0","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.8","_engineSupported":true,"_npmVersion":"1.1.0-beta-4","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"e5954065e58461699263da1064680ad2bca30bdc","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.8.tgz"},"readme":"# groc\n\nGroc takes your _documented_ code, and generates documentation that follows the spirit of literate\nprogramming.  Take a look at the [self-generated documentation](http://nevir.github.com/groc/),\nand see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `globs`.  For\nexample, groc's own configuration is:\n\n    {\n      \"globs\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.9":{"name":"groc","version":"0.2.9","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.3.0","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":"~> 3.0.1","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","spate":"~> 0.1.0","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.9","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"14d86552f25b473b37d9dcb64354de6e629caa4f","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.9.tgz"},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `globs`.  For\nexample, groc's own configuration is:\n\n    {\n      \"globs\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.10":{"name":"groc","version":"0.2.10","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.3.0","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":"~> 3.0.1","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","spate":"~> 0.1.0","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.10","_engineSupported":true,"_npmVersion":"1.1.0-beta-4","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"a299c7c0d8c83b0f57433762c673e593edcd4af4","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.10.tgz"},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `globs`.  For\nexample, groc's own configuration is:\n\n    {\n      \"globs\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.11":{"name":"groc","version":"0.2.11","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.3.0","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":"~> 3.0.1","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","spate":"~> 0.1.0","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.11","_engineSupported":true,"_npmVersion":"1.1.0-beta-4","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"084abe671d97597ede726ac8182e1b62f6163684","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.11.tgz"},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `glob`.  For\nexample, groc's own configuration is:\n\n    {\n      \"glob\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.12":{"name":"groc","version":"0.2.12","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.3.0","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":"~> 3.0.1","jade":"~> 0.17.0","optimist":"~> 0.2.8","showdown":"~> 0.0.1","spate":"~> 0.1.0","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.12","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"594470313be8a4c2f8e1dab718b612a3047760c9","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.12.tgz"},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `glob`.  For\nexample, groc's own configuration is:\n\n    {\n      \"glob\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.13":{"name":"groc","version":"0.2.13","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.3.0","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":"~> 3.0.1","jade":"~> 0.17.0","optimist":"~> 0.3.4","showdown":"~> 0.0.1","spate":"~> 0.1.0","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.13","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"61a995e7375c3271deae6f5482086a3731751c02","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.13.tgz"},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `glob`.  For\nexample, groc's own configuration is:\n\n    {\n      \"glob\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.14":{"name":"groc","version":"0.2.14","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"git://github.com/nevir/groc.git"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":"~> 0.3.0","coffee-script":"~> 1.1.3","colors":"~> 0.5.1","fs-tools":"~> 0.1.0","glob":"~> 3.0.1","jade":"~> 0.17.0","optimist":"~> 0.3.4","showdown":"~> 0.0.1","spate":"~> 0.1.0","uglify-js":"~> 1.1.1","underscore":"~> 1.2.2"},"devDependencies":{},"scripts":{},"_npmUser":{"name":"nevir","email":"ian@nevir.net"},"_id":"groc@0.2.14","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"c3d485bd812def9074d959ee8a0a260389d782c7","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.14.tgz"},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `glob`.  For\nexample, groc's own configuration is:\n\n    {\n      \"glob\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.15":{"name":"groc","version":"0.2.15","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"https://github.com/nevir/groc"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":">= 0.3.0","coffee-script":">= 1.1.3","colors":">= 0.5.1","fs-tools":">= 0.1.0","glob":">= 3.0.1","jade":">= 0.17.0","optimist":">= 0.3.4","showdown":">= 0.2.0","spate":">= 0.1.0","uglify-js":">= 1.1.1","underscore":">= 1.2.2"},"devDependencies":{},"scripts":{},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `glob`.  For\nexample, groc's own configuration is:\n\n    {\n      \"glob\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","_id":"groc@0.2.15","dist":{"shasum":"3112fb6d9e221633e4c30af4f6085bdb7f979531","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.15.tgz"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.16":{"name":"groc","version":"0.2.16","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"https://github.com/nevir/groc"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":">= 0.3.0","coffee-script":">= 1.1.3","colors":">= 0.5.1","fs-tools":">= 0.1.0","glob":">= 3.0.1","jade":">= 0.17.0","optimist":">= 0.3.4","showdown":">= 0.2.0","spate":">= 0.1.0","uglify-js":">= 1.1.1","underscore":">= 1.2.2"},"devDependencies":{},"scripts":{},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `glob`.  For\nexample, groc's own configuration is:\n\n    {\n      \"glob\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","_id":"groc@0.2.16","dist":{"shasum":"c97045597b741871973005923d99e23b9fe3e903","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.16.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"nevir","email":"ian@nevir.net"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.2.17":{"name":"groc","version":"0.2.17","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"https://github.com/nevir/groc"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":">= 0.3.0","coffee-script":">= 1.1.3","colors":">= 0.5.1","fs-tools":">= 0.1.0","glob":">= 3.0.1","jade":">= 0.17.0","optimist":">= 0.3.4","showdown":">= 0.2.0","spate":">= 0.1.0","uglify-js":">= 1.1.1","underscore":">= 1.2.2"},"devDependencies":{},"scripts":{},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `glob`.  For\nexample, groc's own configuration is:\n\n    {\n      \"glob\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","_id":"groc@0.2.17","dist":{"shasum":"cee9321f29244be70dc6650ebc0169ad4adb27ee","tarball":"http://registry.npmjs.org/groc/-/groc-0.2.17.tgz"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.3.0":{"name":"groc","version":"0.3.0","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"https://github.com/nevir/groc"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":">= 0.3.0","coffee-script":">= 1.1.3","colors":">= 0.5.1","fs-tools":">= 0.1.0","glob":">= 3.0.1","jade":">= 0.17.0","optimist":">= 0.3.4","showdown":">= 0.2.0","spate":">= 0.1.0","uglify-js":">= 1.1.1","underscore":">= 1.2.2"},"devDependencies":{},"scripts":{},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `glob`.  For\nexample, groc's own configuration is:\n\n    {\n      \"glob\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","_id":"groc@0.3.0","dist":{"shasum":"9db814e5ccee7117b63539cd88f1dfbd70b05930","tarball":"http://registry.npmjs.org/groc/-/groc-0.3.0.tgz"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.3.1":{"name":"groc","version":"0.3.1","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"https://github.com/nevir/groc"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":">= 0.3.0","coffee-script":">= 1.1.3","colors":">= 0.5.1","fs-tools":">= 0.1.0","glob":">= 3.0.1","jade":">= 0.17.0","optimist":">= 0.3.4","showdown":">= 0.2.0","spate":">= 0.1.0","uglify-js":">= 1.1.1","underscore":">= 1.2.2"},"devDependencies":{},"scripts":{},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `glob`.  For\nexample, groc's own configuration is:\n\n    {\n      \"glob\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","readmeFilename":"README.md","_id":"groc@0.3.1","dist":{"shasum":"2104a82bd970f28ee3551fbe7a3e06ac27d7926e","tarball":"http://registry.npmjs.org/groc/-/groc-0.3.1.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"nevir","email":"ian@nevir.net"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.3.2":{"name":"groc","version":"0.3.2","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"https://github.com/nevir/groc"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"autorequire":">= 0.3.0","coffee-script":">= 1.1.3","colors":">= 0.5.1","fs-tools":">= 0.1.0","glob":">= 3.0.1","jade":">= 0.17.0","optimist":">= 0.3.4","showdown":">= 0.2.0","spate":">= 0.1.0","uglify-js":">= 1.1.1","underscore":">= 1.2.2"},"devDependencies":{},"scripts":{},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `glob`.  For\nexample, groc's own configuration is:\n\n    {\n      \"glob\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","_id":"groc@0.3.2","dist":{"shasum":"5a4126345b58364b1d34d0834aa0783652b29e30","tarball":"http://registry.npmjs.org/groc/-/groc-0.3.2.tgz"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.4.0":{"name":"groc","version":"0.4.0","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"https://github.com/nevir/groc"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= v0.4.12"},"dependencies":{"coffee-script":">= 1.1.3","colors":">= 0.5.1","fs-tools":">= 0.1.0","glob":">= 3.0.1","jade":">= 0.17.0","optimist":">= 0.3.4","showdown":">= 0.2.0","spate":">= 0.1.0","uglify-js":">= 1.1.1","underscore":">= 1.2.2"},"devDependencies":{},"scripts":{},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `glob`.  For\nexample, groc's own configuration is:\n\n    {\n      \"glob\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","readmeFilename":"README.md","_id":"groc@0.4.0","dist":{"shasum":"5b228f9811fa8ed690863303689448a99850583e","tarball":"http://registry.npmjs.org/groc/-/groc-0.4.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"nevir","email":"ian@nevir.net"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"}]},"0.6.0":{"name":"groc","version":"0.6.0","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"https://github.com/nevir/groc"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= 0.8"},"dependencies":{"coffee-script":">= 1.1.3","colors":">= 0.5.1","fs-tools":">= 0.1.0","glob":">= 3.0.1","jade":">= 0.17.0","optimist":">= 0.3.4","showdown":">= 0.2.0","spate":">= 0.1.0","uglify-js":">= 1.1.1","underscore":">= 1.2.2"},"devDependencies":{},"scripts":{},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `glob`.  For\nexample, groc's own configuration is:\n\n    {\n      \"glob\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","_id":"groc@0.6.0","dist":{"shasum":"98b853b6570ba935adf64ab21819311221cd13c2","tarball":"http://registry.npmjs.org/groc/-/groc-0.6.0.tgz"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"},{"name":"kmdavis","email":"kevan.davis@me.com"}]},"0.6.1":{"name":"groc","version":"0.6.1","description":"Documentation generation, in the spirit of literate programming.","keywords":["documentation","docs","generator"],"homepage":"http://nevir.github.com/groc/","author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"licenses":[{"type":"MIT","url":"https://github.com/nevir/groc/MIT-LICENSE.txt"}],"repository":{"type":"git","url":"https://github.com/nevir/groc"},"main":"./index","directories":{"lib":"./lib"},"bin":{"groc":"./bin/groc"},"engines":{"node":">= 0.8"},"dependencies":{"coffee-script":">= 1.1.3","colors":">= 0.5.1","fs-tools":">= 0.1.0","glob":">= 3.0.1","jade":">= 0.17.0","optimist":">= 0.3.4","showdown":">= 0.2.0","spate":">= 0.1.0","uglify-js":">= 1.1.1","underscore":">= 1.2.2"},"devDependencies":{},"scripts":{},"readme":"# groc\n\nGroc takes your _documented_ code, and in an admission that people aren't machines, generates\ndocumentation that follows the spirit of literate programming.  Take a look at the\n[self-generated documentation](http://nevir.github.com/groc/), and see if it appeals to you!\n\nIt is very heavily influenced by [Jeremy Ashkenas](https://github.com/jashkenas)'\n[docco](http://jashkenas.github.com/docco/), and is an attempt to further enhance the idea (thus,\ngroc can't tout the same quick 'n dirty principles of docco).\n\n\n## What does it give you?\n\nGroc will:\n\n* Generate documentation from your source code, by displaying your\n  [Markdown](http://daringfireball.net/projects/markdown/) formatted comments next to the code\n  fragments that they document.\n\n* Submit your project's documentation to the [github pages](http://pages.github.com/) for your\n  project.\n\n* Generate a searchable table of contents for all documented files and headers within your project.\n\n* Gracefully handle complex hierarchies of source code across multiple folders.\n\n* Read a configuration file so that you don't have to think when you want your documentation built;\n  you just type `groc`.\n\n\n## How?\n\n### Installing groc\n\nGroc depends on [Node.js](http://nodejs.org/) and [Pygments](http://pygments.org/).  Once you have\nthose installed - and assuming that your node install came with [npm](http://npmjs.org/) - you can\ninstall groc via:\n\n    npm install -g groc\n\nFor those new to npm, `-g` indicates that you want groc installed as a global command for your\nenvironment.  You may need to prefix the command with sudo, depending on how you installed node.\n\n\n### Using groc (CLI)\n\nTo generate documentation, just point groc to source files that you want docs for:\n\n    groc *.rb\n\nGroc will also handle extended globbing syntax if you quote arguments:\n\n    groc \"lib/**/*.coffee\" README.md\n\nBy default, groc will drop the generated documentation in the `doc/` folder of your project, and it\nwill treat `README.md` as the index.  Take a look at your generated docs, and see if everything is\nin order!\n\nOnce you are pleased with the output, you can push your docs to your github pages branch:\n\n    groc --github \"lib/**/*.coffee\" README.md\n\nGroc will automagically create and push the `gh-pages` branch if it is missing.\n\nThere are [additional options](http://nevir.github.com/groc/cli.html#cli-options) supported by\ngroc, if you are interested.\n\n\n### Configuring groc (.groc.json)\n\nGroc supports a simple JSON configuration format once you know the config values that appeal to you.\n\nCreate a `.groc.json` file in your project root, where each key maps to an option you would pass to\nthe `groc` command.  File names and globs are defined as an array with the key `glob`.  For\nexample, groc's own configuration is:\n\n    {\n      \"glob\": [\"lib/**/*.coffee\", \"README.md\", \"lib/styles/*/style.sass\", \"lib/styles/*/*.jade\"],\n      \"github\": true\n    }\n\nFrom now on, if you call `groc` without any arguments, it will use your pre-defined configuration.\n\n\n## Literate programming?\n\n[Literate programming](http://en.wikipedia.org/wiki/Literate_programming) is a programming\nmethodology coined by [Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth).  The primary tenet\nis that you write a program so that the structure of both the code and documentation align with\nyour mental model of its behaviors and processes.\n\nGroc aims to provide a happy medium where you can freely write your source files as structured\ndocuments, while not going out of your way to restructure the code to fit the documentation.\nHere are some suggested guidelines to follow when writing your code:\n\n* Try to keep the size of each source file down.  It is helpful if each file fulfills a specific\n  feature of your application or library.\n\n* Rather than commenting individual lines of code, write comments that explain the _behavior_ of a\n  given method or code block.  Take advantage of the fact that comments can span that method.\n\n* Make gratuitous use of lists when explaining processes; step by step explanations are extremely\n  easy to follow!\n\n* Break each source file into sections via headers.  Don't be afraid to split source into even\n  smaller files if it makes them more readable.\n\nWriting documentation is _hard_; hopefully groc helps to streamline the process for you!\n\n\n## Known Issues\n\n* Groc does not fare well with files that have very long line lengths (minimized\n  JavaScript being the prime offender).  Make sure that you exclude them!\n\n\n## What's in the works?\n\nGroc wants to:\n\n* [Fully support hand-held viewing of documentation](https://github.com/nevir/groc/issues/1).  It\n  can almost do this today, but the table of contents is horribly broken in the mobile view.\n","_id":"groc@0.6.1","dist":{"shasum":"872689346de050816538f122372c58616f7db61a","tarball":"http://registry.npmjs.org/groc/-/groc-0.6.1.tgz"},"maintainers":[{"name":"nevir","email":"ian@nevir.net"},{"name":"kmdavis","email":"kevan.davis@me.com"}]}},"maintainers":[{"name":"nevir","email":"ian@nevir.net"},{"name":"kmdavis","email":"kevan.davis@me.com"}],"time":{"0.1.0":"2011-12-07T04:36:44.276Z","0.1.1":"2011-12-13T00:15:12.253Z","0.2.0":"2011-12-14T05:49:04.160Z","0.2.1":"2011-12-19T02:27:37.711Z","0.2.2":"2011-12-19T02:39:59.925Z","0.2.3":"2011-12-19T03:09:53.889Z","0.2.4":"2011-12-20T03:02:22.481Z","0.2.5":"2012-01-10T23:27:20.685Z","0.2.6":"2012-01-10T23:48:29.959Z","0.2.7":"2012-01-21T03:23:24.245Z","0.2.8":"2012-01-22T18:45:21.795Z","0.2.9":"2012-05-25T17:49:14.605Z","0.2.10":"2012-05-28T17:56:43.966Z","0.2.11":"2012-06-07T18:07:08.293Z","0.2.12":"2012-06-24T21:31:01.385Z","0.2.13":"2012-06-24T22:50:52.986Z","0.2.14":"2012-06-24T22:53:03.917Z","0.2.15":"2012-07-17T01:25:00.075Z","0.2.16":"2012-09-09T05:44:39.373Z","0.2.17":"2012-10-14T23:43:03.800Z","0.3.0":"2012-10-15T00:03:45.900Z","0.3.1":"2013-01-12T19:46:18.223Z","0.3.2":"2013-01-12T21:09:00.495Z","0.4.0":"2013-04-14T04:31:23.816Z","0.6.0":"2013-09-17T18:14:45.433Z","0.6.1":"2013-09-18T14:58:29.489Z"},"author":{"name":"Ian MacLeod","email":"ian@nevir.net","url":"https://github.com/nevir"},"repository":{"type":"git","url":"https://github.com/nevir/groc"},"_attachments":{"groc-0.6.1.tgz":{"content_type":"application/octet-stream","revpos":85,"digest":"md5-VvtrHENDSoX56JL7cgUPEA==","length":89359,"stub":true},"groc-0.6.0.tgz":{"content_type":"application/octet-stream","revpos":83,"digest":"md5-lMRl5YKuNgIgYrRZoJ4z+A==","length":86250,"stub":true},"groc-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":79,"digest":"md5-E0KqACIh5bwm3iTM+vEpXA==","length":75970,"stub":true},"groc-0.3.2.tgz":{"content_type":"application/octet-stream","revpos":78,"digest":"md5-phnPV5NmenPBN6app6btxA==","length":75254,"stub":true},"groc-0.3.1.tgz":{"content_type":"application/octet-stream","revpos":76,"digest":"md5-iPfJF4nCS5eYNE88t3md+Q==","length":75233,"stub":true},"groc-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":74,"digest":"md5-Nr0HpMXJ5wxu+HfTQhGrVw==","length":75170,"stub":true},"groc-0.2.17.tgz":{"content_type":"application/octet-stream","revpos":72,"digest":"md5-ccL1+KOXCBNrXydeFZOTvQ==","length":74969,"stub":true},"groc-0.2.16.tgz":{"content_type":"application/octet-stream","revpos":70,"digest":"md5-c0vn9ykQf5X4bp6ZJsQmvw==","length":74761,"stub":true},"groc-0.2.15.tgz":{"content_type":"application/octet-stream","revpos":49,"digest":"md5-MvTLYK1W0THjNwuMfcmsWg==","length":74495,"stub":true},"groc-0.2.14.tgz":{"content_type":"application/octet-stream","revpos":47,"digest":"md5-fMJtNI3III3uVDqF74YRRA==","length":74504,"stub":true},"groc-0.2.13.tgz":{"content_type":"application/octet-stream","revpos":45,"digest":"md5-rr7zhJeTbbzJloJ0Xos/gA==","length":74498,"stub":true},"groc-0.2.12.tgz":{"content_type":"application/octet-stream","revpos":39,"digest":"md5-708zMKNrWCKLvB+G0Pv/Jw==","length":74594,"stub":true},"groc-0.2.11.tgz":{"content_type":"application/octet-stream","revpos":37,"digest":"md5-VNUMf2TIM2YI4HfJp8AiXA==","length":74512,"stub":true},"groc-0.2.10.tgz":{"content_type":"application/octet-stream","revpos":35,"digest":"md5-SZoHP9rW+StZvRYNTpe36Q==","length":164300,"stub":true},"groc-0.2.9.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-8xXckKRfOhTkCcTudyPRIA==","length":74424,"stub":true},"groc-0.2.8.tgz":{"content_type":"application/octet-stream","revpos":31,"digest":"md5-tb4c2/GnMe0RImywY6rFLg==","length":164012,"stub":true},"groc-0.2.7.tgz":{"content_type":"application/octet-stream","revpos":29,"digest":"md5-x2bvehP5+ZOkPAfQJwAxSA==","length":164098,"stub":true},"groc-0.2.6.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-2tSVYNPYvW91eB/J2TmdzA==","length":154215,"stub":true},"groc-0.2.5.tgz":{"content_type":"application/octet-stream","revpos":25,"digest":"md5-9Xv2b3ebOVcIShz09zHA7g==","length":154212,"stub":true},"groc-0.2.4.tgz":{"content_type":"application/octet-stream","revpos":23,"digest":"md5-xofayfrMF4jAcO8wEba1DA==","length":349224,"stub":true},"groc-0.2.3.tgz":{"content_type":"application/octet-stream","revpos":21,"digest":"md5-nPUeQwPh866O7ZoivnC37Q==","length":349477,"stub":true},"groc-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-pCEVZOSarM++LLVTXLMJ8Q==","length":348976,"stub":true},"groc-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-Qlu4lvdud7ShRGDXUXbpog==","length":348947,"stub":true},"groc-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-qTQN+norK7GIr17AkUMqYQ==","length":316063,"stub":true},"groc-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-tWNHgnp2BDKY+FD9idGOrw==","length":235873,"stub":true},"groc-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-2gqXUEHBDHH8EVRE/GMl1w==","length":174080,"stub":true}},"_etag":"\"74EACWXDLLVP8HNGN9946TA5E\""}