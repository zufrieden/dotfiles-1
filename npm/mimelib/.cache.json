{"_id":"mimelib","_rev":"68-4ecf8741f56e34e9bbef4ff7bfeeaf26","name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","dist-tags":{"latest":"0.2.14"},"versions":{"0.1.0":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.0","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./docs.1"],"devDependencies":{},"_id":"mimelib@0.1.0","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"002095ae2bf3d3f95140afe2d020a98b7daa89b4","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.0.tgz"},"scripts":{},"directories":{}},"0.1.1":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.1","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./man/doc.1"],"devDependencies":{},"_id":"mimelib@0.1.1","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"fac01b6c071dabbb8aba26eb78715f673daf3e98","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.1.tgz"},"scripts":{},"directories":{}},"0.1.2":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.2","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./man/doc.1"],"devDependencies":{},"_id":"mimelib@0.1.2","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"5b0fa1149790d290cdc472ac31ef9ebb64b4a714","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.2.tgz"},"scripts":{},"directories":{}},"0.1.3":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.3","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./man/doc.1"],"_npmJsonOpts":{"file":"/root/.npm/mimelib/0.1.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mimelib@0.1.3","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.18","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"dist":{"shasum":"69c520400058fbac3fba03d972cb136f0f2fde25","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.3.tgz"},"scripts":{},"directories":{}},"0.1.4":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.4","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./man/doc.1"],"_npmUser":{"name":"andris","email":"andris@node.ee"},"_id":"mimelib@0.1.4","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.6.1","_defaultsLoaded":true,"dist":{"shasum":"baf000d4db19a1fd4b0870a2f688f4c4ba7cc3e7","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.4.tgz"},"directories":{}},"0.1.5":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.5","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./man/doc.1"],"_npmUser":{"name":"andris","email":"andris@node.ee"},"_id":"mimelib@0.1.5","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-4","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"73339d0cf9a723282edd91361fee5c946220f5d8","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.5.tgz"},"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Reference\n\nSee [API reference](/andris9/mimelib/blob/master/doc.md) for documentation\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");","directories":{}},"0.1.6":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.6","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./man/doc.1"],"_npmUser":{"name":"andris","email":"andris@node.ee"},"_id":"mimelib@0.1.6","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"7270963d3f10b6aeaeb7754027145eaee621d98d","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.6.tgz"},"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Reference\n\nSee [API reference](/andris9/mimelib/blob/master/doc.md) for documentation\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");","directories":{}},"0.1.7":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.7","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./man/doc.1"],"_npmUser":{"name":"andris","email":"andris@node.ee"},"_id":"mimelib@0.1.7","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"4f8dbe173153cd2c4b558da30cb02a2dbee516e3","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.7.tgz"},"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Reference\n\nSee [API reference](/andris9/mimelib/blob/master/doc.md) for documentation\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");","directories":{}},"0.1.8":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.8","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./man/doc.1"],"_npmUser":{"name":"andris","email":"andris@node.ee"},"_id":"mimelib@0.1.8","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"78b22c65043375e34ad2354cc730e2add8200dda","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.8.tgz"},"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Reference\n\nSee [API reference](/andris9/mimelib/blob/master/doc.md) for documentation\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");","directories":{}},"0.1.9":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.9","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./man/doc.1"],"_npmUser":{"name":"andris","email":"andris@node.ee"},"_id":"mimelib@0.1.9","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"5794c13538257fda9c0749bb72ee49647271b8a6","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.9.tgz"},"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Reference\n\nSee [API reference](/andris9/mimelib/blob/master/doc.md) for documentation\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");","directories":{}},"0.1.10":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.10","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./man/doc.1"],"_npmUser":{"name":"andris","email":"andris@node.ee"},"_id":"mimelib@0.1.10","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"39bd68a60a43abe77c12c0e2d865ae968f48f84b","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.10.tgz"},"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Reference\n\nSee [API reference](/andris9/mimelib/blob/master/doc.md) for documentation\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");","directories":{}},"0.1.11":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.11","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./man/doc.1"],"_npmUser":{"name":"andris","email":"andris@node.ee"},"_id":"mimelib@0.1.11","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"a722f51fb6c3d758eab0bcad2a1a127dc95ad80a","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.11.tgz"},"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Reference\n\nSee [API reference](/andris9/mimelib/blob/master/doc.md) for documentation\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");","directories":{}},"0.1.13":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.13","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./man/doc.1"],"_npmUser":{"name":"andris","email":"andris@node.ee"},"_id":"mimelib@0.1.13","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"6f54bb35b49269c3e9aab32a46ab96a8eada96f6","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.13.tgz"},"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Reference\n\nSee [API reference](/andris9/mimelib/blob/master/doc.md) for documentation\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");","directories":{}},"0.1.14":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.14","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./man/doc.1"],"_npmUser":{"name":"andris","email":"andris@node.ee"},"_id":"mimelib@0.1.14","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"959512218b77642decbdb0670267feafedefbd8e","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.14.tgz"},"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Reference\n\nSee [API reference](/andris9/mimelib/blob/master/doc.md) for documentation\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");","directories":{}},"0.1.15":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.15","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"man":["./man/doc.1"],"_npmUser":{"name":"andris","email":"andris@node.ee"},"_id":"mimelib@0.1.15","devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.15","_defaultsLoaded":true,"dist":{"shasum":"ad68b609b97fbe1f43a5053b83311ced7ae3bc4b","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.15.tgz"},"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Reference\n\nSee [API reference](/andris9/mimelib/blob/master/doc.md) for documentation\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");","directories":{}},"0.1.16":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.16","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"_npmUser":{"name":"andris","email":"andris@node.ee"},"_id":"mimelib@0.1.16","devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.17","_defaultsLoaded":true,"dist":{"shasum":"425cc5ee4dd994b6334fe11c823c0cfd1e5421a9","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.16.tgz"},"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Reference\n\nSee [API reference](/andris9/mimelib/blob/master/doc.md) for documentation\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");","directories":{}},"0.1.17":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.17","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"git://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"_npmUser":{"name":"andris","email":"andris@node.ee"},"_id":"mimelib@0.1.17","devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.17","_defaultsLoaded":true,"dist":{"shasum":"10a1145f1f5e1546e934028d5f0afd8aa0ad3744","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.17.tgz"},"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Reference\n\nSee [API reference](/andris9/mimelib/blob/master/doc.md) for documentation\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");","directories":{}},"0.1.18":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.1.18","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"main":".","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"iconv":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Reference\n\nSee [API reference](/andris9/mimelib/blob/master/doc.md) for documentation\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");","_id":"mimelib@0.1.18","dist":{"shasum":"4c331840b28a2951e2927794ecd76a2102805ba1","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.1.18.tgz"},"directories":{}},"0.2.0":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.0","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"*","addressparser":"*"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### contentTypes\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Use mime-word mode (defaults to false)\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.deccodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Use mime-word mode (defaults to false)\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n","_id":"mimelib@0.2.0","dist":{"shasum":"3225962f136e009ee1a1f5e8de85c0e1ba5610e0","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.0.tgz"},"directories":{}},"0.2.1":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.1","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"*","addressparser":"*"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### contentTypes\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Use mime-word mode (defaults to false)\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.deccodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Use mime-word mode (defaults to false)\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n","_id":"mimelib@0.2.1","dist":{"shasum":"a729198e6ced1e2ec53518248ddde4c81fde74fc","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.1.tgz"},"directories":{}},"0.2.2":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.2","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"*","addressparser":"*"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### contentTypes\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere][, afterSpace]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.decodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n","_id":"mimelib@0.2.2","dist":{"shasum":"fccb16d383bfb65674914c7d973127231d028166","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.2.tgz"},"directories":{}},"0.2.3":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.3","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"*","addressparser":"*"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### contentTypes\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere][, afterSpace]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.decodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n","_id":"mimelib@0.2.3","dist":{"shasum":"adc0e01b5f2d7fc4b5138a8af7a5acb1a89167e7","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.3.tgz"},"directories":{}},"0.2.4":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.4","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"*","addressparser":"*"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### contentTypes\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere][, afterSpace]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.decodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n","_id":"mimelib@0.2.4","dist":{"shasum":"cbec61636cd905405e2b0843f8315ece265f432c","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.4.tgz"},"directories":{}},"0.2.5":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.5","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"*","addressparser":"*"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### contentTypes\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere][, afterSpace]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.decodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n","_id":"mimelib@0.2.5","dist":{"shasum":"1acfb8aef73f8433340cccb1a2e44c871ce03d9f","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.5.tgz"},"directories":{}},"0.2.6":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.6","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"*","addressparser":"*"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### contentTypes\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere][, afterSpace]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.decodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n","_id":"mimelib@0.2.6","dist":{"shasum":"e3928bb24e4c2e30c9573ce725f8ccc0785af962","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.6.tgz"},"directories":{}},"0.2.7":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.7","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"*","addressparser":"*"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere][, afterSpace]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.decodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n\n### contentTypes\n\n**NB! this feature is deprecated**, use [mime](https://github.com/broofa/node-mime) module instead to detect content types and extensions\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"","_id":"mimelib@0.2.7","dist":{"shasum":"cd37008674e939f4384748823b859ea9045636a7","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.7.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"andris","email":"andris@node.ee"},"directories":{}},"0.2.8":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.8","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"*","addressparser":"*"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere][, afterSpace]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.decodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n\n### contentTypes\n\n**NB! this feature is deprecated**, use [mime](https://github.com/broofa/node-mime) module instead to detect content types and extensions\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"\n\n## iconv support\n\nBy default only iconv-lite support is bundled. If you need node-iconv support, you need to add it\nas an additional dependency for your project:\n\n    ...,\n    \"dependencies\":{\n        \"mimelib\": \"*\",\n        \"iconv\": \"*\"\n    },\n    ...\n\n## License\n\nmimelib license is","_id":"mimelib@0.2.8","dist":{"shasum":"ec0aac63160be0640c6e291b0b2186f912115c1e","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.8.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"andris","email":"andris@node.ee"},"directories":{}},"0.2.9":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.9","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"*","addressparser":"*"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere][, afterSpace]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.decodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n\n### contentTypes\n\n**NB! this feature is deprecated**, use [mime](https://github.com/broofa/node-mime) module instead to detect content types and extensions\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"\n\n## iconv support\n\nBy default only iconv-lite support is bundled. If you need node-iconv support, you need to add it\nas an additional dependency for your project:\n\n    ...,\n    \"dependencies\":{\n        \"mimelib\": \"*\",\n        \"iconv\": \"*\"\n    },\n    ...\n\n## License\n\nmimelib license is","readmeFilename":"README.md","_id":"mimelib@0.2.9","dist":{"shasum":"a63ba60f1366c9a0765fa0702c97a2ed85c5857e","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.9.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"andris","email":"andris@node.ee"},"directories":{}},"0.2.10":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.10","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"*","addressparser":"*"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere][, afterSpace]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.decodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n\n### contentTypes\n\n**NB! this feature is deprecated**, use [mime](https://github.com/broofa/node-mime) module instead to detect content types and extensions\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"\n\n## iconv support\n\nBy default only iconv-lite support is bundled. If you need node-iconv support, you need to add it\nas an additional dependency for your project:\n\n    ...,\n    \"dependencies\":{\n        \"mimelib\": \"*\",\n        \"iconv\": \"*\"\n    },\n    ...\n\n## License\n\nmimelib license is","readmeFilename":"README.md","_id":"mimelib@0.2.10","dist":{"shasum":"0e3f58918b6085897b17460fc1af06f7ad52fbe9","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.10.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"andris","email":"andris@node.ee"},"directories":{}},"0.2.11":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.11","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"*","addressparser":"*"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere][, afterSpace]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?Q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?Q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.decodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?Q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n\n### contentTypes\n\n**NB! this feature is deprecated**, use [mime](https://github.com/broofa/node-mime) module instead to detect content types and extensions\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"\n\n## iconv support\n\nBy default only iconv-lite support is bundled. If you need node-iconv support, you need to add it\nas an additional dependency for your project:\n\n    ...,\n    \"dependencies\":{\n        \"mimelib\": \"*\",\n        \"iconv\": \"*\"\n    },\n    ...\n\n## License\n\nmimelib license is","readmeFilename":"README.md","_id":"mimelib@0.2.11","dist":{"shasum":"0a922d8560a02a2308aa98c230e2bef905705dcf","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.11.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"andris","email":"andris@node.ee"},"directories":{}},"0.2.12":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.12","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"~0.1","addressparser":"~0.1"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere][, afterSpace]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?Q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?Q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.decodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?Q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n\n### contentTypes\n\n**NB! this feature is deprecated**, use [mime](https://github.com/broofa/node-mime) module instead to detect content types and extensions\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"\n\n## iconv support\n\nBy default only iconv-lite support is bundled. If you need node-iconv support, you need to add it\nas an additional dependency for your project:\n\n    ...,\n    \"dependencies\":{\n        \"mimelib\": \"*\",\n        \"iconv\": \"*\"\n    },\n    ...\n\n## License\n\nmimelib license is","readmeFilename":"README.md","_id":"mimelib@0.2.12","dist":{"shasum":"5dcbb99c7369e5d62d7e12e71fa334179aebd748","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.12.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"andris","email":"andris@node.ee"},"directories":{}},"0.2.13":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.13","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"~0.1","addressparser":"~0.1"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere][, afterSpace]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?Q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?Q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.decodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?Q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n\n### contentTypes\n\n**NB! this feature is deprecated**, use [mime](https://github.com/broofa/node-mime) module instead to detect content types and extensions\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"\n\n## iconv support\n\nBy default only iconv-lite support is bundled. If you need node-iconv support, you need to add it\nas an additional dependency for your project:\n\n    ...,\n    \"dependencies\":{\n        \"mimelib\": \"*\",\n        \"iconv\": \"*\"\n    },\n    ...\n\n## License\n\nmimelib license is","readmeFilename":"README.md","bugs":{"url":"https://github.com/andris9/mimelib/issues"},"_id":"mimelib@0.2.13","dist":{"shasum":"0668eb85e870c510be747a67ece43b9bbf8e20b0","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.13.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"andris","email":"andris@node.ee"},"directories":{}},"0.2.14":{"name":"mimelib","description":"MIME functions to encode/decode e-mails etc.","version":"0.2.14","author":{"name":"Andris Reinman"},"homepage":"http://github.com/andris9/mimelib","maintainers":[{"name":"andris","email":"andris@node.ee"}],"contributors":[{"name":"Swift","email":"theycallmeswift@gmail.com"}],"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"scripts":{"test":"nodeunit test/"},"main":"index.js","licenses":[{"type":"MIT","url":"http://github.com/andris9/mimelib/blob/master/LICENSE"}],"dependencies":{"encoding":"~0.1","addressparser":"~0.2.0"},"devDependencies":{"nodeunit":"*"},"keywords":["e-mail","mime","email"],"readme":"# mimelib\n\n*mimelib* is a collection of useful functions to deal with mime-encoded data.\n\n## Installation\n\nInstall with *npm*\n\n    npm install mimelib\n    \n## Usage\n\n    var mimelib = require(\"mimelib\");\n\n## Reference\n\n### foldLine\n\nFolds a long line according to the RFC 5322 <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n\n    mimelib.foldLine(str [, maxLength][, foldAnywhere][, afterSpace]) -> String\n    \n  - `str` (String): mime string that might need folding\n  - `maxLength` (Number): max length for a line, defaults to 78\n  - `foldAnywhere` (Boolean): can fold at any location (ie. in base64)\n  - `afterSpace` (Boolean): If `true` fold after the space\n \n\nFor example:\n\n    Content-Type: multipart/alternative; boundary=\"----zzzz----\"\n\nwill become\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n### encodeMimeWord\n\nEncodes a string into mime encoded word format <http://en.wikipedia.org/wiki/MIME#Encoded-Word>  (see also `decodeMimeWord`)\n\n    mimelib.encodeMimeWord = function(str [, encoding][, charset])\n\n  - `str` (String): String to be encoded\n  - `encoding` (String): Encoding Q for quoted printable or B (def.) for base64\n  - `charset` (String): Charset to be used\n  \nFor example:\n\n    See on õhin test\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?Q?See_on_=C3=B5hin_test?=\n    \n### decodeMimeWord\n\nDecodes a string from mime encoded word format (see also `encodeMimeWord`)\n\n    mimelib.decodeMimeWord(str) -> String\n    \n  - `str` (String): String to be decoded\n\nFor example\n\n    mimelib.decodeMimeWord(\"=?UTF-8?Q?See_on_=C3=B5hin_test?=\");\n\nwill become\n\n    See on õhin test\n\n### encodeQuotedPrintable\n\nEncodes a string into Quoted-printable format (see also `decodeQuotedPrintable`)\n\n    mimelib.encodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be encoded into Quoted-printable\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeQuotedPrintable\n\nDecodes a string from Quoted-printable format  (see also `encodeQuotedPrintable`)\n\n    mimelib.decodeQuotedPrintable(str [, mimeWord][, charset]) -> String\n    \n  - `str` (String): String to be decoded\n  - `mimeWord` (Boolean): Deprecated, has no effect, ignore it\n  - `charset` (String): Charset to be used, defaults to UTF-8\n  \n### encodeBase64\n\nEncodes a string into Base64 format. Base64 is mime-word safe (see also `decodeBase64`)\n\n    mimelib.encodeBase64(str [, charset]) -> String\n    \n  - `str` (String): String to be encoded into Base64\n  - `charset` (String): Destination charset, defaults to UTF-8\n\n### decodeBase64\n\nDecodes a string from Base64 format. Base64 is mime-word safe (see also `encodeBase64`)\n\nNB! Always returns UTF-8\n\n    mimelib.decodeBase64(str) -> String\n\n  - `str` (String): String to be decoded from Base64\n  - `charset` (String): Source charset, defaults to UTF-8\n  \n### parseHeaders\n\nParses header lines into an array of objects (see `parseHeaderLine`)\n\n    mimelib.parseHeaders(headers) -> Array\n    \n  - `headers` (String): header section of the e-mail\n\nExample:\n\n    var headers = [\n        \"From: andris@node.ee\",\n        \"To: juulius@node.ee\",\n        \"To: juulius2@node.ee\",\n        \"Content-type: text/html;\",\n        \"    charset=utf-8\"\n        ].join(\"\\r\\n\");\n    mimelib.parseHeaders(headers);\n\nResults in \n\n    {\"from\": [ 'andris@node.ee' ],\n     \"to\": [ 'juulius@node.ee', 'juulius2@node.ee' ],\n     \"content-type\": [ 'text/html;    charset=utf-8' ] }\n\n### parseAddresses\n\nParses names and addresses from a from, to, cc or bcc line\n\n    mimelib.parseAddresses(addresses) -> Array\n    \n  - `addresses` (String): string with comma separated e-mail addresses  \n  \nExample:\n\n    var to = '\"Andris Reinman\" <andris@node.ee>, juulius@node.ee'\n    mimelib.parseAddresses(to);\n  \nResults in\n\n    [{ address: 'andris@node.ee', name: 'Andris Reinman' },\n     { address: 'juulius@node.ee', name: false }]\n\n### parseMimeWords\n\nParses mime-words into UTF-8 strings\n\n    mimelib.parseMimeWords(str) -> String\n\n  - `str` (String): string to be parsed, if includes any mime words, then these are converted to UTF-8 strings\n  \n  \nFor example:\n\n    mimelib.parseMimeWords(\"Hello: =?UTF-8?Q?See_on_=C3=B5hin_test?=\");\n\nResults in\n\n    \"Hello: See on õhin test\"\n    \n### parseHeaderLine\n\nParses a header line to search for additional parameters.\n\n    mimelib.parseHeaderLine(line) -> Object\n    \n  - `line` (String): a line from a message headers\n  \nFor example:\n\n    mimelib.parseHeaderLine(\"text/plain; charset=utf-8\")imelib\n\nResults in\n\n    {\"defaultValue\": 'text/plain',\n     \"charset\": 'utf-8' }\n\n### contentTypes\n\n**NB! this feature is deprecated**, use [mime](https://github.com/broofa/node-mime) module instead to detect content types and extensions\n\n`mimelib.contentTypes` is an object to provide content type strings for common\nfile extensions\n\n    mimelib.contentTypes[\"xls\"]; // \"application/vnd.ms-excel\"\n\n## iconv support\n\nBy default only iconv-lite support is bundled. If you need node-iconv support, you need to add it\nas an additional dependency for your project:\n\n    ...,\n    \"dependencies\":{\n        \"mimelib\": \"*\",\n        \"iconv\": \"*\"\n    },\n    ...\n\n## License\n\nmimelib license is","readmeFilename":"README.md","bugs":{"url":"https://github.com/andris9/mimelib/issues"},"_id":"mimelib@0.2.14","dist":{"shasum":"2a1aa724bd190b85bd526e6317ab6106edfd6831","tarball":"http://registry.npmjs.org/mimelib/-/mimelib-0.2.14.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"andris","email":"andris@node.ee"},"directories":{}}},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"time":{"0.1.0":"2011-05-05T09:51:16.582Z","0.1.1":"2011-05-05T11:33:58.910Z","0.1.2":"2011-05-26T20:02:28.465Z","0.1.3":"2011-07-26T10:54:16.470Z","0.1.4":"2011-11-17T10:06:44.076Z","0.1.5":"2012-01-02T14:01:40.329Z","0.1.6":"2012-01-04T10:53:38.780Z","0.1.7":"2012-01-04T13:26:27.119Z","0.1.8":"2012-01-04T15:16:30.783Z","0.1.9":"2012-01-06T11:06:36.275Z","0.1.10":"2012-01-06T12:37:21.648Z","0.1.11":"2012-01-09T13:04:20.696Z","0.1.13":"2012-01-13T10:20:36.939Z","0.1.14":"2012-01-13T12:18:04.906Z","0.1.15":"2012-04-14T07:29:10.222Z","0.1.16":"2012-06-21T13:10:12.172Z","0.1.17":"2012-06-27T08:39:59.895Z","0.1.18":"2012-07-23T07:51:28.477Z","0.2.0":"2012-08-31T12:20:57.463Z","0.2.1":"2012-08-31T13:00:44.319Z","0.2.2":"2012-09-04T17:56:33.484Z","0.2.3":"2012-09-04T18:44:27.858Z","0.2.4":"2012-09-05T09:23:17.628Z","0.2.5":"2012-09-13T06:59:43.742Z","0.2.6":"2012-09-18T06:46:48.659Z","0.2.7":"2012-09-26T10:31:21.695Z","0.2.8":"2012-11-30T21:46:33.296Z","0.2.9":"2012-12-22T22:17:46.266Z","0.2.10":"2012-12-28T09:59:56.304Z","0.2.11":"2013-03-22T08:31:20.260Z","0.2.12":"2013-03-23T06:28:01.016Z","0.2.13":"2013-10-03T07:28:38.944Z","0.2.14":"2013-10-30T08:41:03.206Z"},"author":{"name":"Andris Reinman"},"repository":{"type":"git","url":"http://github.com/andris9/mimelib.git"},"users":{"fgribreau":true},"_attachments":{},"_etag":"\"E3J2K8QF9LODNTPLR9SSSM1BP\""}