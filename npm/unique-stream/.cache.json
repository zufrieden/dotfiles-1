{"_id":"unique-stream","_rev":"7-9f74dab37f5ae08c52d6efd8a028ca95","name":"unique-stream","description":"node.js through stream that emits a unique stream of objects based on criteria","dist-tags":{"latest":"0.0.3"},"versions":{"0.0.1":{"name":"unique-stream","version":"0.0.1","description":"node.js through stream that emits a unique stream of objects based on criteria","main":"index.js","scripts":{"test":"node_modules/.bin/mocha"},"repository":{"type":"git","url":"https://github.com/eugeneware/unique-stream"},"keywords":["unique","stream","unique-stream","streaming","streams"],"author":{"name":"Eugene Ware","email":"eugene@noblesamurai.com"},"license":"BSD","devDependencies":{"chai":"~1.7.2","mocha":"~1.12.0","after":"~0.8.1"},"dependencies":{"through":"~2.3.4"},"readme":"# unique-stream\n\nnode.js through stream that emits a unique stream of objects based on criteria\n\n## Installation\n\nInstall via npm:\n\n```\n$ npm install unique-stream\n```\n\n## Examples\n\n### Dedupe a ReadStream based on JSON.stringify:\n\n``` js\nvar unique = require('unique-stream')\n  , Stream = require('stream');\n\n// return a stream of 3 identical objects\nfunction makeStreamOfObjects() {\n  var s = new Stream;\n  s.readable = true;\n  var count = 3;\n  for (var i = 0; i < 3; i++) {\n    setImmediate(function () {\n      s.emit('data', { name: 'Bob', number: 123 });\n      --count && end();\n    });\n  }\n\n  function end() {\n    s.emit('end');\n  }\n\n  return s;\n}\n\n// Will only print out one object as the rest are dupes. (Uses JSON.stringify)\nmakeStreamOfObjects()\n  .pipe(unique())\n  .on('data', console.log);\n\n```\n\n### Dedupe a ReadStream based on an object property:\n\n``` js\n// Use name as the key field to dedupe on. Will only print one object\nmakeStreamOfObjects()\n  .pipe(unique('name'))\n  .on('data', console.log);\n```\n\n### Dedupe a ReadStream based on a custom function:\n\n``` js\n// Use a custom function to dedupe on. Use the 'number' field. Will only print one object.\nmakeStreamOfObjects()\n  .pipe(function (data) {\n    return data.number;\n  })\n  .on('data', console.log);\n```\n\n## Dedupe multiple streams\n\nThe reason I wrote this was to dedupe multiple object streams:\n\n``` js\nvar aggregator = unique();\n\n// Stream 1\nmakeStreamOfObjects()\n  .pipe(aggregator);\n\n// Stream 2\nmakeStreamOfObjects()\n  .pipe(aggregator);\n\n// Stream 3\nmakeStreamOfObjects()\n  .pipe(aggregator);\n\naggregator.on('data', console.log);\n```\n","readmeFilename":"README.md","_id":"unique-stream@0.0.1","dist":{"shasum":"9a18bab06761c35fcbd339e4f7f0f31ba2e3ee4b","tarball":"http://registry.npmjs.org/unique-stream/-/unique-stream-0.0.1.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"eugeneware","email":"eugene@noblesamurai.com"},"maintainers":[{"name":"eugeneware","email":"eugene@noblesamurai.com"}],"directories":{}},"0.0.2":{"name":"unique-stream","version":"0.0.2","description":"node.js through stream that emits a unique stream of objects based on criteria","main":"index.js","scripts":{"test":"node_modules/.bin/mocha"},"repository":{"type":"git","url":"https://github.com/eugeneware/unique-stream"},"keywords":["unique","stream","unique-stream","streaming","streams"],"author":{"name":"Eugene Ware","email":"eugene@noblesamurai.com"},"license":"BSD","devDependencies":{"chai":"~1.7.2","mocha":"~1.12.0","after":"~0.8.1"},"readme":"# unique-stream\n\nnode.js through stream that emits a unique stream of objects based on criteria\n\n## Installation\n\nInstall via npm:\n\n```\n$ npm install unique-stream\n```\n\n## Examples\n\n### Dedupe a ReadStream based on JSON.stringify:\n\n``` js\nvar unique = require('unique-stream')\n  , Stream = require('stream');\n\n// return a stream of 3 identical objects\nfunction makeStreamOfObjects() {\n  var s = new Stream;\n  s.readable = true;\n  var count = 3;\n  for (var i = 0; i < 3; i++) {\n    setImmediate(function () {\n      s.emit('data', { name: 'Bob', number: 123 });\n      --count && end();\n    });\n  }\n\n  function end() {\n    s.emit('end');\n  }\n\n  return s;\n}\n\n// Will only print out one object as the rest are dupes. (Uses JSON.stringify)\nmakeStreamOfObjects()\n  .pipe(unique())\n  .on('data', console.log);\n\n```\n\n### Dedupe a ReadStream based on an object property:\n\n``` js\n// Use name as the key field to dedupe on. Will only print one object\nmakeStreamOfObjects()\n  .pipe(unique('name'))\n  .on('data', console.log);\n```\n\n### Dedupe a ReadStream based on a custom function:\n\n``` js\n// Use a custom function to dedupe on. Use the 'number' field. Will only print one object.\nmakeStreamOfObjects()\n  .pipe(function (data) {\n    return data.number;\n  })\n  .on('data', console.log);\n```\n\n## Dedupe multiple streams\n\nThe reason I wrote this was to dedupe multiple object streams:\n\n``` js\nvar aggregator = unique();\n\n// Stream 1\nmakeStreamOfObjects()\n  .pipe(aggregator);\n\n// Stream 2\nmakeStreamOfObjects()\n  .pipe(aggregator);\n\n// Stream 3\nmakeStreamOfObjects()\n  .pipe(aggregator);\n\naggregator.on('data', console.log);\n```\n","readmeFilename":"README.md","_id":"unique-stream@0.0.2","dist":{"shasum":"01348747e2382cd19ff2a37a20419e0bdd1844c0","tarball":"http://registry.npmjs.org/unique-stream/-/unique-stream-0.0.2.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"eugeneware","email":"eugene@noblesamurai.com"},"maintainers":[{"name":"eugeneware","email":"eugene@noblesamurai.com"}],"directories":{}},"0.0.3":{"name":"unique-stream","version":"0.0.3","description":"node.js through stream that emits a unique stream of objects based on criteria","main":"index.js","scripts":{"test":"node_modules/.bin/mocha"},"repository":{"type":"git","url":"https://github.com/eugeneware/unique-stream"},"keywords":["unique","stream","unique-stream","streaming","streams"],"author":{"name":"Eugene Ware","email":"eugene@noblesamurai.com"},"license":"BSD","devDependencies":{"chai":"~1.7.2","mocha":"~1.12.0","after":"~0.8.1"},"readme":"# unique-stream\n\nnode.js through stream that emits a unique stream of objects based on criteria\n\n[![build status](https://secure.travis-ci.org/eugeneware/unique-stream.png)](http://travis-ci.org/eugeneware/unique-stream)\n\n## Installation\n\nInstall via npm:\n\n```\n$ npm install unique-stream\n```\n\n## Examples\n\n### Dedupe a ReadStream based on JSON.stringify:\n\n``` js\nvar unique = require('unique-stream')\n  , Stream = require('stream');\n\n// return a stream of 3 identical objects\nfunction makeStreamOfObjects() {\n  var s = new Stream;\n  s.readable = true;\n  var count = 3;\n  for (var i = 0; i < 3; i++) {\n    setImmediate(function () {\n      s.emit('data', { name: 'Bob', number: 123 });\n      --count && end();\n    });\n  }\n\n  function end() {\n    s.emit('end');\n  }\n\n  return s;\n}\n\n// Will only print out one object as the rest are dupes. (Uses JSON.stringify)\nmakeStreamOfObjects()\n  .pipe(unique())\n  .on('data', console.log);\n\n```\n\n### Dedupe a ReadStream based on an object property:\n\n``` js\n// Use name as the key field to dedupe on. Will only print one object\nmakeStreamOfObjects()\n  .pipe(unique('name'))\n  .on('data', console.log);\n```\n\n### Dedupe a ReadStream based on a custom function:\n\n``` js\n// Use a custom function to dedupe on. Use the 'number' field. Will only print one object.\nmakeStreamOfObjects()\n  .pipe(function (data) {\n    return data.number;\n  })\n  .on('data', console.log);\n```\n\n## Dedupe multiple streams\n\nThe reason I wrote this was to dedupe multiple object streams:\n\n``` js\nvar aggregator = unique();\n\n// Stream 1\nmakeStreamOfObjects()\n  .pipe(aggregator);\n\n// Stream 2\nmakeStreamOfObjects()\n  .pipe(aggregator);\n\n// Stream 3\nmakeStreamOfObjects()\n  .pipe(aggregator);\n\naggregator.on('data', console.log);\n```\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/eugeneware/unique-stream/issues"},"_id":"unique-stream@0.0.3","dist":{"shasum":"a5a19d2764588a4d608baff5889b5a60f18c705d","tarball":"http://registry.npmjs.org/unique-stream/-/unique-stream-0.0.3.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"eugeneware","email":"eugene@noblesamurai.com"},"maintainers":[{"name":"eugeneware","email":"eugene@noblesamurai.com"}],"directories":{}}},"readme":"# unique-stream\n\nnode.js through stream that emits a unique stream of objects based on criteria\n\n## Installation\n\nInstall via npm:\n\n```\n$ npm install unique-stream\n```\n\n## Examples\n\n### Dedupe a ReadStream based on JSON.stringify:\n\n``` js\nvar unique = require('unique-stream')\n  , Stream = require('stream');\n\n// return a stream of 3 identical objects\nfunction makeStreamOfObjects() {\n  var s = new Stream;\n  s.readable = true;\n  var count = 3;\n  for (var i = 0; i < 3; i++) {\n    setImmediate(function () {\n      s.emit('data', { name: 'Bob', number: 123 });\n      --count && end();\n    });\n  }\n\n  function end() {\n    s.emit('end');\n  }\n\n  return s;\n}\n\n// Will only print out one object as the rest are dupes. (Uses JSON.stringify)\nmakeStreamOfObjects()\n  .pipe(unique())\n  .on('data', console.log);\n\n```\n\n### Dedupe a ReadStream based on an object property:\n\n``` js\n// Use name as the key field to dedupe on. Will only print one object\nmakeStreamOfObjects()\n  .pipe(unique('name'))\n  .on('data', console.log);\n```\n\n### Dedupe a ReadStream based on a custom function:\n\n``` js\n// Use a custom function to dedupe on. Use the 'number' field. Will only print one object.\nmakeStreamOfObjects()\n  .pipe(function (data) {\n    return data.number;\n  })\n  .on('data', console.log);\n```\n\n## Dedupe multiple streams\n\nThe reason I wrote this was to dedupe multiple object streams:\n\n``` js\nvar aggregator = unique();\n\n// Stream 1\nmakeStreamOfObjects()\n  .pipe(aggregator);\n\n// Stream 2\nmakeStreamOfObjects()\n  .pipe(aggregator);\n\n// Stream 3\nmakeStreamOfObjects()\n  .pipe(aggregator);\n\naggregator.on('data', console.log);\n```\n","maintainers":[{"name":"eugeneware","email":"eugene@noblesamurai.com"}],"time":{"modified":"2013-09-16T14:56:36.627Z","created":"2013-07-12T05:51:40.066Z","0.0.1":"2013-07-12T05:51:49.387Z","0.0.2":"2013-07-12T14:23:53.502Z","0.0.3":"2013-09-16T14:56:36.627Z"},"author":{"name":"Eugene Ware","email":"eugene@noblesamurai.com"},"repository":{"type":"git","url":"https://github.com/eugeneware/unique-stream"},"_attachments":{},"_etag":"\"DB3R2DL9LDJ9064U5SKFS7DZ2\""}