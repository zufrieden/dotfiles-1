{"_id":"when","_rev":"63-a63bd87b71cbe6df36e997b19739698c","name":"when","description":"A lightweight Promises/A+ and when() implementation, plus other async goodies.","dist-tags":{"latest":"2.7.0"},"versions":{"1.2.0":{"name":"when","version":"1.2.0","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promises","when","async"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":{"name":"https://github.com/cujojs/when/issues"},"maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.5"},"main":"./when","directories":{"test":"test"},"scripts":{"test":"buster test -e node"},"_npmUser":{"name":"cujojs","email":"info@cujojs.com"},"_id":"when@1.2.0","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.15","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"97f34c3271c58a0af91fe051c32e66291d0d12ba","tarball":"http://registry.npmjs.org/when/-/when-1.2.0.tgz"}},"1.3.0":{"name":"when","version":"1.3.0","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promises","when","async"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":{"name":"https://github.com/cujojs/when/issues"},"maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.5"},"main":"./when","directories":{"test":"test"},"scripts":{"test":"buster test -e node"},"_npmUser":{"name":"cujojs","email":"info@cujojs.com"},"_id":"when@1.3.0","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.15","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"0a8034c0a2d67c35164bf7a40deb053190cc5b94","tarball":"http://registry.npmjs.org/when/-/when-1.3.0.tgz"}},"1.4.0":{"name":"when","version":"1.4.0","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promises","when","async"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":{"name":"https://github.com/cujojs/when/issues"},"maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.6"},"main":"when","directories":{"test":"test"},"scripts":{"test":"./node_modules/buster/bin/buster-test -e node"},"_npmUser":{"name":"cujojs","email":"info@cujojs.com"},"_id":"when@1.4.0","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.15","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"109364f9b0f8d352e20aedef2c7230b4382bcdb0","tarball":"http://registry.npmjs.org/when/-/when-1.4.0.tgz"}},"1.4.1":{"name":"when","version":"1.4.1","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promises","when","async","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":{"name":"https://github.com/cujojs/when/issues"},"maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.6"},"main":"when","directories":{"test":"test"},"scripts":{"test":"./node_modules/buster/bin/buster-test -e node"},"_npmUser":{"name":"cujojs","email":"info@cujojs.com"},"_id":"when@1.4.1","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.15","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"e44d64cdfdfd84136524af20288c06c4621384ac","tarball":"http://registry.npmjs.org/when/-/when-1.4.1.tgz"}},"1.4.2":{"name":"when","version":"1.4.2","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promises","when","async","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.6"},"main":"when","directories":{"test":"test"},"scripts":{"test":"./node_modules/buster/bin/buster-test -e node"},"readme":"# when.js [![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when)\n\nA lightweight [CommonJS](http://wiki.commonjs.org/wiki/Promises) [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and `when()` implementation.  It also provides several other useful Promise-related concepts, such as joining and chaining, and has a robust unit test suite.\n\nIt's **just over 1k** when compiled with Google Closure (w/advanced optimizations) and gzipped.\n\nwhen.js was derived from the async core of [wire.js](https://github.com/cujojs/wire).\n\nWhat's New?\n===========\n\n### 1.4.2\n\n* Fix for IE8 infinite recursion (See [#49](https://github.com/cujojs/when/issues/49))\n\n### 1.4.1\n\n* Code and unit test cleanup and streamlining--no functional changes.\n\n### 1.4.0\n\n* Create a resolved promise: `when.resolve(value)` creates a resolved promise for `value`. See [API docs](when/blob/master/docs/api.md#whenresolve).\n* Resolve/reject return something useful: `deferred.resolve` and `deferred.reject` now return a promise for the fulfilled or rejected value.\n* Resolve a deferred with another promise: `deferred.resolve(promise)` - when `promise` resolves or rejects, so will `deferred`.\n\n[Full Changelog](https://github.com/cujojs/when/wiki/Changelog)\n\nDocs & Examples\n===============\n\n[API docs](when/blob/master/docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```javascript\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Script Tag\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. `<script src=\"path/to/when/when.js\"></script>`\n1. `when` will be available as `window.when`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\nRunning the Unit Tests\n======================\n\nInstall [buster.js](http://busterjs.org/)\n\n`npm install -g buster`\n\nRun unit tests in Node:\n\n1. `buster test -e node`\n\nRun unit tests in Browsers (and Node):\n\n1. `buster server` - this will print a url\n2. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n3. `buster test` or `buster test -e browser`\n\nReferences\n----------\n\nMuch of this code was inspired by @[unscriptable](https://github.com/unscriptable)'s [tiny promises](https://github.com/unscriptable/promises), the async innards of [wire.js](https://github.com/cujojs/wire), and some gists [here](https://gist.github.com/870729), [here](https://gist.github.com/892345), [here](https://gist.github.com/894356), and [here](https://gist.github.com/894360)\n\nSome of the code has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","_id":"when@1.4.2","dist":{"shasum":"3ab5ce6485b3f1b52b1867b565a7a1b11201941f","tarball":"http://registry.npmjs.org/when/-/when-1.4.2.tgz"}},"1.4.3":{"name":"when","version":"1.4.3","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promises","when","async","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.6"},"main":"when","directories":{"test":"test"},"scripts":{"test":"./node_modules/buster/bin/buster-test -e node"},"readme":"# when.js [![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when)\n\nA lightweight [CommonJS](http://wiki.commonjs.org/wiki/Promises) [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and `when()` implementation.  It also provides several other useful Promise-related concepts, such as joining and chaining, and has a robust unit test suite.\n\nIt's **just over 1k** when compiled with Google Closure (w/advanced optimizations) and gzipped.\n\nwhen.js was derived from the async core of [wire.js](https://github.com/cujojs/wire).\n\nWhat's New?\n===========\n\n### 1.4.3\n\n* Fix for infinite promise coercion between when.js and Q (See [#50](https://github.com/cujojs/when/issues/50)). Thanks [@kriskowal](https://github.com/kriskowal) and [@domenic](https://github.com/domenic)\n\n### 1.4.2\n\n* Fix for IE8 infinite recursion (See [#49](https://github.com/cujojs/when/issues/49))\n\n### 1.4.1\n\n* Code and unit test cleanup and streamlining--no functional changes.\n\n### 1.4.0\n\n* Create a resolved promise: `when.resolve(value)` creates a resolved promise for `value`. See [API docs](when/blob/master/docs/api.md#whenresolve).\n* Resolve/reject return something useful: `deferred.resolve` and `deferred.reject` now return a promise for the fulfilled or rejected value.\n* Resolve a deferred with another promise: `deferred.resolve(promise)` - when `promise` resolves or rejects, so will `deferred`.\n\n[Full Changelog](https://github.com/cujojs/when/wiki/Changelog)\n\nDocs & Examples\n===============\n\n[API docs](when/blob/master/docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```javascript\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Script Tag\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. `<script src=\"path/to/when/when.js\"></script>`\n1. `when` will be available as `window.when`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\nRunning the Unit Tests\n======================\n\nInstall [buster.js](http://busterjs.org/)\n\n`npm install -g buster`\n\nRun unit tests in Node:\n\n1. `buster test -e node`\n\nRun unit tests in Browsers (and Node):\n\n1. `buster server` - this will print a url\n2. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n3. `buster test` or `buster test -e browser`\n\nReferences\n----------\n\nMuch of this code was inspired by @[unscriptable](https://github.com/unscriptable)'s [tiny promises](https://github.com/unscriptable/promises), the async innards of [wire.js](https://github.com/cujojs/wire), and some gists [here](https://gist.github.com/870729), [here](https://gist.github.com/892345), [here](https://gist.github.com/894356), and [here](https://gist.github.com/894360)\n\nSome of the code has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","_id":"when@1.4.3","dist":{"shasum":"c63d313a35a13c37802ce3cdbea9c2ffc5c04dc2","tarball":"http://registry.npmjs.org/when/-/when-1.4.3.tgz"}},"1.4.4":{"name":"when","version":"1.4.4","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promises","when","async","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.6"},"main":"when","directories":{"test":"test"},"scripts":{"test":"./node_modules/buster/bin/buster-test -e node"},"readme":"# when.js [![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when)\n\nA lightweight [CommonJS](http://wiki.commonjs.org/wiki/Promises) [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and `when()` implementation.  It also provides several other useful Promise-related concepts, such as joining and chaining, and has a robust unit test suite.\n\nIt's **just over 1k** when compiled with Google Closure (w/advanced optimizations) and gzipped.\n\nwhen.js was derived from the async core of [wire.js](https://github.com/cujojs/wire).\n\nWhat's New?\n===========\n\n### 1.4.4\n\n* Change UMD boilerplate to check for `exports` to avoid a problem with QUnit.  See [#54](https://github.com/cujojs/when/issues/54) for more info.\n\n### 1.4.3\n\n* Fix for infinite promise coercion between when.js and Q (See [#50](https://github.com/cujojs/when/issues/50)). Thanks [@kriskowal](https://github.com/kriskowal) and [@domenic](https://github.com/domenic)\n\n### 1.4.2\n\n* Fix for IE8 infinite recursion (See [#49](https://github.com/cujojs/when/issues/49))\n\n### 1.4.1\n\n* Code and unit test cleanup and streamlining--no functional changes.\n\n### 1.4.0\n\n* Create a resolved promise: `when.resolve(value)` creates a resolved promise for `value`. See [API docs](when/blob/master/docs/api.md#whenresolve).\n* Resolve/reject return something useful: `deferred.resolve` and `deferred.reject` now return a promise for the fulfilled or rejected value.\n* Resolve a deferred with another promise: `deferred.resolve(promise)` - when `promise` resolves or rejects, so will `deferred`.\n\n[Full Changelog](https://github.com/cujojs/when/wiki/Changelog)\n\nDocs & Examples\n===============\n\n[API docs](when/blob/master/docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```javascript\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Script Tag\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. `<script src=\"path/to/when/when.js\"></script>`\n1. `when` will be available as `window.when`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\nRunning the Unit Tests\n======================\n\nInstall [buster.js](http://busterjs.org/)\n\n`npm install -g buster`\n\nRun unit tests in Node:\n\n1. `buster test -e node`\n\nRun unit tests in Browsers (and Node):\n\n1. `buster server` - this will print a url\n2. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n3. `buster test` or `buster test -e browser`\n\nReferences\n----------\n\nMuch of this code was inspired by @[unscriptable](https://github.com/unscriptable)'s [tiny promises](https://github.com/unscriptable/promises), the async innards of [wire.js](https://github.com/cujojs/wire), and some gists [here](https://gist.github.com/870729), [here](https://gist.github.com/892345), [here](https://gist.github.com/894356), and [here](https://gist.github.com/894360)\n\nSome of the code has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","_id":"when@1.4.4","dist":{"shasum":"763adda0e224dc560e651f6cf3541cde09e9ddd2","tarball":"http://registry.npmjs.org/when/-/when-1.4.4.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"1.5.0":{"name":"when","version":"1.5.0","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promises","when","async","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.6"},"main":"when","directories":{"test":"test"},"scripts":{"test":"./node_modules/buster/bin/buster-test -e node"},"readme":"# when.js [![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when)\n\nA lightweight [CommonJS](http://wiki.commonjs.org/wiki/Promises) [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and `when()` implementation.  It also provides several other useful Promise-related concepts, such as joining, mapping and reducing, and has a robust unit test suite.\n\nIt's **under 1.3k** when compiled with Google Closure (w/advanced optimizations) and gzipped, and has no dependencies.\n\nwhen.js was derived from the async core of [wire.js](https://github.com/cujojs/wire).\n\nWhat's New?\n===========\n\n### 1.5.0\n\n* New task execution and concurrency management: [when/sequence](when/blob/master/docs/api.md#whensequence), [when/pipeline](when/blob/master/docs/api.md#whenpipeline), and [when/parallel](when/blob/master/docs/api.md#whenparallel).\n* Performance optimizations for [when.all](when/blob/master/docs/api.md#whenall) and [when.map](when/blob/master/docs/api.md#whenmap), up to 2x in some cases.\n* Options for disabling [paranoid mode](when/blob/master/docs/api.md#paranoid-mode) that provides a significant performance gain in v8 (e.g. Node and Chrome). See this [v8 performance problem with Object.freeze](http://stackoverflow.com/questions/8435080/any-performance-benefit-to-locking-down-javascript-objects) for more info.\n* **Important:** `deferred` and `deferred.resolver` no longer throw when resolved/rejected multiple times.  They will return silently as if the they had succeeded.  This prevents parties to whom *only* the `resolver` has been given from using `try/catch` to determine the state of the associated promise.\n\t* For debugging, you can use the [when/debug](https://github.com/cujojs/when/wiki/when-debug) module, which will still throw when a deferred is resolved/rejected multiple times.\n\n### 1.4.4\n\n* Change UMD boilerplate to check for `exports` to avoid a problem with QUnit.  See [#54](https://github.com/cujojs/when/issues/54) for more info.\n\n[Full Changelog](https://github.com/cujojs/when/wiki/Changelog)\n\nDocs & Examples\n===============\n\n[API docs](when/blob/master/docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```javascript\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Script Tag\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. `<script src=\"path/to/when/when.js\"></script>`\n1. `when` will be available as `window.when`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\nRunning the Unit Tests\n======================\n\nInstall [buster.js](http://busterjs.org/)\n\n`npm install -g buster`\n\nRun unit tests in Node:\n\n1. `buster test -e node`\n\nRun unit tests in Browsers (and Node):\n\n1. `buster server` - this will print a url\n2. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n3. `buster test` or `buster test -e browser`\n\nReferences\n----------\n\nMuch of this code was inspired by @[unscriptable](https://github.com/unscriptable)'s [tiny promises](https://github.com/unscriptable/promises), the async innards of [wire.js](https://github.com/cujojs/wire), and some gists [here](https://gist.github.com/870729), [here](https://gist.github.com/892345), [here](https://gist.github.com/894356), and [here](https://gist.github.com/894360)\n\nSome of the code has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","_id":"when@1.5.0","dist":{"shasum":"986386016cf1f0d828f8bf2a9db1ad361330f8df","tarball":"http://registry.npmjs.org/when/-/when-1.5.0.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"1.5.1":{"name":"when","version":"1.5.1","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.6"},"main":"when","directories":{"test":"test"},"scripts":{"test":"./node_modules/buster/bin/buster-test -e node"},"readme":"# when.js [![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when)\n\nA lightweight [CommonJS](http://wiki.commonjs.org/wiki/Promises) [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and `when()` implementation.  It also provides several other useful Promise-related concepts, such as joining, mapping and reducing, and has a robust unit test suite.\n\nIt's **under 1.3k** when compiled with Google Closure (w/advanced optimizations) and gzipped, and has no dependencies.\n\nwhen.js was derived from the async core of [wire.js](https://github.com/cujojs/wire).\n\nWhat's New?\n===========\n\n### 1.5.1\n\n* Performance optimization for [when.defer](when/blob/master/docs/api.md#whendefer), up to 1.5x in some cases.\n* [when/debug](when/blob/master/docs/api.md#whendebug) can now log exceptions and rejections in deeper promise chains, in some cases, even when the promises involved aren't when.js promises.\n\n### 1.5.0\n\n* New task execution and concurrency management: [when/sequence](when/blob/master/docs/api.md#whensequence), [when/pipeline](when/blob/master/docs/api.md#whenpipeline), and [when/parallel](when/blob/master/docs/api.md#whenparallel).\n* Performance optimizations for [when.all](when/blob/master/docs/api.md#whenall) and [when.map](when/blob/master/docs/api.md#whenmap), up to 2x in some cases.\n* Options for disabling [paranoid mode](when/blob/master/docs/api.md#paranoid-mode) that provides a significant performance gain in v8 (e.g. Node and Chrome). See this [v8 performance problem with Object.freeze](http://stackoverflow.com/questions/8435080/any-performance-benefit-to-locking-down-javascript-objects) for more info.\n* **Important:** `deferred` and `deferred.resolver` no longer throw when resolved/rejected multiple times.  They will return silently as if the they had succeeded.  This prevents parties to whom *only* the `resolver` has been given from using `try/catch` to determine the state of the associated promise.\n\t* For debugging, you can use the [when/debug](https://github.com/cujojs/when/wiki/when-debug) module, which will still throw when a deferred is resolved/rejected multiple times.\n\n### 1.4.4\n\n* Change UMD boilerplate to check for `exports` to avoid a problem with QUnit.  See [#54](https://github.com/cujojs/when/issues/54) for more info.\n\n[Full Changelog](https://github.com/cujojs/when/wiki/Changelog)\n\nDocs & Examples\n===============\n\n[API docs](when/blob/master/docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```javascript\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Script Tag\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. `<script src=\"path/to/when/when.js\"></script>`\n1. `when` will be available as `window.when`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\nRunning the Unit Tests\n======================\n\nInstall [buster.js](http://busterjs.org/)\n\n`npm install -g buster`\n\nRun unit tests in Node:\n\n1. `buster test -e node`\n\nRun unit tests in Browsers (and Node):\n\n1. `buster server` - this will print a url\n2. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n3. `buster test` or `buster test -e browser`\n\nReferences\n----------\n\nMuch of this code was inspired by @[unscriptable](https://github.com/unscriptable)'s [tiny promises](https://github.com/unscriptable/promises), the async innards of [wire.js](https://github.com/cujojs/wire), and some gists [here](https://gist.github.com/870729), [here](https://gist.github.com/892345), [here](https://gist.github.com/894356), and [here](https://gist.github.com/894360)\n\nSome of the code has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","_id":"when@1.5.1","dist":{"shasum":"60068e8004ba22022f223339b39e4766015670b2","tarball":"http://registry.npmjs.org/when/-/when-1.5.1.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"1.5.2":{"name":"when","version":"1.5.2","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.6","promise-tests":"*"},"main":"when","directories":{"test":"test"},"scripts":{"test":"buster test -e node && promise-tests promises-a test/when-adapter.js","test-all":"buster test -e node && promise-tests all test/when-adapter.js","start":"buster server","test-browser":"buster test -e browser"},"readme":"# when.js [![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when)\n\nWhen.js is cujojs's lightweight [CommonJS](http://wiki.commonjs.org/wiki/Promises) [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and `when()` implementation, derived from the async core of [wire.js](https://github.com/cujojs/wire), cujojs's IOC Container.  It also provides several other useful Promise-related concepts, such as joining multiple promises, mapping and reducing collections of promises, timed promises, and has a robust [unit test suite](#running-the-unit-tests).\n\nIt passes the [Promises/A Test Suite](https://github.com/domenic/promise-tests), is [frighteningly fast](https://github.com/cujojs/promise-perf-tests#test-results), and is **under 1.3k** when compiled with Google Closure (w/advanced optimizations) and gzipped, and has no dependencies.\n\n# What's New?\n\n### 1.5.2\n\n* Integrate @domenic's [Promises/A Test Suite](https://github.com/domenic/promise-tests). Runs via `npm test`.\n* No functional change\n\n### 1.5.1\n\n* Performance optimization for [when.defer](when/blob/master/docs/api.md#whendefer), up to 1.5x in some cases.\n* [when/debug](when/blob/master/docs/api.md#whendebug) can now log exceptions and rejections in deeper promise chains, in some cases, even when the promises involved aren't when.js promises.\n\n### 1.5.0\n\n* New task execution and concurrency management: [when/sequence](when/blob/master/docs/api.md#whensequence), [when/pipeline](when/blob/master/docs/api.md#whenpipeline), and [when/parallel](when/blob/master/docs/api.md#whenparallel).\n* Performance optimizations for [when.all](when/blob/master/docs/api.md#whenall) and [when.map](when/blob/master/docs/api.md#whenmap), up to 2x in some cases.\n* Options for disabling [paranoid mode](when/blob/master/docs/api.md#paranoid-mode) that provides a significant performance gain in v8 (e.g. Node and Chrome). See this [v8 performance problem with Object.freeze](http://stackoverflow.com/questions/8435080/any-performance-benefit-to-locking-down-javascript-objects) for more info.\n* **Important:** `deferred` and `deferred.resolver` no longer throw when resolved/rejected multiple times.  They will return silently as if the they had succeeded.  This prevents parties to whom *only* the `resolver` has been given from using `try/catch` to determine the state of the associated promise.\n\t* For debugging, you can use the [when/debug](https://github.com/cujojs/when/wiki/when-debug) module, which will still throw when a deferred is resolved/rejected multiple times.\n\n[Full Changelog](https://github.com/cujojs/when/wiki/Changelog)\n\n# Docs & Examples\n\n[API docs](when/blob/master/docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```javascript\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Script Tag\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. `<script src=\"path/to/when/when.js\"></script>`\n1. `when` will be available as `window.when`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes @domenic's [Promises/A Test Suite](https://github.com/domenic/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by @[unscriptable](https://github.com/unscriptable)'s [tiny promises](https://github.com/unscriptable/promises), the async innards of [wire.js](https://github.com/cujojs/wire), and some gists [here](https://gist.github.com/870729), [here](https://gist.github.com/892345), [here](https://gist.github.com/894356), and [here](https://gist.github.com/894360)\n\nSome of the code has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","_id":"when@1.5.2","dist":{"shasum":"7e9dad4deee00f36bab9ecb3b6f009085f716df7","tarball":"http://registry.npmjs.org/when/-/when-1.5.2.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"1.6.0":{"name":"when","version":"1.6.0","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.6","promise-tests":"*"},"main":"when","directories":{"test":"test"},"scripts":{"test":"buster test -e node && promise-tests promises-a test/when-adapter.js","test-all":"buster test -e node && promise-tests all test/when-adapter.js","start":"buster server","test-browser":"buster test -e browser"},"readme":"# when.js [![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when)\n\nWhen.js is cujojs's lightweight [CommonJS](http://wiki.commonjs.org/wiki/Promises) [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and `when()` implementation, derived from the async core of [wire.js](https://github.com/cujojs/wire), cujojs's IOC Container.  It also provides several other useful Promise-related concepts, such as joining multiple promises, mapping and reducing collections of promises, timed promises, and has a robust [unit test suite](#running-the-unit-tests).\n\nIt passes the [Promises/A Test Suite](https://github.com/domenic/promise-tests), is [frighteningly fast](https://github.com/cujojs/promise-perf-tests#test-results), and is **under 1.3k** when compiled with Google Closure (w/advanced optimizations) and gzipped, and has no dependencies.\n\n# What's New?\n\n### 1.6.0\n\n* New [when.join](when/blob/master/docs/api.md#whenjoin) - Joins 2 or more promises together into a single promise.\n* [when.some](when/blob/master/docs/api.md#whensome) and [when.any](when/blob/master/docs/api.md#whenany) now act like competitive races, and have generally more useful behavior.  [Read the discussion in #60](https://github.com/cujojs/when/issues/60).\n* *Experimental* progress event propagation.  Progress events will propagate through promise chains. [Read the details here](when/blob/master/docs/api.md#progress-events).\n* *Temporarily* removed calls to `Object.freeze`. Promises are no longer frozen due to a horrendous v8 performance penalty.  [Read discussion here](https://groups.google.com/d/topic/cujojs/w_olYqorbsY/discussion).\n\t* **IMPORTANT:** Continue to treat promises as if they are frozen, since `freeze()` will be reintroduced once v8 performance improves. \n* [when/debug](https://github.com/cujojs/when/wiki/when-debug) now allows setting global a debugging callback for rejected promises.\n\n### 1.5.2\n\n* Integrate @domenic's [Promises/A Test Suite](https://github.com/domenic/promise-tests). Runs via `npm test`.\n* No functional change\n\n### 1.5.1\n\n* Performance optimization for [when.defer](when/blob/master/docs/api.md#whendefer), up to 1.5x in some cases.\n* [when/debug](https://github.com/cujojs/when/wiki/when-debug) can now log exceptions and rejections in deeper promise chains, in some cases, even when the promises involved aren't when.js promises.\n\n### 1.5.0\n\n* New task execution and concurrency management: [when/sequence](when/blob/master/docs/api.md#whensequence), [when/pipeline](when/blob/master/docs/api.md#whenpipeline), and [when/parallel](when/blob/master/docs/api.md#whenparallel).\n* Performance optimizations for [when.all](when/blob/master/docs/api.md#whenall) and [when.map](when/blob/master/docs/api.md#whenmap), up to 2x in some cases.\n* Options for disabling [paranoid mode](when/blob/master/docs/api.md#paranoid-mode) that provides a significant performance gain in v8 (e.g. Node and Chrome). See this [v8 performance problem with Object.freeze](http://stackoverflow.com/questions/8435080/any-performance-benefit-to-locking-down-javascript-objects) for more info.\n* **Important:** `deferred` and `deferred.resolver` no longer throw when resolved/rejected multiple times.  They will return silently as if the they had succeeded.  This prevents parties to whom *only* the `resolver` has been given from using `try/catch` to determine the state of the associated promise.\n\t* For debugging, you can use the [when/debug](https://github.com/cujojs/when/wiki/when-debug) module, which will still throw when a deferred is resolved/rejected multiple times.\n\n[Full Changelog](https://github.com/cujojs/when/wiki/Changelog)\n\n# Docs & Examples\n\n[API docs](when/blob/master/docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```javascript\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Script Tag\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. `<script src=\"path/to/when/when.js\"></script>`\n1. `when` will be available as `window.when`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes @domenic's [Promises/A Test Suite](https://github.com/domenic/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by @[unscriptable](https://github.com/unscriptable)'s [tiny promises](https://github.com/unscriptable/promises), the async innards of [wire.js](https://github.com/cujojs/wire), and some gists [here](https://gist.github.com/870729), [here](https://gist.github.com/892345), [here](https://gist.github.com/894356), and [here](https://gist.github.com/894360)\n\nSome of the code has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@1.6.0","dist":{"shasum":"0fff9dae92cbb0a2ad63c8638488ba98f8d1b657","tarball":"http://registry.npmjs.org/when/-/when-1.6.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"1.6.1":{"name":"when","version":"1.6.1","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.6","promise-tests":"*"},"main":"when","directories":{"test":"test"},"scripts":{"test":"buster test -e node && promise-tests promises-a test/when-adapter.js","test-all":"buster test -e node && promise-tests all test/when-adapter.js","start":"buster server","test-browser":"buster test -e browser"},"readme":"# when.js [![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when)\n\nWhen.js is cujojs's lightweight [CommonJS](http://wiki.commonjs.org/wiki/Promises) [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and `when()` implementation, derived from the async core of [wire.js](https://github.com/cujojs/wire), cujojs's IOC Container.  It also provides several other useful Promise-related concepts, such as joining multiple promises, mapping and reducing collections of promises, timed promises, and has a robust [unit test suite](#running-the-unit-tests).\n\nIt passes the [Promises/A Test Suite](https://github.com/domenic/promise-tests), is [frighteningly fast](https://github.com/cujojs/promise-perf-tests#test-results), and is **under 1.3k** when compiled with Google Closure (w/advanced optimizations) and gzipped, and has no dependencies.\n\n# What's New?\n\n### 1.6.1\n\n* Fix for accidental coercion of non-promises. See [#62](https://github.com/cujojs/when/issues/60).\n\n### 1.6.0\n\n* New [when.join](when/blob/master/docs/api.md#whenjoin) - Joins 2 or more promises together into a single promise.\n* [when.some](when/blob/master/docs/api.md#whensome) and [when.any](when/blob/master/docs/api.md#whenany) now act like competitive races, and have generally more useful behavior.  [Read the discussion in #60](https://github.com/cujojs/when/issues/60).\n* *Experimental* progress event propagation.  Progress events will propagate through promise chains. [Read the details here](when/blob/master/docs/api.md#progress-events).\n* *Temporarily* removed calls to `Object.freeze`. Promises are no longer frozen due to a horrendous v8 performance penalty.  [Read discussion here](https://groups.google.com/d/topic/cujojs/w_olYqorbsY/discussion).\n\t* **IMPORTANT:** Continue to treat promises as if they are frozen, since `freeze()` will be reintroduced once v8 performance improves. \n* [when/debug](https://github.com/cujojs/when/wiki/when-debug) now allows setting global a debugging callback for rejected promises.\n\n### 1.5.2\n\n* Integrate @domenic's [Promises/A Test Suite](https://github.com/domenic/promise-tests). Runs via `npm test`.\n* No functional change\n\n### 1.5.1\n\n* Performance optimization for [when.defer](when/blob/master/docs/api.md#whendefer), up to 1.5x in some cases.\n* [when/debug](https://github.com/cujojs/when/wiki/when-debug) can now log exceptions and rejections in deeper promise chains, in some cases, even when the promises involved aren't when.js promises.\n\n### 1.5.0\n\n* New task execution and concurrency management: [when/sequence](when/blob/master/docs/api.md#whensequence), [when/pipeline](when/blob/master/docs/api.md#whenpipeline), and [when/parallel](when/blob/master/docs/api.md#whenparallel).\n* Performance optimizations for [when.all](when/blob/master/docs/api.md#whenall) and [when.map](when/blob/master/docs/api.md#whenmap), up to 2x in some cases.\n* Options for disabling [paranoid mode](when/blob/master/docs/api.md#paranoid-mode) that provides a significant performance gain in v8 (e.g. Node and Chrome). See this [v8 performance problem with Object.freeze](http://stackoverflow.com/questions/8435080/any-performance-benefit-to-locking-down-javascript-objects) for more info.\n* **Important:** `deferred` and `deferred.resolver` no longer throw when resolved/rejected multiple times.  They will return silently as if the they had succeeded.  This prevents parties to whom *only* the `resolver` has been given from using `try/catch` to determine the state of the associated promise.\n\t* For debugging, you can use the [when/debug](https://github.com/cujojs/when/wiki/when-debug) module, which will still throw when a deferred is resolved/rejected multiple times.\n\n[Full Changelog](https://github.com/cujojs/when/wiki/Changelog)\n\n# Docs & Examples\n\n[API docs](when/blob/master/docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```javascript\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Script Tag\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. `<script src=\"path/to/when/when.js\"></script>`\n1. `when` will be available as `window.when`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes @domenic's [Promises/A Test Suite](https://github.com/domenic/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by @[unscriptable](https://github.com/unscriptable)'s [tiny promises](https://github.com/unscriptable/promises), the async innards of [wire.js](https://github.com/cujojs/wire), and some gists [here](https://gist.github.com/870729), [here](https://gist.github.com/892345), [here](https://gist.github.com/894356), and [here](https://gist.github.com/894360)\n\nSome of the code has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@1.6.1","dist":{"shasum":"1cd6d300547e982ce01bfadeb076e62e6c09cf23","tarball":"http://registry.npmjs.org/when/-/when-1.6.1.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"1.7.0":{"name":"when","version":"1.7.0","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.6","promise-tests":"*"},"main":"when","directories":{"test":"test"},"scripts":{"test":"buster test -e node && promise-tests promises-a test/when-adapter.js","test-all":"buster test -e node && promise-tests all test/when-adapter.js","start":"buster server","test-browser":"buster test -e browser"},"readme":"# when.js [![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when)\n\nWhen.js is cujojs's lightweight [CommonJS](http://wiki.commonjs.org/wiki/Promises) [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and `when()` implementation, derived from the async core of [wire.js](https://github.com/cujojs/wire), cujojs's IOC Container.  It also provides several other useful Promise-related concepts, such as joining multiple promises, mapping and reducing collections of promises, timed promises, and has a robust [unit test suite](#running-the-unit-tests).\n\nIt passes the [Promises/A Test Suite](https://github.com/domenic/promise-tests), is [frighteningly fast](https://github.com/cujojs/promise-perf-tests#test-results), and is **under 1.3k** when compiled with Google Closure (w/advanced optimizations) and gzipped, and has no dependencies.\n\n# What's New?\n\n### 1.7.0\n\n* **DEPRECATED:** `deferred.then` [is deprecated](when/blob/master/docs/api.md#deferred) and will be removed in an upcoming release.  Use `deferred.promise.then` instead.\n* [promise.yield](when/blob/master/docs/api.md#yield)(promiseOrValue) convenience API for substituting a new value into a promise chain.\n* [promise.spread](when/blob/master/docs/api.md#spread)(variadicFunction) convenience API for spreading an array onto a fulfill handler that accepts variadic arguments. [Mmmm, buttery](http://s.shld.net/is/image/Sears/033W048977110001_20100422100331516?hei=1600&wid=1600&op_sharpen=1&resMode=sharp&op_usm=0.9,0.5,0,0)\n* Doc improvements:\n\t* [when()](when/blob/master/docs/api.md#when) and [promise.then()](when/blob/master/docs/api.md#main-promise-api) have more info about callbacks and chaining behavior.\n\t* More info and clarifications about the roles of [Deferred](when/blob/master/docs/api.md#deferred) and [Resolver](when/blob/master/docs/api.md#resolver)\n\t* Several minor clarifications for various APIs\n* Internal improvements to assimilation and interoperability with other promise implementations.\n\n### 1.6.1\n\n* Fix for accidental coercion of non-promises. See [#62](https://github.com/cujojs/when/issues/60).\n\n### 1.6.0\n\n* New [when.join](when/blob/master/docs/api.md#whenjoin) - Joins 2 or more promises together into a single promise.\n* [when.some](when/blob/master/docs/api.md#whensome) and [when.any](when/blob/master/docs/api.md#whenany) now act like competitive races, and have generally more useful behavior.  [Read the discussion in #60](https://github.com/cujojs/when/issues/60).\n* *Experimental* progress event propagation.  Progress events will propagate through promise chains. [Read the details here](when/blob/master/docs/api.md#progress-events).\n* *Temporarily* removed calls to `Object.freeze`. Promises are no longer frozen due to a horrendous v8 performance penalty.  [Read discussion here](https://groups.google.com/d/topic/cujojs/w_olYqorbsY/discussion).\n\t* **IMPORTANT:** Continue to treat promises as if they are frozen, since `freeze()` will be reintroduced once v8 performance improves.\n* [when/debug](https://github.com/cujojs/when/wiki/when-debug) now allows setting global a debugging callback for rejected promises.\n\n[Full Changelog](https://github.com/cujojs/when/wiki/Changelog)\n\n# Docs & Examples\n\n[API docs](when/blob/master/docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```javascript\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Script Tag\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. `<script src=\"path/to/when/when.js\"></script>`\n1. `when` will be available as `window.when`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes @domenic's [Promises/A Test Suite](https://github.com/domenic/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by @[unscriptable](https://github.com/unscriptable)'s [tiny promises](https://github.com/unscriptable/promises), the async innards of [wire.js](https://github.com/cujojs/wire), and some gists [here](https://gist.github.com/870729), [here](https://gist.github.com/892345), [here](https://gist.github.com/894356), and [here](https://gist.github.com/894360)\n\nSome of the code has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","_id":"when@1.7.0","dist":{"shasum":"196e9ed740e6dbc88e5b15ad70de3eab11cd8cd6","tarball":"http://registry.npmjs.org/when/-/when-1.7.0.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"1.7.1":{"name":"when","version":"1.7.1","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.6","jshint":"","promise-tests":"*"},"main":"when","directories":{"test":"test"},"scripts":{"test":"jshint *.js && buster test -e node && promise-tests promises-a test/when-adapter.js","test-all":"jshint *.js && buster test -e node && promise-tests all test/when-adapter.js","start":"buster server","test-browser":"jshint *.js && buster test -e browser"},"readme":"# when.js [![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when)\n\nWhen.js is cujojs's lightweight [CommonJS](http://wiki.commonjs.org/wiki/Promises) [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and `when()` implementation, derived from the async core of [wire.js](https://github.com/cujojs/wire), cujojs's IOC Container.  It also provides several other useful Promise-related concepts, such as joining multiple promises, mapping and reducing collections of promises, timed promises, and has a robust [unit test suite](#running-the-unit-tests).\n\nIt passes the [Promises/A Test Suite](https://github.com/domenic/promise-tests), is [frighteningly fast](https://github.com/cujojs/promise-perf-tests#test-results), and is **under 1.3k** when compiled with Google Closure (w/advanced optimizations) and gzipped, and has no dependencies.\n\n# What's New?\n\n### 1.7.1\n\n* Removed leftover internal usages of `deferred.then`.\n* [when/debug](https://github.com/cujojs/when/wiki/when-debug) allows configuring the set of \"fatal\" error types that will be rethrown to the host env.\n\n### 1.7.0\n\n* **DEPRECATED:** `deferred.then` [is deprecated](when/blob/master/docs/api.md#deferred) and will be removed in an upcoming release.  Use `deferred.promise.then` instead.\n* [promise.yield](when/blob/master/docs/api.md#yield)(promiseOrValue) convenience API for substituting a new value into a promise chain.\n* [promise.spread](when/blob/master/docs/api.md#spread)(variadicFunction) convenience API for spreading an array onto a fulfill handler that accepts variadic arguments. [Mmmm, buttery](http://s.shld.net/is/image/Sears/033W048977110001_20100422100331516?hei=1600&wid=1600&op_sharpen=1&resMode=sharp&op_usm=0.9,0.5,0,0)\n* Doc improvements:\n\t* [when()](when/blob/master/docs/api.md#when) and [promise.then()](when/blob/master/docs/api.md#main-promise-api) have more info about callbacks and chaining behavior.\n\t* More info and clarifications about the roles of [Deferred](when/blob/master/docs/api.md#deferred) and [Resolver](when/blob/master/docs/api.md#resolver)\n\t* Several minor clarifications for various APIs\n* Internal improvements to assimilation and interoperability with other promise implementations.\n\n### 1.6.1\n\n* Fix for accidental coercion of non-promises. See [#62](https://github.com/cujojs/when/issues/60).\n\n### 1.6.0\n\n* New [when.join](when/blob/master/docs/api.md#whenjoin) - Joins 2 or more promises together into a single promise.\n* [when.some](when/blob/master/docs/api.md#whensome) and [when.any](when/blob/master/docs/api.md#whenany) now act like competitive races, and have generally more useful behavior.  [Read the discussion in #60](https://github.com/cujojs/when/issues/60).\n* *Experimental* progress event propagation.  Progress events will propagate through promise chains. [Read the details here](when/blob/master/docs/api.md#progress-events).\n* *Temporarily* removed calls to `Object.freeze`. Promises are no longer frozen due to a horrendous v8 performance penalty.  [Read discussion here](https://groups.google.com/d/topic/cujojs/w_olYqorbsY/discussion).\n\t* **IMPORTANT:** Continue to treat promises as if they are frozen, since `freeze()` will be reintroduced once v8 performance improves.\n* [when/debug](https://github.com/cujojs/when/wiki/when-debug) now allows setting global a debugging callback for rejected promises.\n\n[Full Changelog](https://github.com/cujojs/when/wiki/Changelog)\n\n# Docs & Examples\n\n[API docs](when/blob/master/docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```javascript\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Script Tag\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. `<script src=\"path/to/when/when.js\"></script>`\n1. `when` will be available as `window.when`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes @domenic's [Promises/A Test Suite](https://github.com/domenic/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by @[unscriptable](https://github.com/unscriptable)'s [tiny promises](https://github.com/unscriptable/promises), the async innards of [wire.js](https://github.com/cujojs/wire), and some gists [here](https://gist.github.com/870729), [here](https://gist.github.com/892345), [here](https://gist.github.com/894356), and [here](https://gist.github.com/894360)\n\nSome of the code has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","_id":"when@1.7.1","dist":{"shasum":"9a637df6e8a94531da8a6c12a7189d4a1a0c8eca","tarball":"http://registry.npmjs.org/when/-/when-1.7.1.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"1.8.0":{"name":"when","version":"1.8.0","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.6","jshint":"","promise-tests":"*"},"main":"when","directories":{"test":"test"},"scripts":{"test":"jshint *.js && buster test -e node && promise-tests promises-a test/when-adapter.js","test-all":"jshint *.js && buster test -e node && promise-tests all test/when-adapter.js","start":"buster server","test-browser":"jshint *.js && buster test -e browser"},"readme":"# when.js [![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when)\n\nWhen.js is cujojs's lightweight [CommonJS](http://wiki.commonjs.org/wiki/Promises) [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and `when()` implementation, derived from the async core of [wire.js](https://github.com/cujojs/wire), cujojs's IOC Container.  It also provides several other useful Promise-related concepts, such as joining multiple promises, mapping and reducing collections of promises, timed promises, and has a robust [unit test suite](#running-the-unit-tests).\n\nIt passes the [Promises/A Test Suite](https://github.com/domenic/promise-tests), is [frighteningly fast](https://github.com/cujojs/promise-perf-tests#test-results), and is **around 1.3k** when compiled with Google Closure (w/advanced optimizations) and gzipped, and has no external dependencies.\n\n# What's New?\n\n### 1.8.0\n\n* New [when/function](docs/api.md#synchronous-functions), [when/node/function](docs/api.md#node-style-asynchronous-functions), and [when/callbacks](docs/api.md#asynchronous-functions) with functional programming goodness, and adapters for turning callback-based APIs into promise-based APIs. Kudos [@riccieri](https://github.com/riccieri)!\n* New [when/unfold](api.md#whenunfold), and [when/unfold/list](api.md#whenunfoldlist) promise-aware anamorphic unfolds that can be used to generate and/or process unbounded lists.\n* New [when/poll](api.md#whenpoll) promise-based periodic polling and task execution. Kudos [@scothis](https://github.com/scothis)!\n\n### 1.7.1\n\n* Removed leftover internal usages of `deferred.then`.\n* [when/debug](https://github.com/cujojs/when/wiki/when-debug) allows configuring the set of \"fatal\" error types that will be rethrown to the host env.\n\n### 1.7.0\n\n* **DEPRECATED:** `deferred.then` [is deprecated](docs/api.md#deferred) and will be removed in an upcoming release.  Use `deferred.promise.then` instead.\n* [promise.yield](docs/api.md#yield)(promiseOrValue) convenience API for substituting a new value into a promise chain.\n* [promise.spread](docs/api.md#spread)(variadicFunction) convenience API for spreading an array onto a fulfill handler that accepts variadic arguments. [Mmmm, buttery](http://s.shld.net/is/image/Sears/033W048977110001_20100422100331516?hei=1600&wid=1600&op_sharpen=1&resMode=sharp&op_usm=0.9,0.5,0,0)\n* Doc improvements:\n\t* [when()](docs/api.md#when) and [promise.then()](docs/api.md#main-promise-api) have more info about callbacks and chaining behavior.\n\t* More info and clarifications about the roles of [Deferred](docs/api.md#deferred) and [Resolver](docs/api.md#resolver)\n\t* Several minor clarifications for various APIs\n* Internal improvements to assimilation and interoperability with other promise implementations.\n\n[Full Changelog](CHANGES.md)\n\n# Docs & Examples\n\n[API docs](docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```javascript\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Script Tag\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. `<script src=\"path/to/when/when.js\"></script>`\n1. `when` will be available as `window.when`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes @domenic's [Promises/A Test Suite](https://github.com/domenic/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by @[unscriptable](https://github.com/unscriptable)'s [tiny promises](https://github.com/unscriptable/promises), the async innards of [wire.js](https://github.com/cujojs/wire), and some gists [here](https://gist.github.com/870729), [here](https://gist.github.com/892345), [here](https://gist.github.com/894356), and [here](https://gist.github.com/894360)\n\nSome of the code has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@1.8.0","dist":{"shasum":"34b7bfb8fba56284cbcea36e5f2517d4396e1981","tarball":"http://registry.npmjs.org/when/-/when-1.8.0.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"1.8.1":{"name":"when","version":"1.8.1","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"buster":"~0.6","jshint":"~1.0","promise-tests":"*"},"main":"when","directories":{"test":"test"},"scripts":{"test":"jshint *.js && buster test -e node && promise-tests promises-a test/when-adapter.js","test-all":"jshint *.js && buster test -e node && promise-tests all test/when-adapter.js","start":"buster server","test-browser":"jshint *.js && buster test -e browser"},"readme":"# when.js [![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when)\n\nWhen.js is cujojs's lightweight [CommonJS](http://wiki.commonjs.org/wiki/Promises) [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and `when()` implementation, derived from the async core of [wire.js](https://github.com/cujojs/wire), cujojs's IOC Container.  It also provides several other useful Promise-related concepts, such as joining multiple promises, mapping and reducing collections of promises, timed promises, and has a robust [unit test suite](#running-the-unit-tests).\n\nIt passes the [Promises/A Test Suite](https://github.com/domenic/promise-tests), is [frighteningly fast](https://github.com/cujojs/promise-perf-tests#test-results), and is **around 1.4k** when compiled with Google Closure (w/advanced optimizations) and gzipped, and has no external dependencies.\n\n# What's New?\n\n### 1.8.1\n\n* Last 1.x.x release before 2.0.0 barring critical fixes.\n\t* To prepare for 2.0.0, [test your code against the dev-200 branch](https://github.com/cujojs/when/tree/dev-200). It is fully API compatible, but has fully asynchronous resolutions.\n* Performance improvements for [when/function](docs/api.md#synchronous-functions).\n* [Documentation](docs/api.md) updates and fixes. Thanks, [@unscriptable](https://github.com/unscriptable)!\n* **DEPRECATED:** `deferred.progress` and `deferred.resolver.progress`. Use [`deferred.notify`](docs/api.md#progress-events) and [`deferred.resolver.notify`](docs/api.md#progress-events) instead.\n* **DEPRECATED:** [`when.chain`](docs/api.md#whenchain). Use [`resolver.resolve(promise)`](docs/api.md#resolver) or `resolver.resolve(promise.yield)` ([see `promise.yield`](docs/api.md#yield)) instead.\n* **DEPRECATED:** `when/timed` module.  Use [`when/delay`](docs/api.md#whendelay) and [`when/timeout`](docs/api.md#whentimeout) modules instead.\n\n### 1.8.0\n\n* New [when/function](docs/api.md#synchronous-functions), [when/node/function](docs/api.md#node-style-asynchronous-functions), and [when/callbacks](docs/api.md#asynchronous-functions) with functional programming goodness, and adapters for turning callback-based APIs into promise-based APIs. Kudos [@riccieri](https://github.com/riccieri)!\n* New [when/unfold](docs/api.md#whenunfold), and [when/unfold/list](docs/api.md#whenunfoldlist) promise-aware anamorphic unfolds that can be used to generate and/or process unbounded lists.\n* New [when/poll](docs/api.md#whenpoll) promise-based periodic polling and task execution. Kudos [@scothis](https://github.com/scothis)!\n\n### 1.7.1\n\n* Removed leftover internal usages of `deferred.then`.\n* [when/debug](https://github.com/cujojs/when/wiki/when-debug) allows configuring the set of \"fatal\" error types that will be rethrown to the host env.\n\n### 1.7.0\n\n* **DEPRECATED:** `deferred.then` [is deprecated](docs/api.md#deferred) and will be removed in an upcoming release.  Use `deferred.promise.then` instead.\n* [promise.yield](docs/api.md#yield)(promiseOrValue) convenience API for substituting a new value into a promise chain.\n* [promise.spread](docs/api.md#spread)(variadicFunction) convenience API for spreading an array onto a fulfill handler that accepts variadic arguments. [Mmmm, buttery](http://s.shld.net/is/image/Sears/033W048977110001_20100422100331516?hei=1600&wid=1600&op_sharpen=1&resMode=sharp&op_usm=0.9,0.5,0,0)\n* Doc improvements:\n\t* [when()](docs/api.md#when) and [promise.then()](docs/api.md#main-promise-api) have more info about callbacks and chaining behavior.\n\t* More info and clarifications about the roles of [Deferred](docs/api.md#deferred) and [Resolver](docs/api.md#resolver)\n\t* Several minor clarifications for various APIs\n* Internal improvements to assimilation and interoperability with other promise implementations.\n\n[Full Changelog](CHANGES.md)\n\n# Docs & Examples\n\n[API docs](docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```javascript\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Script Tag\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. `<script src=\"path/to/when/when.js\"></script>`\n1. `when` will be available as `window.when`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes @domenic's [Promises/A Test Suite](https://github.com/domenic/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by @[unscriptable](https://github.com/unscriptable)'s [tiny promises](https://github.com/unscriptable/promises), the async innards of [wire.js](https://github.com/cujojs/wire), and some gists [here](https://gist.github.com/870729), [here](https://gist.github.com/892345), [here](https://gist.github.com/894356), and [here](https://gist.github.com/894360)\n\nSome of the code has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@1.8.1","dist":{"shasum":"ec76f6485ef561cb2bf3fa7fa45006b34dae4f83","tarball":"http://registry.npmjs.org/when/-/when-1.8.1.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"2.0.0":{"name":"when","version":"2.0.0","description":"A lightweight Promise and when() implementation, plus other async goodies.","keywords":["promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"curl":"https://github.com/cujojs/curl/tarball/0.7.3","test-support":"~0.1","promises-aplus-tests":"~1"},"main":"when","directories":{"test":"test"},"scripts":{"test":"jshint . && buster test -e node && promises-aplus-tests test/when-adapter.js","ci":"npm test && sauceme","start":"buster static -e browser"},"readme":"<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when) \n\n# when.js\n\nWhen.js is cujojs's lightweight [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation, derived from the async core of [wire.js](https://github.com/cujojs/wire), cujojs's IOC Container.  It features:\n\n* A rock solid, battle-tested Promise implementation\n* Resolving, mapping, and reducing arrays of promises\n* Executing tasks in parallel and sequence\n* Transforming Node-style and other callback-based APIs into promise-based APIs\n\nIt passes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests), is [very fast](https://github.com/cujojs/promise-perf-tests#test-results), is under 1.5k when compiled with Google Closure + gzip, and has no external dependencies.\n\n# What's New?\n\n### 2.0.0\n\n* Fully asynchronous resolutions.\n* [Promises/A+](http://promises-aplus.github.com/promises-spec) compliance.\n* New [`when/keys`](docs/api.md#object-keys) module with `all()` and `map()` for object keys/values.\n* New [`promise.ensure`](docs/api.md#ensure) as a better, and safer, replacement for `promise.always`.  [See discussion](https://github.com/cujojs/when/issues/103) as to why `promise.always` is mistake-prone.\n\t* **DEPRECATED:** `promise.always`\n* `lift()` is now the preferred name for what was `bind()` in [when/function](docs/api.md#synchronous-functions), [when/node/function](docs/api.md#node-style-asynchronous-functions), and [when/callbacks](docs/api.md#asynchronous-functions).\n\t* **DEPRECATED:** `bind()` in `when/function`, `when/node/function`, and `when/callbacks`.  Use `lift()` instead.\n\n[Full Changelog](CHANGES.md)\n\n# Docs & Examples\n\n[API docs](docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. Get it\n\t- `bower install when` or `yeoman install when`, *or*\n\t- `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```js\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n### Legacy environments\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Add a transient `define` shim, and a `<script>` element for when.js\n\n\t```html\n\t<script>\n\t\twindow.define = function(factory) {\n\t\t\ttry{ delete window.define; } catch(e){ window.define = void 0; } // IE\n\t\t\twindow.when = factory();\n\t\t};\n\t</script>\n\t<script src=\"path/to/when/when.js\"></script>\n\t```\n\n1. `when` will be available as `window.when`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A+ Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@2.0.0","dist":{"shasum":"f9de390582b8180286fb003277a649d172bf6af4","tarball":"http://registry.npmjs.org/when/-/when-2.0.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"2.0.1":{"name":"when","version":"2.0.1","description":"A lightweight Promises/A+ and when() implementation, plus other async goodies.","keywords":["Promises/A+","promises-aplus","promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"devDependencies":{"curl":"https://github.com/cujojs/curl/tarball/0.7.3","test-support":"~0.1","promises-aplus-tests":"~1"},"main":"when","directories":{"test":"test"},"scripts":{"test":"jshint . && buster test -e node && promises-aplus-tests test/when-adapter.js","ci":"npm test && sauceme","start":"buster static -e browser"},"readme":"<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when) \n\n# when.js\n\nWhen.js is cujojs's lightweight [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation that powers the async core of [wire.js](https://github.com/cujojs/wire), cujojs's IOC Container.  It features:\n\n* A rock solid, battle-tested Promise implementation\n* Resolving, mapping, and reducing arrays of promises\n* Executing tasks in parallel and sequence\n* Transforming Node-style and other callback-based APIs into promise-based APIs\n\nIt passes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests), is [very fast](https://github.com/cujojs/promise-perf-tests#test-results), is under 1.5k when compiled with Google Closure + gzip, and has no external dependencies.\n\n# What's New?\n\n### 2.0.1\n\n* Account for the fact that Mocha creates a global named `process`. Thanks [Narsul](https://github.com/cujojs/when/pull/136)\n\n### 2.0.0\n\n* Fully asynchronous resolutions.\n* [Promises/A+](http://promises-aplus.github.com/promises-spec) compliance.\n* New [`when/keys`](docs/api.md#object-keys) module with `all()` and `map()` for object keys/values.\n* New [`promise.ensure`](docs/api.md#ensure) as a better, and safer, replacement for `promise.always`.  [See discussion](https://github.com/cujojs/when/issues/103) as to why `promise.always` is mistake-prone.\n\t* **DEPRECATED:** `promise.always`\n* `lift()` is now the preferred name for what was `bind()` in [when/function](docs/api.md#synchronous-functions), [when/node/function](docs/api.md#node-style-asynchronous-functions), and [when/callbacks](docs/api.md#asynchronous-functions).\n\t* **DEPRECATED:** `bind()` in `when/function`, `when/node/function`, and `when/callbacks`.  Use `lift()` instead.\n\n[Full Changelog](CHANGES.md)\n\n# Docs & Examples\n\n[API docs](docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. Get it\n\t- `bower install when` or `yeoman install when`, *or*\n\t- `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```js\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n### Legacy environments\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Add a transient `define` shim, and a `<script>` element for when.js\n\n\t```html\n\t<script>\n\t\twindow.define = function(factory) {\n\t\t\ttry{ delete window.define; } catch(e){ window.define = void 0; } // IE\n\t\t\twindow.when = factory();\n\t\t};\n\t\twindow.define.amd = {};\n\t</script>\n\t<script src=\"path/to/when/when.js\"></script>\n\t```\n\n1. `when` will be available as `window.when`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A+ Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@2.0.1","dist":{"shasum":"8d872fe15e68424c91b4b724e848e0807dab6642","tarball":"http://registry.npmjs.org/when/-/when-2.0.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"2.1.0":{"name":"when","version":"2.1.0","description":"A lightweight Promises/A+ and when() implementation, plus other async goodies.","keywords":["Promises/A+","promises-aplus","promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"homepage":"http://cujojs.com","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"https://github.com/cujojs/when"}],"bugs":"https://github.com/cujojs/when/issues","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"contributors":[{"name":"Brian Cavalier","url":"http://hovercraftstudios.com"},{"name":"John Hann","url":"http://unscriptable.com"},{"name":"Scott Andrews"}],"devDependencies":{"curl":"https://github.com/cujojs/curl/tarball/0.7.3","test-support":"~0.2","promises-aplus-tests":"~1"},"main":"when","directories":{"test":"test"},"scripts":{"test":"jshint . && buster test -e node && promises-aplus-tests test/promises-aplus-adapter.js","ci":"npm test && sauceme","start":"buster static -e browser"},"readme":"<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when) \n\n# when.js\n\nWhen.js is cujoJS's lightweight [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation that powers the async core of [wire.js](https://github.com/cujojs/wire), cujoJS's IOC Container.  It features:\n\n* A rock solid, battle-tested Promise implementation\n* Resolving, settling, mapping, and reducing arrays of promises\n* Executing tasks in parallel and sequence\n* Transforming Node-style and other callback-based APIs into promise-based APIs\n\nIt passes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests), is [very fast](https://github.com/cujojs/promise-perf-tests#test-results), is under 1.5k when compiled with Google Closure + gzip, and has no external dependencies.\n\n# What's New?\n\n### 2.1.0\n\n* New [`when.settle`](docs/api.md#whensettle) that settles an array of promises\n* New [`when/guard`](docs/api.md#whenguard) generalized concurrency guarding and limiting\n* New [`promise.inspect`](docs/api.md#inspect) for synchronously getting a snapshot of a promise's state at a particular instant.\n* Significant performance improvements when resolving promises with non-primitives (e.g. with Arrays, Objects, etc.)\n* Experimental [vert.x](http://vertx.io) support\n* **DEPRECATED**: `onFulfilled`, `onRejected`, `onProgress` handler arguments to `when.all`, `when.any`, `when.some`.  Use the returned promise's `then()` (or `otherwise()`, `ensure()`, etc) to register handlers instead.\n\t* For example, do this: `when.all(array).then(onFulfilled, onRejected)` instead of this: `when.all(array, onFulfilled, onRejected)`.  The functionality is equivalent.\n\n### 2.0.1\n\n* Account for the fact that Mocha creates a global named `process`. Thanks [Narsul](https://github.com/cujojs/when/pull/136)\n\n### 2.0.0\n\n* Fully asynchronous resolutions.\n* [Promises/A+](http://promises-aplus.github.com/promises-spec) compliance.\n* New [`when/keys`](docs/api.md#object-keys) module with `all()` and `map()` for object keys/values.\n* New [`promise.ensure`](docs/api.md#ensure) as a better, and safer, replacement for `promise.always`.  [See discussion](https://github.com/cujojs/when/issues/103) as to why `promise.always` is mistake-prone.\n\t* **DEPRECATED:** `promise.always`\n* `lift()` is now the preferred name for what was `bind()` in [when/function](docs/api.md#synchronous-functions), [when/node/function](docs/api.md#node-style-asynchronous-functions), and [when/callbacks](docs/api.md#asynchronous-functions).\n\t* **DEPRECATED:** `bind()` in `when/function`, `when/node/function`, and `when/callbacks`.  Use `lift()` instead.\n\n[Full Changelog](CHANGES.md)\n\n# Docs & Examples\n\n[API docs](docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. Get it\n\t- `bower install when` or `yeoman install when`, *or*\n\t- `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```js\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n### Legacy environments\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Add a transient `define` shim, and a `<script>` element for when.js\n\n\t```html\n\t<script>\n\t\twindow.define = function(factory) {\n\t\t\ttry{ delete window.define; } catch(e){ window.define = void 0; } // IE\n\t\t\twindow.when = factory();\n\t\t};\n\t\twindow.define.amd = {};\n\t</script>\n\t<script src=\"path/to/when/when.js\"></script>\n\t```\n\n1. `when` will be available as `window.when`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A+ Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@2.1.0","dist":{"shasum":"4d9a882fa0b95e693410f1cc2f6b520d576d418c","tarball":"http://registry.npmjs.org/when/-/when-2.1.0.tgz"},"_from":".","_npmVersion":"1.2.17","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"2.1.1":{"name":"when","version":"2.1.1","description":"A lightweight Promises/A+ and when() implementation, plus other async goodies.","keywords":["Promises/A+","promises-aplus","promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"homepage":"http://cujojs.com","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repository":{"type":"git","url":"https://github.com/cujojs/when"},"bugs":{"url":"https://github.com/cujojs/when/issues"},"maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"contributors":[{"name":"Brian Cavalier","url":"http://hovercraftstudios.com"},{"name":"John Hann","url":"http://unscriptable.com"},{"name":"Scott Andrews"}],"devDependencies":{"curl":"https://github.com/cujojs/curl/tarball/0.7.3","test-support":"~0.2","promises-aplus-tests":"~1"},"main":"when","directories":{"test":"test"},"scripts":{"test":"jshint . && buster test -e node && promises-aplus-tests test/promises-aplus-adapter.js","ci":"npm test && sauceme","start":"buster static -e browser"},"readme":"<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when) \n\n# when.js\n\nWhen.js is cujoJS's lightweight [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation that powers the async core of [wire.js](https://github.com/cujojs/wire), cujoJS's IOC Container.  It features:\n\n* A rock solid, battle-tested Promise implementation\n* Resolving, settling, mapping, and reducing arrays of promises\n* Executing tasks in parallel and sequence\n* Transforming Node-style and other callback-based APIs into promise-based APIs\n\nIt passes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests), is [very fast](https://github.com/cujojs/promise-perf-tests#test-results), is under 1.5k when compiled with Google Closure + gzip, and has no external dependencies.\n\n# What's New?\n\n### 2.1.1\n\n* Quote internal usages of `promise.yield` to workaround .NET minifier tools that don't yet understand ES5 identifier-as-property rules.  See [#157](https://github.com/cujojs/when/issues/157)\n\n### 2.1.0\n\n* New [`when.settle`](docs/api.md#whensettle) that settles an array of promises\n* New [`when/guard`](docs/api.md#whenguard) generalized concurrency guarding and limiting\n* New [`promise.inspect`](docs/api.md#inspect) for synchronously getting a snapshot of a promise's state at a particular instant.\n* Significant performance improvements when resolving promises with non-primitives (e.g. with Arrays, Objects, etc.)\n* Experimental [vert.x](http://vertx.io) support\n* **DEPRECATED**: `onFulfilled`, `onRejected`, `onProgress` handler arguments to `when.all`, `when.any`, `when.some`.  Use the returned promise's `then()` (or `otherwise()`, `ensure()`, etc) to register handlers instead.\n\t* For example, do this: `when.all(array).then(onFulfilled, onRejected)` instead of this: `when.all(array, onFulfilled, onRejected)`.  The functionality is equivalent.\n\n### 2.0.1\n\n* Account for the fact that Mocha creates a global named `process`. Thanks [Narsul](https://github.com/cujojs/when/pull/136)\n\n### 2.0.0\n\n* Fully asynchronous resolutions.\n* [Promises/A+](http://promises-aplus.github.com/promises-spec) compliance.\n* New [`when/keys`](docs/api.md#object-keys) module with `all()` and `map()` for object keys/values.\n* New [`promise.ensure`](docs/api.md#ensure) as a better, and safer, replacement for `promise.always`.  [See discussion](https://github.com/cujojs/when/issues/103) as to why `promise.always` is mistake-prone.\n\t* **DEPRECATED:** `promise.always`\n* `lift()` is now the preferred name for what was `bind()` in [when/function](docs/api.md#synchronous-functions), [when/node/function](docs/api.md#node-style-asynchronous-functions), and [when/callbacks](docs/api.md#asynchronous-functions).\n\t* **DEPRECATED:** `bind()` in `when/function`, `when/node/function`, and `when/callbacks`.  Use `lift()` instead.\n\n[Full Changelog](CHANGES.md)\n\n# Docs & Examples\n\n[API docs](docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. Get it\n\t- `bower install when` or `yeoman install when`, *or*\n\t- `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```js\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n### Legacy environments\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Add a transient `define` shim, and a `<script>` element for when.js\n\n\t```html\n\t<script>\n\t\twindow.define = function(factory) {\n\t\t\ttry{ delete window.define; } catch(e){ window.define = void 0; } // IE\n\t\t\twindow.when = factory();\n\t\t};\n\t\twindow.define.amd = {};\n\t</script>\n\t<script src=\"path/to/when/when.js\"></script>\n\t```\n\n1. `when` will be available as `window.when`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A+ Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@2.1.1","dist":{"shasum":"f3742c29a5703a809287cf599397849ddead11bd","tarball":"http://registry.npmjs.org/when/-/when-2.1.1.tgz"},"_from":".","_npmVersion":"1.2.25","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"2.2.0":{"name":"when","version":"2.2.0","description":"A lightweight Promises/A+ and when() implementation, plus other async goodies.","keywords":["Promises/A+","promises-aplus","promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"homepage":"http://cujojs.com","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repository":{"type":"git","url":"https://github.com/cujojs/when"},"bugs":{"url":"https://github.com/cujojs/when/issues"},"maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"contributors":[{"name":"Brian Cavalier","url":"http://hovercraftstudios.com"},{"name":"John Hann","url":"http://unscriptable.com"},{"name":"Scott Andrews"}],"devDependencies":{"curl":"https://github.com/cujojs/curl/tarball/0.7.3","test-support":"~0.3","promises-aplus-tests":"~1","benchmark":"~1","microtime":"~0"},"main":"when","directories":{"test":"test"},"scripts":{"test":"jshint . && buster test -e node && promises-aplus-tests test/promises-aplus-adapter.js","ci":"npm test && sauceme","tunnel":"sauceme -m","start":"buster static -e browser","benchmark":"node benchmark/promise && node benchmark/map"},"readme":"<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when) \n\n# when.js\n\nWhen.js is cujoJS's lightweight [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation that powers the async core of [wire.js](https://github.com/cujojs/wire), cujoJS's IOC Container.  It features:\n\n* A rock solid, battle-tested Promise implementation\n* Resolving, settling, mapping, and reducing arrays of promises\n* Executing tasks in parallel and sequence\n* Transforming Node-style and other callback-based APIs into promise-based APIs\n\nIt passes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests), is [very fast](https://github.com/cujojs/promise-perf-tests#test-results), is under 1.5k when compiled with Google Closure + gzip, and has no external dependencies.\n\n# What's New?\n\n### 2.2.0\n\n* New experimental [promise monitoring and debugging](docs.md#debugging-promises) via `when/monitor/console`.\n* New [`when.promise(resolver)`](docs/api.md#whenpromise) promise creation API. A lighter alternative to the heavier `when.defer()`\n* New `bindCallback` and `liftCallback` in `when/node/function` for more integration options with node-style callbacks.\n\n### 2.1.1\n\n* Quote internal usages of `promise.yield` to workaround .NET minifier tools that don't yet understand ES5 identifier-as-property rules.  See [#157](https://github.com/cujojs/when/issues/157)\n\n### 2.1.0\n\n* New [`when.settle`](docs/api.md#whensettle) that settles an array of promises\n* New [`when/guard`](docs/api.md#whenguard) generalized concurrency guarding and limiting\n* New [`promise.inspect`](docs/api.md#inspect) for synchronously getting a snapshot of a promise's state at a particular instant.\n* Significant performance improvements when resolving promises with non-primitives (e.g. with Arrays, Objects, etc.)\n* Experimental [vert.x](http://vertx.io) support\n* **DEPRECATED**: `onFulfilled`, `onRejected`, `onProgress` handler arguments to `when.all`, `when.any`, `when.some`.  Use the returned promise's `then()` (or `otherwise()`, `ensure()`, etc) to register handlers instead.\n\t* For example, do this: `when.all(array).then(onFulfilled, onRejected)` instead of this: `when.all(array, onFulfilled, onRejected)`.  The functionality is equivalent.\n\n### 2.0.1\n\n* Account for the fact that Mocha creates a global named `process`. Thanks [Narsul](https://github.com/cujojs/when/pull/136)\n\n### 2.0.0\n\n* Fully asynchronous resolutions.\n* [Promises/A+](http://promises-aplus.github.com/promises-spec) compliance.\n* New [`when/keys`](docs/api.md#object-keys) module with `all()` and `map()` for object keys/values.\n* New [`promise.ensure`](docs/api.md#ensure) as a better, and safer, replacement for `promise.always`.  [See discussion](https://github.com/cujojs/when/issues/103) as to why `promise.always` is mistake-prone.\n\t* **DEPRECATED:** `promise.always`\n* `lift()` is now the preferred name for what was `bind()` in [when/function](docs/api.md#synchronous-functions), [when/node/function](docs/api.md#node-style-asynchronous-functions), and [when/callbacks](docs/api.md#asynchronous-functions).\n\t* **DEPRECATED:** `bind()` in `when/function`, `when/node/function`, and `when/callbacks`.  Use `lift()` instead.\n\n[Full Changelog](CHANGES.md)\n\n# Docs & Examples\n\n[API docs](docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. Get it\n\t- `bower install when` or `yeoman install when`, *or*\n\t- `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```js\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n### Legacy environments\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Add a transient `define` shim, and a `<script>` element for when.js\n\n\t```html\n\t<script>\n\t\twindow.define = function(factory) {\n\t\t\ttry{ delete window.define; } catch(e){ window.define = void 0; } // IE\n\t\t\twindow.when = factory();\n\t\t};\n\t\twindow.define.amd = {};\n\t</script>\n\t<script src=\"path/to/when/when.js\"></script>\n\t```\n\n1. `when` will be available as `window.when`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A+ Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@2.2.0","dist":{"shasum":"99fd3f673929aa267714c3cb2178bc6f7b3371fb","tarball":"http://registry.npmjs.org/when/-/when-2.2.0.tgz"},"_from":".","_npmVersion":"1.2.25","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"2.2.1":{"name":"when","version":"2.2.1","description":"A lightweight Promises/A+ and when() implementation, plus other async goodies.","keywords":["Promises/A+","promises-aplus","promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"homepage":"http://cujojs.com","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repository":{"type":"git","url":"https://github.com/cujojs/when"},"bugs":{"url":"https://github.com/cujojs/when/issues"},"maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"contributors":[{"name":"Brian Cavalier","url":"http://hovercraftstudios.com"},{"name":"John Hann","url":"http://unscriptable.com"},{"name":"Scott Andrews"}],"devDependencies":{"curl":"https://github.com/cujojs/curl/tarball/0.7.3","test-support":"~0.3","promises-aplus-tests":"~1","benchmark":"~1","microtime":"~0"},"main":"when","directories":{"test":"test"},"scripts":{"test":"jshint . && buster test -e node && promises-aplus-tests test/promises-aplus-adapter.js","ci":"npm test","tunnel":"sauceme -m","start":"buster static -e browser","benchmark":"node benchmark/promise && node benchmark/map"},"readme":"<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when) \n\n# when.js\n\nWhen.js is cujoJS's lightweight [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation that powers the async core of [wire.js](https://github.com/cujojs/wire), cujoJS's IOC Container.  It features:\n\n* A rock solid, battle-tested Promise implementation\n* Resolving, settling, mapping, and reducing arrays of promises\n* Executing tasks in parallel and sequence\n* Transforming Node-style and other callback-based APIs into promise-based APIs\n\nIt passes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests), is [very fast](https://github.com/cujojs/promise-perf-tests#test-results), is under 1.5k when compiled with Google Closure + gzip, and has no external dependencies.\n\n# What's New?\n\n### 2.2.1\n\n* Fix for `when.defer().reject()` bypassing the unhandled rejection monitor. (#166)\n* Fix for `when/function`, `when/callbacks`, and `when/node/function` not preserving `thisArg`. (#162)\n* Doc clarifications for [`promise.yield`](docs/api.md#yield). (#164)\n\n### 2.2.0\n\n* New experimental [promise monitoring and debugging](docs/api.md#debugging-promises) via `when/monitor/console`.\n* New [`when.promise(resolver)`](docs/api.md#whenpromise) promise creation API. A lighter alternative to the heavier `when.defer()`\n* New `bindCallback` and `liftCallback` in `when/node/function` for more integration options with node-style callbacks.\n\n### 2.1.1\n\n* Quote internal usages of `promise.yield` to workaround .NET minifier tools that don't yet understand ES5 identifier-as-property rules.  See [#157](https://github.com/cujojs/when/issues/157)\n\n### 2.1.0\n\n* New [`when.settle`](docs/api.md#whensettle) that settles an array of promises\n* New [`when/guard`](docs/api.md#whenguard) generalized concurrency guarding and limiting\n* New [`promise.inspect`](docs/api.md#inspect) for synchronously getting a snapshot of a promise's state at a particular instant.\n* Significant performance improvements when resolving promises with non-primitives (e.g. with Arrays, Objects, etc.)\n* Experimental [vert.x](http://vertx.io) support\n* **DEPRECATED**: `onFulfilled`, `onRejected`, `onProgress` handler arguments to `when.all`, `when.any`, `when.some`.  Use the returned promise's `then()` (or `otherwise()`, `ensure()`, etc) to register handlers instead.\n\t* For example, do this: `when.all(array).then(onFulfilled, onRejected)` instead of this: `when.all(array, onFulfilled, onRejected)`.  The functionality is equivalent.\n\n### 2.0.1\n\n* Account for the fact that Mocha creates a global named `process`. Thanks [Narsul](https://github.com/cujojs/when/pull/136)\n\n### 2.0.0\n\n* Fully asynchronous resolutions.\n* [Promises/A+](http://promises-aplus.github.com/promises-spec) compliance.\n* New [`when/keys`](docs/api.md#object-keys) module with `all()` and `map()` for object keys/values.\n* New [`promise.ensure`](docs/api.md#ensure) as a better, and safer, replacement for `promise.always`.  [See discussion](https://github.com/cujojs/when/issues/103) as to why `promise.always` is mistake-prone.\n\t* **DEPRECATED:** `promise.always`\n* `lift()` is now the preferred name for what was `bind()` in [when/function](docs/api.md#synchronous-functions), [when/node/function](docs/api.md#node-style-asynchronous-functions), and [when/callbacks](docs/api.md#asynchronous-functions).\n\t* **DEPRECATED:** `bind()` in `when/function`, `when/node/function`, and `when/callbacks`.  Use `lift()` instead.\n\n[Full Changelog](CHANGES.md)\n\n# Docs & Examples\n\n[API docs](docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. Get it\n\t- `bower install when` or `yeoman install when`, *or*\n\t- `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```js\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n### Legacy environments\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Add a transient `define` shim, and a `<script>` element for when.js\n\n\t```html\n\t<script>\n\t\twindow.define = function(factory) {\n\t\t\ttry{ delete window.define; } catch(e){ window.define = void 0; } // IE\n\t\t\twindow.when = factory();\n\t\t};\n\t\twindow.define.amd = {};\n\t</script>\n\t<script src=\"path/to/when/when.js\"></script>\n\t```\n\n1. `when` will be available as `window.when`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A+ Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@2.2.1","dist":{"shasum":"b1def994017350b8087f6e9a7596ab2833bdc712","tarball":"http://registry.npmjs.org/when/-/when-2.2.1.tgz"},"_from":".","_npmVersion":"1.2.25","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"2.3.0":{"name":"when","version":"2.3.0","description":"A lightweight Promises/A+ and when() implementation, plus other async goodies.","keywords":["Promises/A+","promises-aplus","promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"homepage":"http://cujojs.com","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repository":{"type":"git","url":"https://github.com/cujojs/when"},"bugs":{"url":"https://github.com/cujojs/when/issues"},"maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"contributors":[{"name":"Brian Cavalier","url":"http://hovercraftstudios.com"},{"name":"John Hann","url":"http://unscriptable.com"},{"name":"Scott Andrews"}],"devDependencies":{"curl":"https://github.com/cujojs/curl/tarball/0.7.3","test-support":"~0.3","promises-aplus-tests":"~1","benchmark":"~1","microtime":"~0"},"main":"when","directories":{"test":"test"},"scripts":{"test":"jshint . && buster test -e node -r specification && promises-aplus-tests test/promises-aplus-adapter.js","ci":"npm test && sauceme","tunnel":"sauceme -m","start":"buster static -e browser","benchmark":"node benchmark/promise && node benchmark/map"},"readme":"<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when) \n\n# when.js\n\nWhen.js is cujoJS's lightweight [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation that powers the async core of [wire.js](https://github.com/cujojs/wire), cujoJS's IOC Container.  It features:\n\n* A rock solid, battle-tested Promise implementation\n* Resolving, settling, mapping, and reducing arrays of promises\n* Executing tasks in parallel and sequence\n* Transforming Node-style and other callback-based APIs into promise-based APIs\n\nIt passes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests), is [very fast](https://github.com/cujojs/promise-perf-tests#test-results) and compact, and has no external dependencies.\n\n# What's New?\n\n### 2.3.0\n\n* New [`promise.tap`](docs/api.md#tap) for adding side effects to a promise chain.\n* New `MessageChannel` scheduler reduces \"time-to-first\" handler, in environments that support it.\n* Performance optimizations for promise resolution.\n* Internal architecture improvements to pave the way for when.js 3.0.0.\n\n### 2.2.1\n\n* Fix for `when.defer().reject()` bypassing the unhandled rejection monitor. (#166)\n* Fix for `when/function`, `when/callbacks`, and `when/node/function` not preserving `thisArg`. (#162)\n* Doc clarifications for [`promise.yield`](docs/api.md#yield). (#164)\n\n### 2.2.0\n\n* New experimental [promise monitoring and debugging](docs/api.md#debugging-promises) via `when/monitor/console`.\n* New [`when.promise(resolver)`](docs/api.md#whenpromise) promise creation API. A lighter alternative to the heavier `when.defer()`\n* New `bindCallback` and `liftCallback` in `when/node/function` for more integration options with node-style callbacks.\n\n### 2.1.1\n\n* Quote internal usages of `promise.yield` to workaround .NET minifier tools that don't yet understand ES5 identifier-as-property rules.  See [#157](https://github.com/cujojs/when/issues/157)\n\n### 2.1.0\n\n* New [`when.settle`](docs/api.md#whensettle) that settles an array of promises\n* New [`when/guard`](docs/api.md#whenguard) generalized concurrency guarding and limiting\n* New [`promise.inspect`](docs/api.md#inspect) for synchronously getting a snapshot of a promise's state at a particular instant.\n* Significant performance improvements when resolving promises with non-primitives (e.g. with Arrays, Objects, etc.)\n* Experimental [vert.x](http://vertx.io) support\n* **DEPRECATED**: `onFulfilled`, `onRejected`, `onProgress` handler arguments to `when.all`, `when.any`, `when.some`.  Use the returned promise's `then()` (or `otherwise()`, `ensure()`, etc) to register handlers instead.\n\t* For example, do this: `when.all(array).then(onFulfilled, onRejected)` instead of this: `when.all(array, onFulfilled, onRejected)`.  The functionality is equivalent.\n\n### 2.0.1\n\n* Account for the fact that Mocha creates a global named `process`. Thanks [Narsul](https://github.com/cujojs/when/pull/136)\n\n### 2.0.0\n\n* Fully asynchronous resolutions.\n* [Promises/A+](http://promises-aplus.github.com/promises-spec) compliance.\n* New [`when/keys`](docs/api.md#object-keys) module with `all()` and `map()` for object keys/values.\n* New [`promise.ensure`](docs/api.md#ensure) as a better, and safer, replacement for `promise.always`.  [See discussion](https://github.com/cujojs/when/issues/103) as to why `promise.always` is mistake-prone.\n\t* **DEPRECATED:** `promise.always`\n* `lift()` is now the preferred name for what was `bind()` in [when/function](docs/api.md#synchronous-functions), [when/node/function](docs/api.md#node-style-asynchronous-functions), and [when/callbacks](docs/api.md#asynchronous-functions).\n\t* **DEPRECATED:** `bind()` in `when/function`, `when/node/function`, and `when/callbacks`.  Use `lift()` instead.\n\n[Full Changelog](CHANGES.md)\n\n# Docs & Examples\n\n[API docs](docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. Get it\n\t- `bower install when` or `yeoman install when`, *or*\n\t- `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```js\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n### Legacy environments\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Add a transient `define` shim, and a `<script>` element for when.js\n\n\t```html\n\t<script>\n\t\twindow.define = function(factory) {\n\t\t\ttry{ delete window.define; } catch(e){ window.define = void 0; } // IE\n\t\t\twindow.when = factory();\n\t\t};\n\t\twindow.define.amd = {};\n\t</script>\n\t<script src=\"path/to/when/when.js\"></script>\n\t```\n\n1. `when` will be available as `window.when`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A+ Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@2.3.0","dist":{"shasum":"9bab0fa3ecb918e5e8f2084f08fb7252d158e0f5","tarball":"http://registry.npmjs.org/when/-/when-2.3.0.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"2.4.0":{"name":"when","version":"2.4.0","description":"A lightweight Promises/A+ and when() implementation, plus other async goodies.","keywords":["Promises/A+","promises-aplus","promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"homepage":"http://cujojs.com","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repository":{"type":"git","url":"https://github.com/cujojs/when"},"bugs":{"url":"https://github.com/cujojs/when/issues"},"maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"contributors":[{"name":"Brian Cavalier","url":"http://hovercraftstudios.com"},{"name":"John Hann","url":"http://unscriptable.com"},{"name":"Scott Andrews"}],"devDependencies":{"curl":"https://github.com/cujojs/curl/tarball/0.7.3","test-support":"~0.3","promises-aplus-tests":"~1","benchmark":"~1","microtime":"~0"},"main":"when","directories":{"test":"test"},"scripts":{"test":"jshint . && buster test -e node -r specification && promises-aplus-tests test/promises-aplus-adapter.js","ci":"npm test && sauceme","tunnel":"sauceme -m","start":"buster static -e browser","benchmark":"node benchmark/promise && node benchmark/map"},"readme":"<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when) \n\n# when.js\n\nWhen.js is cujoJS's lightweight [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation that powers the async core of [wire.js](https://github.com/cujojs/wire), cujoJS's IOC Container.  It features:\n\n* A rock solid, battle-tested Promise implementation\n* Resolving, settling, mapping, and reducing arrays of promises\n* Executing tasks in parallel and sequence\n* Transforming Node-style and other callback-based APIs into promise-based APIs\n\nIt passes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests), is [very fast](https://github.com/cujojs/promise-perf-tests#test-results) and compact, and has no external dependencies.\n\n# What's New?\n\n### 2.4.0\n\n* Experimental support for [vert.x 2.x](http://vertx.io). Should now run in vert.x >= 1.1.0.\n* New `when.isPromiseLike` as the more accurately-named synonym for `when.isPromise`.\n* **DEPRECATED**: `when.isPromise`. It can only tell you that something is \"promise-like\" (aka \"thenable\") anyway. Use the new, more accurately-named `when.isPromiseLike` instead.\n* Fix for promise monitor reporting extra unhandled rejections for `when.all` and `when.map`.\n\n### 2.3.0\n\n* New [`promise.tap`](docs/api.md#tap) for adding side effects to a promise chain.\n* New `MessageChannel` scheduler reduces \"time-to-first\" handler, in environments that support it.\n* Performance optimizations for promise resolution.\n* Internal architecture improvements to pave the way for when.js 3.0.0.\n\n### 2.2.1\n\n* Fix for `when.defer().reject()` bypassing the unhandled rejection monitor. (#166)\n* Fix for `when/function`, `when/callbacks`, and `when/node/function` not preserving `thisArg`. (#162)\n* Doc clarifications for [`promise.yield`](docs/api.md#yield). (#164)\n\n### 2.2.0\n\n* New experimental [promise monitoring and debugging](docs/api.md#debugging-promises) via `when/monitor/console`.\n* New [`when.promise(resolver)`](docs/api.md#whenpromise) promise creation API. A lighter alternative to the heavier `when.defer()`\n* New `bindCallback` and `liftCallback` in `when/node/function` for more integration options with node-style callbacks.\n\n### 2.1.1\n\n* Quote internal usages of `promise.yield` to workaround .NET minifier tools that don't yet understand ES5 identifier-as-property rules.  See [#157](https://github.com/cujojs/when/issues/157)\n\n### 2.1.0\n\n* New [`when.settle`](docs/api.md#whensettle) that settles an array of promises\n* New [`when/guard`](docs/api.md#whenguard) generalized concurrency guarding and limiting\n* New [`promise.inspect`](docs/api.md#inspect) for synchronously getting a snapshot of a promise's state at a particular instant.\n* Significant performance improvements when resolving promises with non-primitives (e.g. with Arrays, Objects, etc.)\n* Experimental [vert.x](http://vertx.io) support\n* **DEPRECATED**: `onFulfilled`, `onRejected`, `onProgress` handler arguments to `when.all`, `when.any`, `when.some`.  Use the returned promise's `then()` (or `otherwise()`, `ensure()`, etc) to register handlers instead.\n\t* For example, do this: `when.all(array).then(onFulfilled, onRejected)` instead of this: `when.all(array, onFulfilled, onRejected)`.  The functionality is equivalent.\n\n### 2.0.1\n\n* Account for the fact that Mocha creates a global named `process`. Thanks [Narsul](https://github.com/cujojs/when/pull/136)\n\n### 2.0.0\n\n* Fully asynchronous resolutions.\n* [Promises/A+](http://promises-aplus.github.com/promises-spec) compliance.\n* New [`when/keys`](docs/api.md#object-keys) module with `all()` and `map()` for object keys/values.\n* New [`promise.ensure`](docs/api.md#ensure) as a better, and safer, replacement for `promise.always`.  [See discussion](https://github.com/cujojs/when/issues/103) as to why `promise.always` is mistake-prone.\n\t* **DEPRECATED:** `promise.always`\n* `lift()` is now the preferred name for what was `bind()` in [when/function](docs/api.md#synchronous-functions), [when/node/function](docs/api.md#node-style-asynchronous-functions), and [when/callbacks](docs/api.md#asynchronous-functions).\n\t* **DEPRECATED:** `bind()` in `when/function`, `when/node/function`, and `when/callbacks`.  Use `lift()` instead.\n\n[Full Changelog](CHANGES.md)\n\n# Docs & Examples\n\n[API docs](docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. Get it\n\t- `bower install when` or `yeoman install when`, *or*\n\t- `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```js\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n### Legacy environments\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Add a transient `define` shim, and a `<script>` element for when.js\n\n\t```html\n\t<script>\n\t\twindow.define = function(factory) {\n\t\t\ttry{ delete window.define; } catch(e){ window.define = void 0; } // IE\n\t\t\twindow.when = factory();\n\t\t};\n\t\twindow.define.amd = {};\n\t</script>\n\t<script src=\"path/to/when/when.js\"></script>\n\t```\n\n1. `when` will be available as `window.when`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A+ Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@2.4.0","dist":{"shasum":"4b762170a4dee67135bd62ac3d22cc4fc64cf831","tarball":"http://registry.npmjs.org/when/-/when-2.4.0.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"2.5.0":{"name":"when","version":"2.5.0","description":"A lightweight Promises/A+ and when() implementation, plus other async goodies.","keywords":["Promises/A+","promises-aplus","promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"homepage":"http://cujojs.com","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repository":{"type":"git","url":"https://github.com/cujojs/when"},"bugs":{"url":"https://github.com/cujojs/when/issues"},"maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"contributors":[{"name":"Brian Cavalier","url":"http://hovercraftstudios.com"},{"name":"John Hann","url":"http://unscriptable.com"},{"name":"Scott Andrews"}],"devDependencies":{"curl":"https://github.com/cujojs/curl/tarball/0.7.3","test-support":"~0.3","promises-aplus-tests":"~2","benchmark":"~1","microtime":"~0"},"main":"when","directories":{"test":"test"},"scripts":{"test":"jshint . && buster test -e node -r specification && promises-aplus-tests test/promises-aplus-adapter.js --reporter spec","ci":"npm test && sauceme","tunnel":"sauceme -m","start":"buster static -e browser","benchmark":"node benchmark/promise && node benchmark/map"},"readme":"<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when) \n\n# when.js\n\nWhen.js is cujoJS's lightweight [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation that powers the async core of [wire.js](https://github.com/cujojs/wire), cujoJS's IOC Container.  It features:\n\n* A rock solid, battle-tested Promise implementation\n* Resolving, settling, mapping, and reducing arrays of promises\n* Executing tasks in parallel and sequence\n* Transforming Node-style and other callback-based APIs into promise-based APIs\n\nIt passes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests), is [very fast](https://github.com/cujojs/promise-perf-tests#test-results) and compact, and has no external dependencies.\n\n# What's New?\n\n### 2.5.0\n\n* [Promises/A+ 1.1](http://promisesaplus.com) compliant.  Passes version 2.0.0 of the [Promises/A+ test suite](https://github.com/promises-aplus/promises-tests).\n\n### 2.4.1\n\n* New `MutationObserver` scheduler further reduces \"time-to-first-handler\" in modern browsers. (#198)\n\t* Also, this works around a horrible IE10 bug (desktop and mobile) that renders `setImmediate`, `MessageChannel`, and `postMessage` unusable as fast task schedulers.  Many thanks to @plaa and @calvinmetcalf for their help in discovering the problem and working out a solution. (#197)\n\n### 2.4.0\n\n* Experimental support for [vert.x 2.x](http://vertx.io). Should now run in vert.x >= 1.1.0.\n* New `when.isPromiseLike` as the more accurately-named synonym for `when.isPromise`.\n* **DEPRECATED**: `when.isPromise`. It can only tell you that something is \"promise-like\" (aka \"thenable\") anyway. Use the new, more accurately-named `when.isPromiseLike` instead.\n* Fix for promise monitor reporting extra unhandled rejections for `when.all` and `when.map`.\n\n### 2.3.0\n\n* New [`promise.tap`](docs/api.md#tap) for adding side effects to a promise chain.\n* New `MessageChannel` scheduler reduces \"time-to-first\" handler, in environments that support it.\n* Performance optimizations for promise resolution.\n* Internal architecture improvements to pave the way for when.js 3.0.0.\n\n### 2.2.1\n\n* Fix for `when.defer().reject()` bypassing the unhandled rejection monitor. (#166)\n* Fix for `when/function`, `when/callbacks`, and `when/node/function` not preserving `thisArg`. (#162)\n* Doc clarifications for [`promise.yield`](docs/api.md#yield). (#164)\n\n### 2.2.0\n\n* New experimental [promise monitoring and debugging](docs/api.md#debugging-promises) via `when/monitor/console`.\n* New [`when.promise(resolver)`](docs/api.md#whenpromise) promise creation API. A lighter alternative to the heavier `when.defer()`\n* New `bindCallback` and `liftCallback` in `when/node/function` for more integration options with node-style callbacks.\n\n### 2.1.1\n\n* Quote internal usages of `promise.yield` to workaround .NET minifier tools that don't yet understand ES5 identifier-as-property rules.  See [#157](https://github.com/cujojs/when/issues/157)\n\n### 2.1.0\n\n* New [`when.settle`](docs/api.md#whensettle) that settles an array of promises\n* New [`when/guard`](docs/api.md#whenguard) generalized concurrency guarding and limiting\n* New [`promise.inspect`](docs/api.md#inspect) for synchronously getting a snapshot of a promise's state at a particular instant.\n* Significant performance improvements when resolving promises with non-primitives (e.g. with Arrays, Objects, etc.)\n* Experimental [vert.x](http://vertx.io) support\n* **DEPRECATED**: `onFulfilled`, `onRejected`, `onProgress` handler arguments to `when.all`, `when.any`, `when.some`.  Use the returned promise's `then()` (or `otherwise()`, `ensure()`, etc) to register handlers instead.\n\t* For example, do this: `when.all(array).then(onFulfilled, onRejected)` instead of this: `when.all(array, onFulfilled, onRejected)`.  The functionality is equivalent.\n\n### 2.0.1\n\n* Account for the fact that Mocha creates a global named `process`. Thanks [Narsul](https://github.com/cujojs/when/pull/136)\n\n### 2.0.0\n\n* Fully asynchronous resolutions.\n* [Promises/A+](http://promises-aplus.github.com/promises-spec) compliance.\n* New [`when/keys`](docs/api.md#object-keys) module with `all()` and `map()` for object keys/values.\n* New [`promise.ensure`](docs/api.md#ensure) as a better, and safer, replacement for `promise.always`.  [See discussion](https://github.com/cujojs/when/issues/103) as to why `promise.always` is mistake-prone.\n\t* **DEPRECATED:** `promise.always`\n* `lift()` is now the preferred name for what was `bind()` in [when/function](docs/api.md#synchronous-functions), [when/node/function](docs/api.md#node-style-asynchronous-functions), and [when/callbacks](docs/api.md#asynchronous-functions).\n\t* **DEPRECATED:** `bind()` in `when/function`, `when/node/function`, and `when/callbacks`.  Use `lift()` instead.\n\n[Full Changelog](CHANGES.md)\n\n# Docs & Examples\n\n[API docs](docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. Get it\n\t- `bower install when` or `yeoman install when`, *or*\n\t- `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```js\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n### Legacy environments\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Add a transient `define` shim, and a `<script>` element for when.js\n\n\t```html\n\t<script>\n\t\twindow.define = function(factory) {\n\t\t\ttry{ delete window.define; } catch(e){ window.define = void 0; } // IE\n\t\t\twindow.when = factory();\n\t\t};\n\t\twindow.define.amd = {};\n\t</script>\n\t<script src=\"path/to/when/when.js\"></script>\n\t```\n\n1. `when` will be available as `window.when`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A+ Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@2.5.0","dist":{"shasum":"8bf9ec2570fa58fe45987c889528571fe5782d0e","tarball":"http://registry.npmjs.org/when/-/when-2.5.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"2.5.1":{"name":"when","version":"2.5.1","description":"A lightweight Promises/A+ and when() implementation, plus other async goodies.","keywords":["Promises/A+","promises-aplus","promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"homepage":"http://cujojs.com","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repository":{"type":"git","url":"https://github.com/cujojs/when"},"bugs":{"url":"https://github.com/cujojs/when/issues"},"maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"contributors":[{"name":"Brian Cavalier","url":"http://hovercraftstudios.com"},{"name":"John Hann","url":"http://unscriptable.com"},{"name":"Scott Andrews"}],"devDependencies":{"curl":"https://github.com/cujojs/curl/tarball/0.7.3","test-support":"~0.3","promises-aplus-tests":"~2","benchmark":"~1","microtime":"~0"},"main":"when","directories":{"test":"test"},"scripts":{"test":"jshint . && buster test -e node -r specification && promises-aplus-tests test/promises-aplus-adapter.js --reporter spec","ci":"npm test && sauceme","tunnel":"sauceme -m","start":"buster static -e browser","benchmark":"node benchmark/promise && node benchmark/map"},"readme":"<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when) \n\n# when.js\n\nWhen.js is cujoJS's lightweight [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation that powers the async core of [wire.js](https://github.com/cujojs/wire), cujoJS's IOC Container.  It features:\n\n* A rock solid, battle-tested Promise implementation\n* Resolving, settling, mapping, and reducing arrays of promises\n* Executing tasks in parallel and sequence\n* Transforming Node-style and other callback-based APIs into promise-based APIs\n\nIt passes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests), is [very fast](https://github.com/cujojs/promise-perf-tests#test-results) and compact, and has no external dependencies.\n\n# What's New?\n\n### 2.5.1\n\n* `ensure` now ignores non-functions, [like `then` does](http://promisesaplus.com/#point-25), for consistency. (#207)\n\n### 2.5.0\n\n* [Promises/A+ 1.1](http://promisesaplus.com) compliant.  Passes version 2.0.0 of the [Promises/A+ test suite](https://github.com/promises-aplus/promises-tests).\n\n### 2.4.1\n\n* New `MutationObserver` scheduler further reduces \"time-to-first-handler\" in modern browsers. (#198)\n\t* Also, this works around a horrible IE10 bug (desktop and mobile) that renders `setImmediate`, `MessageChannel`, and `postMessage` unusable as fast task schedulers.  Many thanks to @plaa and @calvinmetcalf for their help in discovering the problem and working out a solution. (#197)\n\n### 2.4.0\n\n* Experimental support for [vert.x 2.x](http://vertx.io). Should now run in vert.x >= 1.1.0.\n* New `when.isPromiseLike` as the more accurately-named synonym for `when.isPromise`.\n* **DEPRECATED**: `when.isPromise`. It can only tell you that something is \"promise-like\" (aka \"thenable\") anyway. Use the new, more accurately-named `when.isPromiseLike` instead.\n* Fix for promise monitor reporting extra unhandled rejections for `when.all` and `when.map`.\n\n### 2.3.0\n\n* New [`promise.tap`](docs/api.md#tap) for adding side effects to a promise chain.\n* New `MessageChannel` scheduler reduces \"time-to-first\" handler, in environments that support it.\n* Performance optimizations for promise resolution.\n* Internal architecture improvements to pave the way for when.js 3.0.0.\n\n### 2.2.1\n\n* Fix for `when.defer().reject()` bypassing the unhandled rejection monitor. (#166)\n* Fix for `when/function`, `when/callbacks`, and `when/node/function` not preserving `thisArg`. (#162)\n* Doc clarifications for [`promise.yield`](docs/api.md#yield). (#164)\n\n### 2.2.0\n\n* New experimental [promise monitoring and debugging](docs/api.md#debugging-promises) via `when/monitor/console`.\n* New [`when.promise(resolver)`](docs/api.md#whenpromise) promise creation API. A lighter alternative to the heavier `when.defer()`\n* New `bindCallback` and `liftCallback` in `when/node/function` for more integration options with node-style callbacks.\n\n### 2.1.1\n\n* Quote internal usages of `promise.yield` to workaround .NET minifier tools that don't yet understand ES5 identifier-as-property rules.  See [#157](https://github.com/cujojs/when/issues/157)\n\n### 2.1.0\n\n* New [`when.settle`](docs/api.md#whensettle) that settles an array of promises\n* New [`when/guard`](docs/api.md#whenguard) generalized concurrency guarding and limiting\n* New [`promise.inspect`](docs/api.md#inspect) for synchronously getting a snapshot of a promise's state at a particular instant.\n* Significant performance improvements when resolving promises with non-primitives (e.g. with Arrays, Objects, etc.)\n* Experimental [vert.x](http://vertx.io) support\n* **DEPRECATED**: `onFulfilled`, `onRejected`, `onProgress` handler arguments to `when.all`, `when.any`, `when.some`.  Use the returned promise's `then()` (or `otherwise()`, `ensure()`, etc) to register handlers instead.\n\t* For example, do this: `when.all(array).then(onFulfilled, onRejected)` instead of this: `when.all(array, onFulfilled, onRejected)`.  The functionality is equivalent.\n\n### 2.0.1\n\n* Account for the fact that Mocha creates a global named `process`. Thanks [Narsul](https://github.com/cujojs/when/pull/136)\n\n### 2.0.0\n\n* Fully asynchronous resolutions.\n* [Promises/A+](http://promises-aplus.github.com/promises-spec) compliance.\n* New [`when/keys`](docs/api.md#object-keys) module with `all()` and `map()` for object keys/values.\n* New [`promise.ensure`](docs/api.md#ensure) as a better, and safer, replacement for `promise.always`.  [See discussion](https://github.com/cujojs/when/issues/103) as to why `promise.always` is mistake-prone.\n\t* **DEPRECATED:** `promise.always`\n* `lift()` is now the preferred name for what was `bind()` in [when/function](docs/api.md#synchronous-functions), [when/node/function](docs/api.md#node-style-asynchronous-functions), and [when/callbacks](docs/api.md#asynchronous-functions).\n\t* **DEPRECATED:** `bind()` in `when/function`, `when/node/function`, and `when/callbacks`.  Use `lift()` instead.\n\n[Full Changelog](CHANGES.md)\n\n# Docs & Examples\n\n[API docs](docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. Get it\n\t- `bower install when` or `yeoman install when`, *or*\n\t- `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```js\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n### Legacy environments\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Add a transient `define` shim, and a `<script>` element for when.js\n\n\t```html\n\t<script>\n\t\twindow.define = function(factory) {\n\t\t\ttry{ delete window.define; } catch(e){ window.define = void 0; } // IE\n\t\t\twindow.when = factory();\n\t\t};\n\t\twindow.define.amd = {};\n\t</script>\n\t<script src=\"path/to/when/when.js\"></script>\n\t```\n\n1. `when` will be available as `window.when`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A+ Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@2.5.1","dist":{"shasum":"1109685075dc09643109287e6363ae5d73ea7d53","tarball":"http://registry.npmjs.org/when/-/when-2.5.1.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"2.6.0":{"name":"when","version":"2.6.0","description":"A lightweight Promises/A+ and when() implementation, plus other async goodies.","keywords":["Promises/A+","promises-aplus","promise","promises","deferred","deferreds","when","async","asynchronous","cujo"],"homepage":"http://cujojs.com","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repository":{"type":"git","url":"https://github.com/cujojs/when"},"bugs":{"url":"https://github.com/cujojs/when/issues"},"maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"contributors":[{"name":"Brian Cavalier","url":"http://hovercraftstudios.com"},{"name":"John Hann","url":"http://unscriptable.com"},{"name":"Scott Andrews"}],"devDependencies":{"curl":"https://github.com/cujojs/curl/tarball/0.7.3","test-support":"~0.3","promises-aplus-tests":"~2","benchmark":"~1","microtime":"~0"},"main":"when","directories":{"test":"test"},"scripts":{"test":"jshint . && buster test -e node -r specification && promises-aplus-tests test/promises-aplus-adapter.js --reporter spec","ci":"npm test && sauceme","tunnel":"sauceme -m","start":"buster static -e browser","benchmark":"node benchmark/promise && node benchmark/map"},"readme":"<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when) \n\n# when.js\n\nWhen.js is cujoJS's lightweight [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation that powers the async core of [wire.js](https://github.com/cujojs/wire), cujoJS's IOC Container.  It features:\n\n* A rock solid, battle-tested Promise implementation\n* Resolving, settling, mapping, and reducing arrays of promises\n* Executing tasks in parallel and sequence\n* Transforming Node-style and other callback-based APIs into promise-based APIs\n\nIt passes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests), is [very fast](https://github.com/cujojs/promise-perf-tests#test-results) and compact, and has no external dependencies.\n\n# What's New?\n\n### 2.6.0\n\n* New [`promise.done`](docs/api.md#done) allows consuming the ultimate value at the end of a promise chain while ensuring that any errors are thrown to the host environment so you get loud stack traces.\n* `when/node/function` [`bindCallback`](docs/api.md#nodefn-bindcallback) and [`liftCallback`](docs/api.md#nodefn-liftcallback) now behave more like standard node-style APIs in that they allow exceptions to propagate to the host environment for loud stack traces.\n\n### 2.5.1\n\n* `ensure` now ignores non-functions, [like `then` does](http://promisesaplus.com/#point-25), for consistency. (#207)\n\n### 2.5.0\n\n* [Promises/A+ 1.1](http://promisesaplus.com) compliant.  Passes version 2.0.0 of the [Promises/A+ test suite](https://github.com/promises-aplus/promises-tests).\n\n### 2.4.1\n\n* New `MutationObserver` scheduler further reduces \"time-to-first-handler\" in modern browsers. (#198)\n\t* Also, this works around a horrible IE10 bug (desktop and mobile) that renders `setImmediate`, `MessageChannel`, and `postMessage` unusable as fast task schedulers.  Many thanks to @plaa and @calvinmetcalf for their help in discovering the problem and working out a solution. (#197)\n\n### 2.4.0\n\n* Experimental support for [vert.x 2.x](http://vertx.io). Should now run in vert.x >= 1.1.0.\n* New `when.isPromiseLike` as the more accurately-named synonym for `when.isPromise`.\n* **DEPRECATED**: `when.isPromise`. It can only tell you that something is \"promise-like\" (aka \"thenable\") anyway. Use the new, more accurately-named `when.isPromiseLike` instead.\n* Fix for promise monitor reporting extra unhandled rejections for `when.all` and `when.map`.\n\n### 2.3.0\n\n* New [`promise.tap`](docs/api.md#tap) for adding side effects to a promise chain.\n* New `MessageChannel` scheduler reduces \"time-to-first\" handler, in environments that support it.\n* Performance optimizations for promise resolution.\n* Internal architecture improvements to pave the way for when.js 3.0.0.\n\n[Full Changelog](CHANGES.md)\n\n# Docs & Examples\n\n[API docs](docs/api.md#api)\n\n[More info on the wiki](https://github.com/cujojs/when/wiki)\n\n[Examples](https://github.com/cujojs/when/wiki/Examples)\n\nQuick Start\n===========\n\n### AMD\n\n1. Get it\n\t- `bower install when` or `yeoman install when`, *or*\n\t- `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```js\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n### Legacy environments\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Add a transient `define` shim, and a `<script>` element for when.js\n\n\t```html\n\t<script>\n\t\twindow.define = function(factory) {\n\t\t\ttry{ delete window.define; } catch(e){ window.define = void 0; } // IE\n\t\t\twindow.when = factory();\n\t\t};\n\t\twindow.define.amd = {};\n\t</script>\n\t<script src=\"path/to/when/when.js\"></script>\n\t```\n\n1. `when` will be available as `window.when`\n\n# Running the Unit Tests\n\n## Node\n\nNote that when.js includes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A+ Test Suite.\n\n1. `npm install`\n1. `npm test`\n\n## Browsers\n\n1. `npm install`\n1. `npm start` - starts buster server & prints a url\n1. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n1. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@2.6.0","dist":{"shasum":"3985e240acac1b4cf32925c43d400e5b5e11954f","tarball":"http://registry.npmjs.org/when/-/when-2.6.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}},"2.7.0":{"name":"when","version":"2.7.0","description":"A lightweight Promises/A+ and when() implementation, plus other async goodies.","keywords":["Promises/A+","promises-aplus","promise","promises","deferred","deferreds","when","async","asynchronous","cujo","ender"],"homepage":"http://cujojs.com","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repository":{"type":"git","url":"https://github.com/cujojs/when"},"bugs":{"url":"https://github.com/cujojs/when/issues"},"maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"contributors":[{"name":"Brian Cavalier","url":"http://hovercraftstudios.com"},{"name":"John Hann","url":"http://unscriptable.com"},{"name":"Scott Andrews"}],"devDependencies":{"curl":"https://github.com/cujojs/curl/tarball/0.7.3","test-support":"~0.3","promises-aplus-tests":"~2","benchmark":"~1","microtime":"~0","browserify":"~2"},"main":"when","ender":{"files":["*.js","node/*.js","unfold/*.js","monitor/*.js"]},"directories":{"test":"test"},"scripts":{"test":"jshint . && buster test -e node -r specification && promises-aplus-tests test/promises-aplus-adapter.js --reporter spec","ci":"npm test && sauceme","tunnel":"sauceme -m","start":"buster static -e browser","benchmark":"node benchmark/promise && node benchmark/map","browserify":"browserify -s when build/when.browserify.js -o build/when.js","browserify-debug":"browserify -s when build/when.browserify-debug.js -o build/when.js"},"readme":"<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" alt=\"Promises/A+ logo\" align=\"right\" /></a>\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when) \n\n# when.js\n\nWhen.js is cujoJS's lightweight [Promises/A+](http://promises-aplus.github.com/promises-spec) and `when()` implementation that powers the async core of [wire.js](https://github.com/cujojs/wire), cujoJS's IOC Container.  It features:\n\n* A rock solid, battle-tested Promise implementation\n* Resolving, settling, mapping, and reducing arrays of promises\n* Executing tasks in parallel and sequence\n* Transforming Node-style and other callback-based APIs into promise-based APIs\n\nIt passes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests), is [very fast](https://github.com/cujojs/promise-perf-tests#test-results) and compact, and has no external dependencies.\n\n- [What's new](CHANGES.md)\n- [API docs](docs/api.md#api)\n- [Examples](https://github.com/cujojs/when/wiki/Examples)\n- [More info on the wiki](https://github.com/cujojs/when/wiki)\n\nQuick Start\n-----------\n\n#### AMD\n\n1. Get it\n\t- `bower install when` or `yeoman install when`, *or*\n\t- `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```js\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n#### Node\n\n1. `npm install when`\n1. `var when = require('when');`\n\n#### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\n#### Ender\n\n1. `ender add cujojs/when`\n2. `var when = require('when');`\n\n#### Legacy environments (via browserify)\n\n1. `git clone https://github.com/cujojs/when`\n1. `npm install`\n1. `npm run browserify` to generate `build/when.js`\n\t1. Or `npm run browserify-debug` to build with [when/monitor/console](docs/api.md#debugging-promises) enabled\n1. `<script src=\"path/to/when/build/when.js\"></script>`\n\t1. `when` will be available as `window.when`\n\t1. Other modules will be available as sub-objects/functions, e.g. `window.when.fn.lift`, `window.when.sequence`.  See the [full sub-namespace list in the browserify build file](build/when.browserify.js)\n\nRunning the Unit Tests\n----------------------\n\n#### Node\n\nNote that when.js includes the [Promises/A+ Test Suite](https://github.com/promises-aplus/promise-tests).  Running unit tests in Node will run both when.js's own test suite, and the Promises/A+ Test Suite.\n\n1. `npm install`\n2. `npm test`\n\n#### Browsers\n\n1. `npm install`\n2. `npm start` - starts buster server & prints a url\n3. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n4. `npm run-script test-browser`\n\nReferences\n----------\n\nMuch of this code was inspired by the async innards of [wire.js](https://github.com/cujojs/wire), and has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","readmeFilename":"README.md","_id":"when@2.7.0","dist":{"shasum":"f79495e53b206c853baf17da5bf3bb0c2eac7bd7","tarball":"http://registry.npmjs.org/when/-/when-2.7.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"cujojs","email":"info@cujojs.com"}}},"readme":"Please Note: this project has moved from briancavalier/when to cujojs/when.\nAny existing forks have been automatically moved to cujojs/when. However,\nyou'll need to update your clone and submodule remotes manually.\n\nUpdate the url in your .git/config, and also .gitmodules for submodules:\n\n```\ngit://github.com/cujojs/when.git\nhttps://cujojs@github.com/cujojs/when.git\n```\n\nHelpful link for updating submodules:\n[Git Submodules: Adding, Using, Removing, Updating](http://chrisjean.com/2009/04/20/git-submodules-adding-using-removing-and-updating/)\n\n----\n\n[![Build Status](https://secure.travis-ci.org/cujojs/when.png)](http://travis-ci.org/cujojs/when)\n\nA lightweight [CommonJS](http://wiki.commonjs.org/wiki/Promises) [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and `when()` implementation.  It also provides several other useful Promise-related concepts, such as joining and chaining, and has a robust unit test suite.\n\nIt's **just over 1k** when compiled with Google Closure (w/advanced optimizations) and gzipped.\n\nwhen.js was derived from the async core of [wire.js](https://github.com/cujojs/wire).\n\nWhat's New?\n===========\n\n### 1.2.0\n\n* `promise.otherwise(errback)` as a shortcut for `promise.then(null, errback)`. See discussion [here](https://github.com/cujojs/when/issues/13) and [here](https://github.com/cujojs/when/issues/29). Thanks to [@jonnyreeves](https://github.com/jonnyreeves/) for suggesting the name \"otherwise\".\n* [when/debug](https://github.com/cujojs/when/wiki/when-debug) now detects exceptions that typically represent coding errors, such as SyntaxError, ReferenceError, etc. and propagates them to the host environment.  In other words, you'll get a very loud stack trace.\n\n### 1.1.1\n\n* Updated [wiki](https://github.com/cujojs/when/wiki) map/reduce examples, and added simple promise forwarding example\n* Fix for calling `when.any()` without a callback ([#33](https://github.com/cujojs/when/issues/33))\n* Fix version number in `when.js` source ([#36](https://github.com/cujojs/when/issues/36))\n\n### 1.1.0\n\n* `when.all/any/some/map/reduce` can all now accept a promise for an array in addition to an actual array as input.  This allows composing functions to do interesting things like `when.reduce(when.map(...))`\n* `when.reject(promiseOrValue)` that returns a new, rejected promise.\n* `promise.always(callback)` as a shortcut for `promise.then(callback, callback)`\n* **Highly experimental** [when/debug](https://github.com/cujojs/when/wiki/when-debug) module: a drop-in replacement for the main `when` module that enables debug logging for promises created or consumed by when.js\n\n[Full Changelog](https://github.com/cujojs/when/wiki/Changelog)\n\nQuick Start\n===========\n\n### AMD\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. Configure your loader with a package:\n\n\t```javascript\n\tpackages: [\n\t\t{ name: 'when', location: 'path/to/when/', main: 'when' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['when', ...], function(when, ...) { ... });` or `require(['when', ...], function(when, ...) { ... });`\n\n### Script Tag\n\n1. `git clone https://github.com/cujojs/when` or `git submodule add https://github.com/cujojs/when`\n1. `<script src=\"path/to/when/when.js\"></script>`\n1. `when` will be available as `window.when`\n\n### Node\n\n1. `npm install git://github.com/cujojs/when` (**NOTE:** npm seems to require a url that starts with \"git\" rather than http or https)\n1. `var when = require('when');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/when`\n1. `var when = require('when');`\n\nDocs & Examples\n===============\n\nSee the API section below, and the [wiki for more detailed docs](https://github.com/cujojs/when/wiki) and [examples](https://github.com/cujojs/when/wiki/Examples)\n\nAPI\n===\n\nwhen()\n------\n\nRegister a handler for a promise or immediate value:\n\n```javascript\nwhen(promiseOrValue, callback, errback, progressback)\n\n// Always returns a promise, so can be chained:\n\nwhen(promiseOrValue, callback, errback, progressback).then(anotherCallback, anotherErrback, anotherProgressback)\n```\n\n**Getting an already-resolved Promise**\n\nYou can also use `when()` to get an already-resolved promise for a value, similarly to using `when.reject()` to get a rejected promise (see below):\n\n```javascript\nvar resolved = when(anything);\n```\n\nwhen.defer()\n------------\n\nCreate a new Deferred containing separate `promise` and `resolver` parts:\n\n```javascript\nvar deferred = when.defer();\n\nvar promise = deferred.promise;\nvar resolver = deferred.resolver;\n```\n\n**Promise API**\n\n```javascript\n// var promise = deferred.promise;\n\n// then()\n// Main promise API\n// Register callback, errback, and/or progressback\npromise.then(callback, errback, progressback);\n```\n\n**Extended Promise API**\n\nConvenience methods that are not part of the Promises/A proposal.\n\n```js\n// always()\n// Register an alwaysback that will be called when the promise resolves or rejects\npromise.always(alwaysback [, progressback]);\n\n// otherwise()\n// Convenience method to register only an errback\npromise.otherwise(errback);\n```\n\n**Resolver API**\n\n```javascript\n// var resolver = deferred.resolver;\nresolver.resolve(value);\nresolver.reject(err);\nresolver.progress(update);\n```\n\nThe deferred has the full `promise` + `resolver` API:\n\n```javascript\ndeferred.then(callback, errback, progressback);\ndeferred.resolve(value);\ndeferred.reject(reason);\ndeferred.progress(update);\n```\n\nwhen.reject()\n-------------\n\n```javascript\nvar rejected = when.reject(anything);\n```\n\nReturn a rejected promise for the supplied promiseOrValue. If promiseOrValue is a value, it will be the rejection value of the returned promise.  If promiseOrValue is a promise, its completion value will be the rejected value of the returned promise.\n\nThis can be useful in situations where you need to reject a promise *without* throwing an exception.  For example, it allows you to propagate a rejection with the value of another promise.\n\n```javascript\nwhen(doSomething(),\n\thandleSuccess,\n\tfunction(error) {\n\t\t// doSomething failed, but we want to do some processing on the error\n\t\t// to return something more useful to the caller.\n\t\t// This allows processError to return either a value or a promise.\n\t\treturn when.reject(processError(e));\n\t}\n);\n```\n\nwhen.isPromise()\n----------------\n\n```javascript\nvar is = when.isPromise(anything);\n```\n\nReturn true if `anything` is truthy and implements the then() promise API.  Note that this will return true for both a deferred (i.e. `when.defer()`), and a `deferred.promise` since both implement the promise API.\n\nwhen.some()\n-----------\n\n```javascript\nwhen.some(promisesOrValues, howMany, callback, errback, progressback)\n```\n\nReturn a promise that will resolve when `howMany` of the supplied `promisesOrValues` have resolved.  The resolution value of the returned promise will be an array of length `howMany` containing the resolutions values of the triggering `promisesOrValues`.\n\nwhen.all()\n----------\n\n```javascript\nwhen.all(promisesOrValues, callback, errback, progressback)\n```\n\nReturn a promise that will resolve only once *all* the supplied `promisesOrValues` have resolved.  The resolution value of the returned promise will be an array containing the resolution values of each of the `promisesOrValues`.\n\nwhen.any()\n----------\n\n```javascript\nwhen.any(promisesOrValues, callback, errback, progressback)\n```\n\nReturn a promise that will resolve when any one of the supplied `promisesOrValues` has resolved.  The resolution value of the returned promise will be the resolution value of the triggering `promiseOrValue`.\n\nwhen.chain()\n------------\n\n```javascript\nwhen.chain(promiseOrValue, resolver, optionalValue)\n```\n\nEnsure that resolution of `promiseOrValue` will complete `resolver` with the completion value of `promiseOrValue`, or instead with `optionalValue` if it is provided.\n\nReturns a new promise that will complete when `promiseOrValue` is completed, with the completion value of `promiseOrValue`, or instead with `optionalValue` if it is provided.\n\n**Note:** If `promiseOrValue` is not an immediate value, it can be anything that supports the promise API (i.e. `then()`), so you can pass a `deferred` as well.  Similarly, `resolver` can be anything that supports the resolver API (i.e. `resolve()`, `reject()`), so a `deferred` will work there, too.\n\nwhen.map()\n----------\n\n```javascript\nwhen.map(promisesOrValues, mapFunc)\n```\n\nTraditional map function, similar to `Array.prototype.map()`, but allows input to contain promises and/or values, and mapFunc may return either a value or a promise.\n\nThe map function should have the signature:\n\n```javascript\nmapFunc(item)\n```\n\nWhere:\n\n* `item` is a fully resolved value of a promise or value in `promisesOrValues`\n\nwhen.reduce()\n-------------\n\n```javascript\nwhen.reduce(promisesOrValues, reduceFunc, initialValue)\n```\n\nTraditional reduce function, similar to `Array.prototype.reduce()`, but input may contain promises and/or values, and reduceFunc may return either a value or a promise, *and* initialValue may be a promise for the starting value.\n\nThe reduce function should have the signature:\n\n```javascript\nreduceFunc(currentValue, nextItem, index, total)\n```\n\nWhere:\n\n* `currentValue` is the current accumulated reduce value\n* `nextItem` is the fully resolved value of the promise or value at `index` in `promisesOrValues`\n* `index` the *basis* of `nextItem` ... practically speaking, this is the array index of the promiseOrValue corresponding to `nextItem`\n* `total` is the total number of items in `promisesOrValues`\n\nwhen/apply\n----------\n\n```javascript\nfunction functionThatAcceptsMultipleArgs(array) {\n    // ...\n}\n\nvar functionThatAcceptsAnArray = apply(functionThatAcceptsMultipleArgs);\n```\n\nHelper that allows using callbacks that take multiple args, instead of an array, with `when.all/some/map`:\n\n```javascript\nwhen.all(arrayOfPromisesOrValues, apply(functionThatAcceptsMultipleArgs));\n```\n\n[See the wiki](https://github.com/cujojs/when/wiki/when-apply) for more info and examples.\n\nRunning the Unit Tests\n======================\n\nInstall [buster.js](http://busterjs.org/)\n\n`npm install -g buster`\n\nRun unit tests in Node:\n\n1. `buster test -e node`\n\nRun unit tests in Browsers (and Node):\n\n1. `buster server` - this will print a url\n2. Point browsers at <buster server url>/capture, e.g. `localhost:1111/capture`\n3. `buster test` or `buster test -e browser`\n\nReferences\n----------\n\nMuch of this code was inspired by @[unscriptable](https://github.com/unscriptable)'s [tiny promises](https://github.com/unscriptable/promises), the async innards of [wire.js](https://github.com/cujojs/wire), and some gists [here](https://gist.github.com/870729), [here](https://gist.github.com/892345), [here](https://gist.github.com/894356), and [here](https://gist.github.com/894360)\n\nSome of the code has been influenced by the great work in [Q](https://github.com/kriskowal/q), [Dojo's Deferred](https://github.com/dojo/dojo), and [uber.js](https://github.com/phiggins42/uber.js).\n","maintainers":[{"name":"cujojs","email":"info@cujojs.com"}],"time":{"1.2.0":"2012-05-29T15:08:03.022Z","1.3.0":"2012-06-13T14:33:18.813Z","1.4.0":"2012-07-31T01:06:07.920Z","1.4.1":"2012-08-10T01:25:58.504Z","1.4.2":"2012-08-15T14:09:40.109Z","1.4.3":"2012-08-24T13:53:58.794Z","1.4.4":"2012-09-11T02:12:24.956Z","1.5.0":"2012-09-25T18:15:43.259Z","1.5.1":"2012-10-05T18:27:39.210Z","1.5.2":"2012-10-23T00:06:39.602Z","1.6.0":"2012-10-31T16:10:07.951Z","1.6.1":"2012-11-01T14:44:06.788Z","1.7.0":"2012-12-04T02:30:42.281Z","1.7.1":"2012-12-07T18:13:42.780Z","1.8.0":"2013-02-14T17:13:22.333Z","1.8.1":"2013-02-26T02:59:59.270Z","2.0.0":"2013-03-18T20:08:15.772Z","2.0.1":"2013-04-08T13:19:12.562Z","2.1.0":"2013-05-09T14:36:37.145Z","2.1.1":"2013-06-17T20:59:49.736Z","2.2.0":"2013-07-04T00:27:45.896Z","2.2.1":"2013-07-05T17:29:34.265Z","2.3.0":"2013-08-09T13:30:52.503Z","2.4.0":"2013-09-06T16:35:37.174Z","2.5.0":"2013-10-05T17:54:18.298Z","2.5.1":"2013-10-07T20:07:55.446Z","2.6.0":"2013-11-06T21:53:05.299Z","2.7.0":"2013-12-02T20:02:45.294Z"},"users":{"fgribreau":true,"finalclass":true,"pid":true,"tigefa":true},"repository":{"type":"git","url":"https://github.com/cujojs/when"},"_attachments":{"when-2.7.0.tgz":{"content_type":"application/octet-stream","revpos":62,"digest":"md5-LwmrFZZULgkPFJr2B1C+GQ==","length":34063,"stub":true},"when-2.6.0.tgz":{"content_type":"application/octet-stream","revpos":58,"digest":"md5-2SyaVh6FJhl9zRiD7BfWvg==","length":36260,"stub":true},"when-2.5.1.tgz":{"content_type":"application/octet-stream","revpos":56,"digest":"md5-HP079PpxULpCN2801/ClfQ==","length":36773,"stub":true},"when-2.5.0.tgz":{"content_type":"application/octet-stream","revpos":54,"digest":"md5-/jeGJFzt4ahD/Xl/g6/Tlg==","length":36700,"stub":true},"when-2.4.0.tgz":{"content_type":"application/octet-stream","revpos":52,"digest":"md5-8irbOs2jXq2WaLC9c0zBNw==","length":36292,"stub":true},"when-2.3.0.tgz":{"content_type":"application/octet-stream","revpos":49,"digest":"md5-ZFRZfVzSWOlHwUGDsQCNAw==","length":35625,"stub":true},"when-2.2.1.tgz":{"content_type":"application/octet-stream","revpos":47,"digest":"md5-gx8up29ydkk+P3OWeJOXiw==","length":34803,"stub":true},"when-2.2.0.tgz":{"content_type":"application/octet-stream","revpos":45,"digest":"md5-Qm4PwwcuSkN0JkKSmQ9L3Q==","length":34520,"stub":true},"when-2.1.1.tgz":{"content_type":"application/octet-stream","revpos":43,"digest":"md5-S9JZxeMWpFrREvIxKIEpNA==","length":28450,"stub":true},"when-2.1.0.tgz":{"content_type":"application/octet-stream","revpos":41,"digest":"md5-e8qMztrRFOujP3af00LjwA==","length":28183,"stub":true},"when-2.0.1.tgz":{"content_type":"application/octet-stream","revpos":38,"digest":"md5-DmsePkvyfdsfp7BUoHSXHA==","length":26715,"stub":true},"when-2.0.0.tgz":{"content_type":"application/octet-stream","revpos":36,"digest":"md5-GEAgLXcy2Vp681XCDrZ0/g==","length":28881,"stub":true},"when-1.8.1.tgz":{"content_type":"application/octet-stream","revpos":35,"digest":"md5-QJgqTHscE3Qks+EMtG7GYQ==","length":26235,"stub":true},"when-1.8.0.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-KKHBgHKf//lC+0epIiFsvg==","length":25609,"stub":true},"when-1.7.1.tgz":{"content_type":"application/octet-stream","revpos":31,"digest":"md5-Biv9yU6eEteO8xCf/HD/pA==","length":15075,"stub":true},"when-1.7.0.tgz":{"content_type":"application/octet-stream","revpos":29,"digest":"md5-uSCWt0vCJYNri1BdaV1DsQ==","length":15019,"stub":true},"when-1.6.1.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-RE+lh2zi7RFFQUe5kwiHKQ==","length":14827,"stub":true},"when-1.6.0.tgz":{"content_type":"application/octet-stream","revpos":25,"digest":"md5-QaRtmknkdCKByE3qOp7m/A==","length":14742,"stub":true},"when-1.5.2.tgz":{"content_type":"application/octet-stream","revpos":23,"digest":"md5-HdEdRjIw6euNIc+7l6ThSQ==","length":14178,"stub":true},"when-1.5.1.tgz":{"content_type":"application/octet-stream","revpos":21,"digest":"md5-C9jThvoFVAzkiCzB/gm4RA==","length":14024,"stub":true},"when-1.5.0.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-ncsqnsZ24fN+daDbWxPC1g==","length":15316,"stub":true},"when-1.4.4.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-BE9CC9gBajjjbrquNMwJkQ==","length":20685,"stub":true},"when-1.4.3.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-fzBz+f+Nmo3oKMoOkFuRBw==","length":14346,"stub":true},"when-1.4.2.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-4hDJmE5RoQgXLYZCuI5z/Q==","length":20288,"stub":true},"when-1.4.1.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-lfR+5V6fXoklyBwX1AEZ1Q==","length":14260,"stub":true},"when-1.4.0.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-OlyklqXsSab8nmS5ozYBtw==","length":12383,"stub":true},"when-1.3.0.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-PmdiLYwMiGGyZ+CDP31oMg==","length":14654,"stub":true},"when-1.2.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-avz6TNT/lMh8ir2t/58mjA==","length":14539,"stub":true}},"_etag":"\"6H5MFZ4ZBMY34TP1ZMJBRT9QH\""}