{"_id":"yamljs","_rev":"20-149f24cb589d8114506d4a4a0e80ff0e","name":"yamljs","description":"Standalone JavaScript YAML 1.2 Parser & Encoder. Works under node.js and all major browsers. Also brings command line YAML/JSON conversion tools.","dist-tags":{"latest":"0.1.4"},"versions":{"0.1.0":{"name":"yamljs","version":"0.1.0","description":"Standalone JavaScript YAML 1.2 Parser & Encoder. Mainly inspired from Yaml Component (part of the php framework Symfony).","keywords":["yaml"],"author":{"name":"Jeremy Faivre","email":"contact@jeremyfa.com"},"main":"./bin/yaml.js","dependencies":{},"devDependencies":{},"repository":{"type":"git","url":"git://github.com/jeremyfa/yaml.js.git"},"readme":"yaml.js\n=======\n\nStandalone JavaScript YAML 1.2 Parser & Encoder. You don't need any javascript framework to use it.\n\nMainly inspired from [Yaml Component](https://github.com/symfony/Yaml) (part of the php framework Symfony).\n\nHow to use\n----------\n\nImport yaml.js in your html page:\n\n    <script type=\"text/javascript\" src=\"yaml.js\"></script>\n\nParse yaml string:\n\n    nativeObject = YAML.parse(yamlString);\n\nDump native object into yaml string:\n\n    yamlString = YAML.stringify(nativeObject[, inline /* @integer depth to start using inline notation at */ ]);\n\nLoad yaml file:\n\n    nativeObject = YAML.load('file.yml');\n\nLoad yaml file:\n\n    YAML.load('file.yml', function(result)\n    {\n        nativeObject = result;\n    });\n\nUse with node.js\n----------------\n\nInstall module:\n\n    npm install yamljs\n\nUse it:\n\n    YAML = require('yamljs');\n    \n    // parse YAML string\n    nativeObject = YAML.parse(yamlString);\n    \n    // Generate YAML\n    yamlString = YAML.stringify(nativeObject, 4);\n    \n    // Load yaml file using require\n    nativeObject = require('./myfile.yml');\n\nImportant\n---------\n\nSymfony dropped support for YAML 1.1 spec. This means that `yes`, `no` and similar no longer convert to their *boolean* equivalents.\n\nThe internal `Yaml().load()` and `Yaml().loadFile()` methods renamed to `Yaml().parse()` and `Yaml().parseFile()` respectively. Exceptions replaced with `YamlParseException` object.\n\n","_id":"yamljs@0.1.0","dist":{"shasum":"c7c9bd8e7c2e07d5d12c6a9fd860692e6b60fea0","tarball":"http://registry.npmjs.org/yamljs/-/yamljs-0.1.0.tgz"},"maintainers":[{"name":"jeremyfa","email":"contact@jeremyfa.com"}],"directories":{}},"0.1.1":{"name":"yamljs","version":"0.1.1","description":"Standalone JavaScript YAML 1.2 Parser & Encoder. Works under node.js and all major browsers. Also brings command line YAML/JSON conversion tools.","keywords":["yaml","json","yaml2json","json2yaml"],"author":{"name":"Jeremy Faivre","email":"contact@jeremyfa.com"},"main":"./bin/yaml.js","dependencies":{"argparse":"~0.1.4","glob":"~3.1.11"},"bin":{"yaml2json":"./bin/yaml2json","json2yaml":"./bin/json2yaml"},"devDependencies":{},"repository":{"type":"git","url":"git://github.com/jeremyfa/yaml.js.git"},"readme":"yaml.js\n=======\n\nStandalone JavaScript YAML 1.2 Parser & Encoder. Works under node.js and all major browsers. Also brings command line YAML/JSON conversion tools.\n\nMainly inspired from [Symfony Yaml Component](https://github.com/symfony/Yaml).\n\nHow to use\n----------\n\nImport yaml.js in your html page:\n\n``` html\n<script type=\"text/javascript\" src=\"yaml.js\"></script>\n```\n\nParse yaml string:\n\n``` js\nnativeObject = YAML.parse(yamlString);\n```\n\nDump native object into yaml string:\n\n``` js\nyamlString = YAML.stringify(nativeObject[, inline /* @integer depth to start using inline notation at */[, spaces /* @integer number of spaces to use for indentation */] ]);\n```\n\nLoad yaml file:\n\n``` js\nnativeObject = YAML.load('file.yml');\n```\n\nLoad yaml file:\n\n``` js\nYAML.load('file.yml', function(result)\n{\n    nativeObject = result;\n});\n```\n\nUse with node.js\n----------------\n\nInstall module:\n\n``` bash\nnpm install yamljs\n```\n\nUse it:\n\n``` js\nYAML = require('yamljs');\n\n// parse YAML string\nnativeObject = YAML.parse(yamlString);\n\n// Generate YAML\nyamlString = YAML.stringify(nativeObject, 4);\n\n// Load yaml file using require\nnativeObject = require('./myfile.yml');\n\n// Load yaml file using YAML.load\nnativeObject = YAML.load('myfile.yml');\n```\n\nCommand line tools\n------------------\n\nYou can enable the command line tools by installing yamljs as a global module:\n\n``` bash\nnpm install -g yamljs\n```\n\nThen, two cli commands should become available: **yaml2json** and **json2yaml**. They let you convert YAML to JSON and JSON to YAML very easily.\n\n**yaml2json**\n\n```\nusage: yaml2json [-h] [-v] [-p] [-i INDENTATION] [-s] [-r] [-w] input\n\nPositional arguments:\n  input                 YAML file or directory containing YAML files.\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --version         Show program's version number and exit.\n  -p, --pretty          Output pretty (indented) JSON.\n  -i INDENTATION, --indentation INDENTATION\n                        Number of space characters used to indent code (use \n                        with --pretty, default: 2).\n  -s, --save            Save output inside JSON file(s) with the same name.\n  -r, --recursive       If the input is a directory, also find YAML files in \n                        sub-directories recursively.\n  -w, --watch           Watch for changes.\n```\n\n**json2yaml**\n\n```\nusage: json2yaml [-h] [-v] [-d DEPTH] [-i INDENTATION] [-s] [-r] [-w] input\n\nPositional arguments:\n  input                 JSON file or directory containing JSON files.\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --version         Show program's version number and exit.\n  -d DEPTH, --depth DEPTH\n                        Set minimum level of depth before generating inline \n                        YAML (default: 2).\n  -i INDENTATION, --indentation INDENTATION\n                        Number of space characters used to indent code \n                        (default: 2).\n  -s, --save            Save output inside YML file(s) with the same name.\n  -r, --recursive       If the input is a directory, also find JSON files in \n                        sub-directories recursively.\n  -w, --watch           Watch for changes.\n```\n\n**examples**\n\n``` bash\n# Convert YAML to JSON and output resulting JSON on the console\nyaml2json myfile.yml\n\n# Store output inside a JSON file\nyaml2json myfile.yml > ouput.json\n\n# Output \"pretty\" (indented) JSON\nyaml2json myfile.yml --pretty\n\n# Save the output inside a file called myfile.json\nyaml2json myfile.yml --pretty --save\n\n# Watch a full directory and convert any YAML file into its JSON equivalent\nyaml2json mydirectory --pretty --save --recursive\n\n# Convert JSON to YAML and store output inside a JSON file\njson2yaml myfile.json > ouput.yml\n\n# Output YAML that will be inlined only after 8 levels of indentation\njson2yaml myfile.json --depth 8\n\n# Save the output inside a file called myfile.json with 4 spaces for each indentation\njson2yaml myfile.json --indentation 4\n\n# Watch a full directory and convert any JSON file into its YAML equivalent\njson2yaml mydirectory --pretty --save --recursive\n```\n\nImportant\n---------\n\nSymfony dropped support for YAML 1.1 spec. This means that `yes`, `no` and similar no longer convert to their *boolean* equivalents.\n\nThe internal `Yaml().load()` and `Yaml().loadFile()` methods renamed to `Yaml().parse()` and `Yaml().parseFile()` respectively. Exceptions replaced with `YamlParseException` object.\n\n","_id":"yamljs@0.1.1","dist":{"shasum":"906f379e106fd56b11f6010bb50d5aafc27abf0b","tarball":"http://registry.npmjs.org/yamljs/-/yamljs-0.1.1.tgz"},"maintainers":[{"name":"jeremyfa","email":"contact@jeremyfa.com"}],"directories":{}},"0.1.2":{"name":"yamljs","version":"0.1.2","description":"Standalone JavaScript YAML 1.2 Parser & Encoder. Works under node.js and all major browsers. Also brings command line YAML/JSON conversion tools.","keywords":["yaml","json","yaml2json","json2yaml"],"author":{"name":"Jeremy Faivre","email":"contact@jeremyfa.com"},"main":"./bin/yaml.js","dependencies":{"argparse":"~0.1.4","glob":"~3.1.11"},"bin":{"yaml2json":"./bin/yaml2json","json2yaml":"./bin/json2yaml"},"devDependencies":{},"repository":{"type":"git","url":"git://github.com/jeremyfa/yaml.js.git"},"readme":"yaml.js\n=======\n\nStandalone JavaScript YAML 1.2 Parser & Encoder. Works under node.js and all major browsers. Also brings command line YAML/JSON conversion tools.\n\nMainly inspired from [Symfony Yaml Component](https://github.com/symfony/Yaml).\n\nHow to use\n----------\n\nImport yaml.js in your html page:\n\n``` html\n<script type=\"text/javascript\" src=\"yaml.js\"></script>\n```\n\nParse yaml string:\n\n``` js\nnativeObject = YAML.parse(yamlString);\n```\n\nDump native object into yaml string:\n\n``` js\nyamlString = YAML.stringify(nativeObject[, inline /* @integer depth to start using inline notation at */[, spaces /* @integer number of spaces to use for indentation */] ]);\n```\n\nLoad yaml file:\n\n``` js\nnativeObject = YAML.load('file.yml');\n```\n\nLoad yaml file:\n\n``` js\nYAML.load('file.yml', function(result)\n{\n    nativeObject = result;\n});\n```\n\nUse with node.js\n----------------\n\nInstall module:\n\n``` bash\nnpm install yamljs\n```\n\nUse it:\n\n``` js\nYAML = require('yamljs');\n\n// parse YAML string\nnativeObject = YAML.parse(yamlString);\n\n// Generate YAML\nyamlString = YAML.stringify(nativeObject, 4);\n\n// Load yaml file using require\nnativeObject = require('./myfile.yml');\n\n// Load yaml file using YAML.load\nnativeObject = YAML.load('myfile.yml');\n```\n\nCommand line tools\n------------------\n\nYou can enable the command line tools by installing yamljs as a global module:\n\n``` bash\nnpm install -g yamljs\n```\n\nThen, two cli commands should become available: **yaml2json** and **json2yaml**. They let you convert YAML to JSON and JSON to YAML very easily.\n\n**yaml2json**\n\n```\nusage: yaml2json [-h] [-v] [-p] [-i INDENTATION] [-s] [-r] [-w] input\n\nPositional arguments:\n  input                 YAML file or directory containing YAML files.\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --version         Show program's version number and exit.\n  -p, --pretty          Output pretty (indented) JSON.\n  -i INDENTATION, --indentation INDENTATION\n                        Number of space characters used to indent code (use \n                        with --pretty, default: 2).\n  -s, --save            Save output inside JSON file(s) with the same name.\n  -r, --recursive       If the input is a directory, also find YAML files in \n                        sub-directories recursively.\n  -w, --watch           Watch for changes.\n```\n\n**json2yaml**\n\n```\nusage: json2yaml [-h] [-v] [-d DEPTH] [-i INDENTATION] [-s] [-r] [-w] input\n\nPositional arguments:\n  input                 JSON file or directory containing JSON files.\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --version         Show program's version number and exit.\n  -d DEPTH, --depth DEPTH\n                        Set minimum level of depth before generating inline \n                        YAML (default: 2).\n  -i INDENTATION, --indentation INDENTATION\n                        Number of space characters used to indent code \n                        (default: 2).\n  -s, --save            Save output inside YML file(s) with the same name.\n  -r, --recursive       If the input is a directory, also find JSON files in \n                        sub-directories recursively.\n  -w, --watch           Watch for changes.\n```\n\n**examples**\n\n``` bash\n# Convert YAML to JSON and output resulting JSON on the console\nyaml2json myfile.yml\n\n# Store output inside a JSON file\nyaml2json myfile.yml > ouput.json\n\n# Output \"pretty\" (indented) JSON\nyaml2json myfile.yml --pretty\n\n# Save the output inside a file called myfile.json\nyaml2json myfile.yml --pretty --save\n\n# Watch a full directory and convert any YAML file into its JSON equivalent\nyaml2json mydirectory --pretty --save --recursive\n\n# Convert JSON to YAML and store output inside a JSON file\njson2yaml myfile.json > ouput.yml\n\n# Output YAML that will be inlined only after 8 levels of indentation\njson2yaml myfile.json --depth 8\n\n# Save the output inside a file called myfile.json with 4 spaces for each indentation\njson2yaml myfile.json --indentation 4\n\n# Watch a full directory and convert any JSON file into its YAML equivalent\njson2yaml mydirectory --pretty --save --recursive\n```\n\nImportant\n---------\n\nSymfony dropped support for YAML 1.1 spec. This means that `yes`, `no` and similar no longer convert to their *boolean* equivalents.\n\nThe internal `Yaml().load()` and `Yaml().loadFile()` methods renamed to `Yaml().parse()` and `Yaml().parseFile()` respectively. Exceptions replaced with `YamlParseException` object.\n\n","_id":"yamljs@0.1.2","dist":{"shasum":"d1503cac59195fde23370c623368d2e1922f664e","tarball":"http://registry.npmjs.org/yamljs/-/yamljs-0.1.2.tgz"},"maintainers":[{"name":"jeremyfa","email":"contact@jeremyfa.com"}],"directories":{}},"0.1.3":{"name":"yamljs","version":"0.1.3","description":"Standalone JavaScript YAML 1.2 Parser & Encoder. Works under node.js and all major browsers. Also brings command line YAML/JSON conversion tools.","keywords":["yaml","json","yaml2json","json2yaml"],"author":{"name":"Jeremy Faivre","email":"contact@jeremyfa.com"},"main":"./bin/yaml.js","dependencies":{"argparse":"~0.1.4","glob":"~3.1.11"},"bin":{"yaml2json":"./bin/yaml2json","json2yaml":"./bin/json2yaml"},"devDependencies":{},"repository":{"type":"git","url":"git://github.com/jeremyfa/yaml.js.git"},"readme":"yaml.js\n=======\n\nStandalone JavaScript YAML 1.2 Parser & Encoder. Works under node.js and all major browsers. Also brings command line YAML/JSON conversion tools.\n\nMainly inspired from [Symfony Yaml Component](https://github.com/symfony/Yaml).\n\nHow to use\n----------\n\nImport yaml.js in your html page:\n\n``` html\n<script type=\"text/javascript\" src=\"yaml.js\"></script>\n```\n\nParse yaml string:\n\n``` js\nnativeObject = YAML.parse(yamlString);\n```\n\nDump native object into yaml string:\n\n``` js\nyamlString = YAML.stringify(nativeObject[, inline /* @integer depth to start using inline notation at */[, spaces /* @integer number of spaces to use for indentation */] ]);\n```\n\nLoad yaml file:\n\n``` js\nnativeObject = YAML.load('file.yml');\n```\n\nLoad yaml file:\n\n``` js\nYAML.load('file.yml', function(result)\n{\n    nativeObject = result;\n});\n```\n\nUse with node.js\n----------------\n\nInstall module:\n\n``` bash\nnpm install yamljs\n```\n\nUse it:\n\n``` js\nYAML = require('yamljs');\n\n// parse YAML string\nnativeObject = YAML.parse(yamlString);\n\n// Generate YAML\nyamlString = YAML.stringify(nativeObject, 4);\n\n// Load yaml file using require\nnativeObject = require('./myfile.yml');\n\n// Load yaml file using YAML.load\nnativeObject = YAML.load('myfile.yml');\n```\n\nCommand line tools\n------------------\n\nYou can enable the command line tools by installing yamljs as a global module:\n\n``` bash\nnpm install -g yamljs\n```\n\nThen, two cli commands should become available: **yaml2json** and **json2yaml**. They let you convert YAML to JSON and JSON to YAML very easily.\n\n**yaml2json**\n\n```\nusage: yaml2json [-h] [-v] [-p] [-i INDENTATION] [-s] [-r] [-w] input\n\nPositional arguments:\n  input                 YAML file or directory containing YAML files.\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --version         Show program's version number and exit.\n  -p, --pretty          Output pretty (indented) JSON.\n  -i INDENTATION, --indentation INDENTATION\n                        Number of space characters used to indent code (use \n                        with --pretty, default: 2).\n  -s, --save            Save output inside JSON file(s) with the same name.\n  -r, --recursive       If the input is a directory, also find YAML files in \n                        sub-directories recursively.\n  -w, --watch           Watch for changes.\n```\n\n**json2yaml**\n\n```\nusage: json2yaml [-h] [-v] [-d DEPTH] [-i INDENTATION] [-s] [-r] [-w] input\n\nPositional arguments:\n  input                 JSON file or directory containing JSON files.\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --version         Show program's version number and exit.\n  -d DEPTH, --depth DEPTH\n                        Set minimum level of depth before generating inline \n                        YAML (default: 2).\n  -i INDENTATION, --indentation INDENTATION\n                        Number of space characters used to indent code \n                        (default: 2).\n  -s, --save            Save output inside YML file(s) with the same name.\n  -r, --recursive       If the input is a directory, also find JSON files in \n                        sub-directories recursively.\n  -w, --watch           Watch for changes.\n```\n\n**examples**\n\n``` bash\n# Convert YAML to JSON and output resulting JSON on the console\nyaml2json myfile.yml\n\n# Store output inside a JSON file\nyaml2json myfile.yml > ouput.json\n\n# Output \"pretty\" (indented) JSON\nyaml2json myfile.yml --pretty\n\n# Save the output inside a file called myfile.json\nyaml2json myfile.yml --pretty --save\n\n# Watch a full directory and convert any YAML file into its JSON equivalent\nyaml2json mydirectory --pretty --save --recursive\n\n# Convert JSON to YAML and store output inside a JSON file\njson2yaml myfile.json > ouput.yml\n\n# Output YAML that will be inlined only after 8 levels of indentation\njson2yaml myfile.json --depth 8\n\n# Save the output inside a file called myfile.json with 4 spaces for each indentation\njson2yaml myfile.json --indentation 4\n\n# Watch a full directory and convert any JSON file into its YAML equivalent\njson2yaml mydirectory --pretty --save --recursive\n```\n\nImportant\n---------\n\nSymfony dropped support for YAML 1.1 spec. This means that `yes`, `no` and similar no longer convert to their *boolean* equivalents.\n\nThe internal `Yaml().load()` and `Yaml().loadFile()` methods renamed to `Yaml().parse()` and `Yaml().parseFile()` respectively. Exceptions replaced with `YamlParseException` object.\n\n","_id":"yamljs@0.1.3","dist":{"shasum":"380d14382b843fe761b953cb81df759cf6aeee6a","tarball":"http://registry.npmjs.org/yamljs/-/yamljs-0.1.3.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"jeremyfa","email":"contact@jeremyfa.com"},"maintainers":[{"name":"jeremyfa","email":"contact@jeremyfa.com"}],"directories":{}},"0.1.4":{"name":"yamljs","version":"0.1.4","description":"Standalone JavaScript YAML 1.2 Parser & Encoder. Works under node.js and all major browsers. Also brings command line YAML/JSON conversion tools.","keywords":["yaml","json","yaml2json","json2yaml"],"author":{"name":"Jeremy Faivre","email":"contact@jeremyfa.com"},"main":"./bin/yaml.js","dependencies":{"argparse":"~0.1.4","glob":"~3.1.11"},"bin":{"yaml2json":"./bin/yaml2json","json2yaml":"./bin/json2yaml"},"devDependencies":{},"repository":{"type":"git","url":"git://github.com/jeremyfa/yaml.js.git"},"readme":"yaml.js\n=======\n\nStandalone JavaScript YAML 1.2 Parser & Encoder. Works under node.js and all major browsers. Also brings command line YAML/JSON conversion tools.\n\nMainly inspired from [Symfony Yaml Component](https://github.com/symfony/Yaml).\n\nHow to use\n----------\n\nImport yaml.js in your html page:\n\n``` html\n<script type=\"text/javascript\" src=\"yaml.js\"></script>\n```\n\nParse yaml string:\n\n``` js\nnativeObject = YAML.parse(yamlString);\n```\n\nDump native object into yaml string:\n\n``` js\nyamlString = YAML.stringify(nativeObject[, inline /* @integer depth to start using inline notation at */[, spaces /* @integer number of spaces to use for indentation */] ]);\n```\n\nLoad yaml file:\n\n``` js\nnativeObject = YAML.load('file.yml');\n```\n\nLoad yaml file:\n\n``` js\nYAML.load('file.yml', function(result)\n{\n    nativeObject = result;\n});\n```\n\nUse with node.js\n----------------\n\nInstall module:\n\n``` bash\nnpm install yamljs\n```\n\nUse it:\n\n``` js\nYAML = require('yamljs');\n\n// parse YAML string\nnativeObject = YAML.parse(yamlString);\n\n// Generate YAML\nyamlString = YAML.stringify(nativeObject, 4);\n\n// Load yaml file using require\nnativeObject = require('./myfile.yml');\n\n// Load yaml file using YAML.load\nnativeObject = YAML.load('myfile.yml');\n```\n\nCommand line tools\n------------------\n\nYou can enable the command line tools by installing yamljs as a global module:\n\n``` bash\nnpm install -g yamljs\n```\n\nThen, two cli commands should become available: **yaml2json** and **json2yaml**. They let you convert YAML to JSON and JSON to YAML very easily.\n\n**yaml2json**\n\n```\nusage: yaml2json [-h] [-v] [-p] [-i INDENTATION] [-s] [-r] [-w] input\n\nPositional arguments:\n  input                 YAML file or directory containing YAML files.\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --version         Show program's version number and exit.\n  -p, --pretty          Output pretty (indented) JSON.\n  -i INDENTATION, --indentation INDENTATION\n                        Number of space characters used to indent code (use \n                        with --pretty, default: 2).\n  -s, --save            Save output inside JSON file(s) with the same name.\n  -r, --recursive       If the input is a directory, also find YAML files in \n                        sub-directories recursively.\n  -w, --watch           Watch for changes.\n```\n\n**json2yaml**\n\n```\nusage: json2yaml [-h] [-v] [-d DEPTH] [-i INDENTATION] [-s] [-r] [-w] input\n\nPositional arguments:\n  input                 JSON file or directory containing JSON files.\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --version         Show program's version number and exit.\n  -d DEPTH, --depth DEPTH\n                        Set minimum level of depth before generating inline \n                        YAML (default: 2).\n  -i INDENTATION, --indentation INDENTATION\n                        Number of space characters used to indent code \n                        (default: 2).\n  -s, --save            Save output inside YML file(s) with the same name.\n  -r, --recursive       If the input is a directory, also find JSON files in \n                        sub-directories recursively.\n  -w, --watch           Watch for changes.\n```\n\n**examples**\n\n``` bash\n# Convert YAML to JSON and output resulting JSON on the console\nyaml2json myfile.yml\n\n# Store output inside a JSON file\nyaml2json myfile.yml > ouput.json\n\n# Output \"pretty\" (indented) JSON\nyaml2json myfile.yml --pretty\n\n# Save the output inside a file called myfile.json\nyaml2json myfile.yml --pretty --save\n\n# Watch a full directory and convert any YAML file into its JSON equivalent\nyaml2json mydirectory --pretty --save --recursive\n\n# Convert JSON to YAML and store output inside a JSON file\njson2yaml myfile.json > ouput.yml\n\n# Output YAML that will be inlined only after 8 levels of indentation\njson2yaml myfile.json --depth 8\n\n# Save the output inside a file called myfile.json with 4 spaces for each indentation\njson2yaml myfile.json --indentation 4\n\n# Watch a full directory and convert any JSON file into its YAML equivalent\njson2yaml mydirectory --pretty --save --recursive\n```\n\nImportant\n---------\n\nSymfony dropped support for YAML 1.1 spec. This means that `yes`, `no` and similar no longer convert to their *boolean* equivalents.\n\nThe internal `Yaml().load()` and `Yaml().loadFile()` methods renamed to `Yaml().parse()` and `Yaml().parseFile()` respectively. Exceptions replaced with `YamlParseException` object.\n\n","_id":"yamljs@0.1.4","dist":{"shasum":"665789afc2ad4b902bf403f00e85b6434e0f3300","tarball":"http://registry.npmjs.org/yamljs/-/yamljs-0.1.4.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"jeremyfa","email":"contact@jeremyfa.com"},"maintainers":[{"name":"jeremyfa","email":"contact@jeremyfa.com"}],"directories":{}}},"readme":"yaml.js\n=======\n\nStandalone JavaScript YAML 1.2 Parser & Encoder. You don't need any javascript framework to use it.\n\nMainly inspired from [Yaml Component](https://github.com/symfony/Yaml) (part of the php framework Symfony).\n\nHow to use\n----------\n\nImport yaml.js in your html page:\n\n    <script type=\"text/javascript\" src=\"yaml.js\"></script>\n\nParse yaml string:\n\n    nativeObject = YAML.parse(yamlString);\n\nDump native object into yaml string:\n\n    yamlString = YAML.stringify(nativeObject[, inline /* @integer depth to start using inline notation at */ ]);\n\nLoad yaml file:\n\n    nativeObject = YAML.load('file.yml');\n\nLoad yaml file:\n\n    YAML.load('file.yml', function(result)\n    {\n        nativeObject = result;\n    });\n\nUse with node.js\n----------------\n\nInstall module:\n\n    npm install yamljs\n\nUse it:\n\n    YAML = require('yamljs');\n    \n    // parse YAML string\n    nativeObject = YAML.parse(yamlString);\n    \n    // Generate YAML\n    yamlString = YAML.stringify(nativeObject, 4);\n    \n    // Load yaml file using require\n    nativeObject = require('./myfile.yml');\n\nImportant\n---------\n\nSymfony dropped support for YAML 1.1 spec. This means that `yes`, `no` and similar no longer convert to their *boolean* equivalents.\n\nThe internal `Yaml().load()` and `Yaml().loadFile()` methods renamed to `Yaml().parse()` and `Yaml().parseFile()` respectively. Exceptions replaced with `YamlParseException` object.\n\n","maintainers":[{"name":"jeremyfa","email":"contact@jeremyfa.com"}],"time":{"modified":"2013-01-30T11:34:55.546Z","created":"2012-08-04T01:42:21.449Z","0.1.0":"2012-08-04T01:42:22.967Z","0.1.1":"2012-08-09T09:41:25.338Z","0.1.2":"2012-08-13T22:02:54.448Z","0.1.3":"2012-09-19T16:54:01.432Z","0.1.4":"2012-12-16T22:07:49.307Z"},"author":{"name":"Jeremy Faivre","email":"contact@jeremyfa.com"},"repository":{"type":"git","url":"git://github.com/jeremyfa/yaml.js.git"},"users":{"vtsvang":true},"_attachments":{},"_etag":"\"5RUS0V5JKHGOE0K8QVCQ8O519\""}