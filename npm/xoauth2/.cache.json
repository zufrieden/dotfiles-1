{"_id":"xoauth2","_rev":"19-cb6a3b7243d4a9b4fc694cc11522a5b8","name":"xoauth2","description":"XOAuth2 token generation for accessing GMail SMTP and IMAP","dist-tags":{"latest":"0.1.8"},"versions":{"0.1.0":{"name":"xoauth2","version":"0.1.0","description":"XOAuth2 token generation for accessing GMail SMTP and IMAP","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git://github.com/andris9/xoauth2.git"},"keywords":["XOAUTH","XOAUTH2","GMail","SMTP","IMAP"],"author":{"name":"Andris Reinman"},"license":"MIT","dependencies":{"request":"*"},"readme":"xoauth2\n=======\n\nXOAuth2 token generation with node.js\n\n## Installation\n\n    npm install xoauth2\n\n## Usage\n\nxoauth2 generates XOAUTH2 login tokens from provided Client and User credentials\n\nUser xoauth2.createXOAuth2Generator(options) to initialize Token Generator\n\nPossible options values:\n\n  * **user** User e-mail address\n  * **accessUrl** Optional Endpoint for token genration (defaults to *https://accounts.google.com/o/oauth2/token*)\n  * **clientId** Client ID value\n  * **clientSecret** Client secret value\n  * **refreshToken** Refresh token for an user\n\nSee https://developers.google.com/accounts/docs/OAuth2WebServer#offline for generating the required credentials\n\n### Example\n\n    var xoauth2 = require(\"xoauth2\"),\n        xoauth2gen;\n\n    xoauth2gen = xoauth2.createXOAuth2Generator({\n        user: \"user@gmail.com\",\n        clientId: \"{Client ID}\",\n        clientId: \"{Client Secret}\",\n        refreshToken: \"{User Refresh Token}\"\n    });\n\n    xoauth2gen.getToken(function(err, token){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"Base64 encoded XOAUTH2 auth string: \" + token);\n    });\n\n## License\n\n**MIT**","_id":"xoauth2@0.1.0","dist":{"shasum":"73e7e2c82ec50556b6e9918247697abc33333a73","tarball":"http://registry.npmjs.org/xoauth2/-/xoauth2-0.1.0.tgz"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}},"0.1.1":{"name":"xoauth2","version":"0.1.1","description":"XOAuth2 token generation for accessing GMail SMTP and IMAP","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git://github.com/andris9/xoauth2.git"},"keywords":["XOAUTH","XOAUTH2","GMail","SMTP","IMAP"],"author":{"name":"Andris Reinman"},"license":"MIT","dependencies":{"request":"*"},"readme":"xoauth2\n=======\n\nXOAuth2 token generation with node.js\n\n## Installation\n\n    npm install xoauth2\n\n## Usage\n\n**xoauth2** generates XOAUTH2 login tokens from provided Client and User credentials.\n\nUse `xoauth2.createXOAuth2Generator(options)` to initialize Token Generator\n\nPossible options values:\n\n  * **user** User e-mail address\n  * **accessUrl** Optional Endpoint for token genration (defaults to *https://accounts.google.com/o/oauth2/token*)\n  * **clientId** Client ID value\n  * **clientSecret** Client secret value\n  * **refreshToken** Refresh token for an user\n  * **accessToken** Optional initial access token. If not set, a new one will be generated\n  * **timeout** Optional timeout for the initial access token\n\nSee https://developers.google.com/accounts/docs/OAuth2WebServer#offline for generating the required credentials\n\n### Methods\n\n#### Request an access token\n\nUse `xoauth2obj.getToken(callback)` to get an access token. If a cached token is found and it should not be expired yet, the\ncached value will be used.\n\n#### Request for generating a new access token\n\nUse `xoauth2obj.generateToken(callback)` to get an access token. Cache will not be used and a new token is generated.\n\n#### Update access token values\n\nUse `xoauth2obj.updateToken(accessToken, timeout)` to set the new value for the xoauth2 access token. This function emits 'token'\n\n### Events\n\nIf a new token value has been set, `'token'` event is emitted.\n\n    xoauth2obj.on(\"token\", function(token){\n        console.log(\"User: \", token.user); // e-mail address\n        console.log(\"New access token: \", token.accessToken);\n        console.log(\"New access token timeout: \", token.timeout); // timestamp in second\n    });\n\n### Example\n\n    var xoauth2 = require(\"xoauth2\"),\n        xoauth2gen;\n\n    xoauth2gen = xoauth2.createXOAuth2Generator({\n        user: \"user@gmail.com\",\n        clientId: \"{Client ID}\",\n        clientId: \"{Client Secret}\",\n        refreshToken: \"{User Refresh Token}\"\n    });\n\n    xoauth2gen.getToken(function(err, token){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"Base64 encoded XOAUTH2 auth string: \" + token);\n    });\n\n## License\n\n**MIT**","_id":"xoauth2@0.1.1","dist":{"shasum":"577ae983decf45e98ff4df2c89d0f5fcca1b9416","tarball":"http://registry.npmjs.org/xoauth2/-/xoauth2-0.1.1.tgz"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}},"0.1.2":{"name":"xoauth2","version":"0.1.2","description":"XOAuth2 token generation for accessing GMail SMTP and IMAP","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git://github.com/andris9/xoauth2.git"},"keywords":["XOAUTH","XOAUTH2","GMail","SMTP","IMAP"],"author":{"name":"Andris Reinman"},"license":"MIT","dependencies":{"request":"*"},"readme":"xoauth2\n=======\n\nXOAuth2 token generation with node.js\n\n## Installation\n\n    npm install xoauth2\n\n## Usage\n\n**xoauth2** generates XOAUTH2 login tokens from provided Client and User credentials.\n\nUse `xoauth2.createXOAuth2Generator(options)` to initialize Token Generator\n\nPossible options values:\n\n  * **user** User e-mail address\n  * **accessUrl** Optional Endpoint for token genration (defaults to *https://accounts.google.com/o/oauth2/token*)\n  * **clientId** Client ID value\n  * **clientSecret** Client secret value\n  * **refreshToken** Refresh token for an user\n  * **accessToken** Optional initial access token. If not set, a new one will be generated\n  * **timeout** Optional timeout for the initial access token\n\nSee https://developers.google.com/accounts/docs/OAuth2WebServer#offline for generating the required credentials\n\n### Methods\n\n#### Request an access token\n\nUse `xoauth2obj.getToken(callback)` to get an access token. If a cached token is found and it should not be expired yet, the\ncached value will be used.\n\n#### Request for generating a new access token\n\nUse `xoauth2obj.generateToken(callback)` to get an access token. Cache will not be used and a new token is generated.\n\n#### Update access token values\n\nUse `xoauth2obj.updateToken(accessToken, timeout)` to set the new value for the xoauth2 access token. This function emits 'token'\n\n### Events\n\nIf a new token value has been set, `'token'` event is emitted.\n\n    xoauth2obj.on(\"token\", function(token){\n        console.log(\"User: \", token.user); // e-mail address\n        console.log(\"New access token: \", token.accessToken);\n        console.log(\"New access token timeout: \", token.timeout); // timestamp in second\n    });\n\n### Example\n\n    var xoauth2 = require(\"xoauth2\"),\n        xoauth2gen;\n\n    xoauth2gen = xoauth2.createXOAuth2Generator({\n        user: \"user@gmail.com\",\n        clientId: \"{Client ID}\",\n        clientId: \"{Client Secret}\",\n        refreshToken: \"{User Refresh Token}\"\n    });\n\n    xoauth2gen.getToken(function(err, token){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"Base64 encoded XOAUTH2 auth string: \" + token);\n    });\n\n## License\n\n**MIT**","_id":"xoauth2@0.1.2","dist":{"shasum":"cbf2ecc1e08f240257965e11b3b41cec6d9e6f40","tarball":"http://registry.npmjs.org/xoauth2/-/xoauth2-0.1.2.tgz"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}},"0.1.3":{"name":"xoauth2","version":"0.1.3","description":"XOAuth2 token generation for accessing GMail SMTP and IMAP","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git://github.com/andris9/xoauth2.git"},"keywords":["XOAUTH","XOAUTH2","GMail","SMTP","IMAP"],"author":{"name":"Andris Reinman"},"license":"MIT","dependencies":{"request":"*"},"readme":"xoauth2\n=======\n\nXOAuth2 token generation with node.js\n\n## Installation\n\n    npm install xoauth2\n\n## Usage\n\n**xoauth2** generates XOAUTH2 login tokens from provided Client and User credentials.\n\nUse `xoauth2.createXOAuth2Generator(options)` to initialize Token Generator\n\nPossible options values:\n\n  * **user** User e-mail address\n  * **accessUrl** Optional Endpoint for token genration (defaults to *https://accounts.google.com/o/oauth2/token*)\n  * **clientId** Client ID value\n  * **clientSecret** Client secret value\n  * **refreshToken** Refresh token for an user\n  * **accessToken** Optional initial access token. If not set, a new one will be generated\n  * **timeout** Optional timeout for the initial access token\n\nSee https://developers.google.com/accounts/docs/OAuth2WebServer#offline for generating the required credentials\n\n### Methods\n\n#### Request an access token\n\nUse `xoauth2obj.getToken(callback)` to get an access token. If a cached token is found and it should not be expired yet, the\ncached value will be used.\n\n#### Request for generating a new access token\n\nUse `xoauth2obj.generateToken(callback)` to get an access token. Cache will not be used and a new token is generated.\n\n#### Update access token values\n\nUse `xoauth2obj.updateToken(accessToken, timeout)` to set the new value for the xoauth2 access token. This function emits 'token'\n\n### Events\n\nIf a new token value has been set, `'token'` event is emitted.\n\n    xoauth2obj.on(\"token\", function(token){\n        console.log(\"User: \", token.user); // e-mail address\n        console.log(\"New access token: \", token.accessToken);\n        console.log(\"New access token timeout: \", token.timeout); // timestamp in second\n    });\n\n### Example\n\n    var xoauth2 = require(\"xoauth2\"),\n        xoauth2gen;\n\n    xoauth2gen = xoauth2.createXOAuth2Generator({\n        user: \"user@gmail.com\",\n        clientId: \"{Client ID}\",\n        clientSecret: \"{Client Secret}\",\n        refreshToken: \"{User Refresh Token}\"\n    });\n\n    // SMTP/IMAP\n    xoauth2gen.getToken(function(err, token){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"AUTH XOAUTH2 \" + token);\n    });\n\n    // HTTP\n    xoauth2gen.getToken(function(err, token, accessToken){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"Authorization: Bearer \" + accessToken);\n    });\n\n## License\n\n**MIT**","_id":"xoauth2@0.1.3","dist":{"shasum":"4448cb94fb1032c02cb2c81e95008674dcd2d1c6","tarball":"http://registry.npmjs.org/xoauth2/-/xoauth2-0.1.3.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"andris","email":"andris@node.ee"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}},"0.1.4":{"name":"xoauth2","version":"0.1.4","description":"XOAuth2 token generation for accessing GMail SMTP and IMAP","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git://github.com/andris9/xoauth2.git"},"keywords":["XOAUTH","XOAUTH2","GMail","SMTP","IMAP"],"author":{"name":"Andris Reinman"},"license":"MIT","dependencies":{"request":"*"},"readme":"xoauth2\n=======\n\nXOAuth2 token generation with node.js\n\n## Installation\n\n    npm install xoauth2\n\n## Usage\n\n**xoauth2** generates XOAUTH2 login tokens from provided Client and User credentials.\n\nUse `xoauth2.createXOAuth2Generator(options)` to initialize Token Generator\n\nPossible options values:\n\n  * **user** User e-mail address\n  * **accessUrl** Optional Endpoint for token genration (defaults to *https://accounts.google.com/o/oauth2/token*)\n  * **clientId** Client ID value\n  * **clientSecret** Client secret value\n  * **refreshToken** Refresh token for an user\n  * **accessToken** Optional initial access token. If not set, a new one will be generated\n  * **timeout** Optional timeout for the initial access token\n\nSee https://developers.google.com/accounts/docs/OAuth2WebServer#offline for generating the required credentials\n\n### Methods\n\n#### Request an access token\n\nUse `xoauth2obj.getToken(callback)` to get an access token. If a cached token is found and it should not be expired yet, the\ncached value will be used.\n\n#### Request for generating a new access token\n\nUse `xoauth2obj.generateToken(callback)` to get an access token. Cache will not be used and a new token is generated.\n\n#### Update access token values\n\nUse `xoauth2obj.updateToken(accessToken, timeout)` to set the new value for the xoauth2 access token. This function emits 'token'\n\n### Events\n\nIf a new token value has been set, `'token'` event is emitted.\n\n    xoauth2obj.on(\"token\", function(token){\n        console.log(\"User: \", token.user); // e-mail address\n        console.log(\"New access token: \", token.accessToken);\n        console.log(\"New access token timeout: \", token.timeout); // timestamp in second\n    });\n\n### Example\n\n    var xoauth2 = require(\"xoauth2\"),\n        xoauth2gen;\n\n    xoauth2gen = xoauth2.createXOAuth2Generator({\n        user: \"user@gmail.com\",\n        clientId: \"{Client ID}\",\n        clientSecret: \"{Client Secret}\",\n        refreshToken: \"{User Refresh Token}\"\n    });\n\n    // SMTP/IMAP\n    xoauth2gen.getToken(function(err, token){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"AUTH XOAUTH2 \" + token);\n    });\n\n    // HTTP\n    xoauth2gen.getToken(function(err, token, accessToken){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"Authorization: Bearer \" + accessToken);\n    });\n\n## License\n\n**MIT**","_id":"xoauth2@0.1.4","dist":{"shasum":"e3b43347d3502dd91ecb551d4386ab62f75c226a","tarball":"http://registry.npmjs.org/xoauth2/-/xoauth2-0.1.4.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"andris","email":"andris@node.ee"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}},"0.1.5":{"name":"xoauth2","version":"0.1.5","description":"XOAuth2 token generation for accessing GMail SMTP and IMAP","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git://github.com/andris9/xoauth2.git"},"keywords":["XOAUTH","XOAUTH2","GMail","SMTP","IMAP"],"author":{"name":"Andris Reinman"},"license":"MIT","dependencies":{"request":"*"},"readme":"xoauth2\n=======\n\nXOAuth2 token generation with node.js\n\n## Installation\n\n    npm install xoauth2\n\n## Usage\n\n**xoauth2** generates XOAUTH2 login tokens from provided Client and User credentials.\n\nUse `xoauth2.createXOAuth2Generator(options)` to initialize Token Generator\n\nPossible options values:\n\n  * **user** _(Required)_ User e-mail address\n  * **accessUrl** _(Optional)_ Endpoint for token generation (defaults to *https://accounts.google.com/o/oauth2/token*)\n  * **clientId** _(Required)_ Client ID value\n  * **clientSecret** _(Required)_ Client secret value\n  * **refreshToken** _(Required)_ Refresh token for an user\n  * **accessToken** _(Optional)_ initial access token. If not set, a new one will be generated\n  * **timeout** _(Optional)_ timestamp for when the initial access token times out. In **milliseconds** after 1.1.1970.\n\nSee [https://developers.google.com/accounts/docs/OAuth2WebServer#offline]() for generating the required credentials\n\n### Methods\n\n#### Request an access token\n\nUse `xoauth2obj.getToken(callback)` to get an access token. If a cached token is found and it should not be expired yet, the cached value will be used.\n\n#### Request for generating a new access token\n\nUse `xoauth2obj.generateToken(callback)` to get an access token. Cache will not be used and a new token is generated.\n\n#### Update access token values\n\nUse `xoauth2obj.updateToken(accessToken, timeout)` to set the new value for the xoauth2 access token. This function emits 'token'\n\n### Events\n\nIf a new token value has been set, `'token'` event is emitted.\n\n    xoauth2obj.on(\"token\", function(token){\n        console.log(\"User: \", token.user); // e-mail address\n        console.log(\"New access token: \", token.accessToken);\n        console.log(\"New access token timeout: \", token.timeout); // timestamp after 1.1.1970 in seconds\n    });\n\n### Example\n\n    var xoauth2 = require(\"xoauth2\"),\n        xoauth2gen;\n\n    xoauth2gen = xoauth2.createXOAuth2Generator({\n        user: \"user@gmail.com\",\n        clientId: \"{Client ID}\",\n        clientSecret: \"{Client Secret}\",\n        refreshToken: \"{User Refresh Token}\"\n    });\n\n    // SMTP/IMAP\n    xoauth2gen.getToken(function(err, token){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"AUTH XOAUTH2 \" + token);\n    });\n\n    // HTTP\n    xoauth2gen.getToken(function(err, token, accessToken){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"Authorization: Bearer \" + accessToken);\n    });\n\n## License\n\n**MIT**","readmeFilename":"README.md","_id":"xoauth2@0.1.5","dist":{"shasum":"f476c12a13dc810e382400108dfc23f252f95690","tarball":"http://registry.npmjs.org/xoauth2/-/xoauth2-0.1.5.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"andris","email":"andris@node.ee"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}},"0.1.6":{"name":"xoauth2","version":"0.1.6","description":"XOAuth2 token generation for accessing GMail SMTP and IMAP","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git://github.com/andris9/xoauth2.git"},"keywords":["XOAUTH","XOAUTH2","GMail","SMTP","IMAP"],"author":{"name":"Andris Reinman"},"license":"MIT","readme":"xoauth2\n=======\n\nXOAuth2 token generation with node.js\n\n## Installation\n\n    npm install xoauth2\n\n## Usage\n\n**xoauth2** generates XOAUTH2 login tokens from provided Client and User credentials.\n\nUse `xoauth2.createXOAuth2Generator(options)` to initialize Token Generator\n\nPossible options values:\n\n  * **user** _(Required)_ User e-mail address\n  * **accessUrl** _(Optional)_ Endpoint for token generation (defaults to *https://accounts.google.com/o/oauth2/token*)\n  * **clientId** _(Required)_ Client ID value\n  * **clientSecret** _(Required)_ Client secret value\n  * **refreshToken** _(Required)_ Refresh token for an user\n  * **accessToken** _(Optional)_ initial access token. If not set, a new one will be generated\n  * **timeout** _(Optional)_ timestamp for when the initial access token times out. In **milliseconds** after 1.1.1970.\n\nSee [https://developers.google.com/accounts/docs/OAuth2WebServer#offline]() for generating the required credentials\n\n### Methods\n\n#### Request an access token\n\nUse `xoauth2obj.getToken(callback)` to get an access token. If a cached token is found and it should not be expired yet, the cached value will be used.\n\n#### Request for generating a new access token\n\nUse `xoauth2obj.generateToken(callback)` to get an access token. Cache will not be used and a new token is generated.\n\n#### Update access token values\n\nUse `xoauth2obj.updateToken(accessToken, timeout)` to set the new value for the xoauth2 access token. This function emits 'token'\n\n### Events\n\nIf a new token value has been set, `'token'` event is emitted.\n\n    xoauth2obj.on(\"token\", function(token){\n        console.log(\"User: \", token.user); // e-mail address\n        console.log(\"New access token: \", token.accessToken);\n        console.log(\"New access token timeout: \", token.timeout); // timestamp after 1.1.1970 in seconds\n    });\n\n### Example\n\n    var xoauth2 = require(\"xoauth2\"),\n        xoauth2gen;\n\n    xoauth2gen = xoauth2.createXOAuth2Generator({\n        user: \"user@gmail.com\",\n        clientId: \"{Client ID}\",\n        clientSecret: \"{Client Secret}\",\n        refreshToken: \"{User Refresh Token}\"\n    });\n\n    // SMTP/IMAP\n    xoauth2gen.getToken(function(err, token){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"AUTH XOAUTH2 \" + token);\n    });\n\n    // HTTP\n    xoauth2gen.getToken(function(err, token, accessToken){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"Authorization: Bearer \" + accessToken);\n    });\n\n## License\n\n**MIT**","readmeFilename":"README.md","_id":"xoauth2@0.1.6","dist":{"shasum":"d9f5101cf35e8e7f2d2406cd615e62526b449616","tarball":"http://registry.npmjs.org/xoauth2/-/xoauth2-0.1.6.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"andris","email":"andris@node.ee"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}},"0.1.7":{"name":"xoauth2","version":"0.1.7","description":"XOAuth2 token generation for accessing GMail SMTP and IMAP","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git://github.com/andris9/xoauth2.git"},"keywords":["XOAUTH","XOAUTH2","GMail","SMTP","IMAP"],"author":{"name":"Andris Reinman"},"license":"MIT","readme":"xoauth2\n=======\n\nXOAuth2 token generation with node.js\n\n## Installation\n\n    npm install xoauth2\n\n## Usage\n\n**xoauth2** generates XOAUTH2 login tokens from provided Client and User credentials.\n\nUse `xoauth2.createXOAuth2Generator(options)` to initialize Token Generator\n\nPossible options values:\n\n  * **user** _(Required)_ User e-mail address\n  * **accessUrl** _(Optional)_ Endpoint for token generation (defaults to *https://accounts.google.com/o/oauth2/token*)\n  * **clientId** _(Required)_ Client ID value\n  * **clientSecret** _(Required)_ Client secret value\n  * **refreshToken** _(Required)_ Refresh token for an user\n  * **accessToken** _(Optional)_ initial access token. If not set, a new one will be generated\n  * **timeout** _(Optional)_ timestamp for when the initial access token times out. In **milliseconds** after 1.1.1970.\n\nSee [https://developers.google.com/accounts/docs/OAuth2WebServer#offline]() for generating the required credentials\n\n### Methods\n\n#### Request an access token\n\nUse `xoauth2obj.getToken(callback)` to get an access token. If a cached token is found and it should not be expired yet, the cached value will be used.\n\n#### Request for generating a new access token\n\nUse `xoauth2obj.generateToken(callback)` to get an access token. Cache will not be used and a new token is generated.\n\n#### Update access token values\n\nUse `xoauth2obj.updateToken(accessToken, timeout)` to set the new value for the xoauth2 access token. This function emits 'token'\n\n### Events\n\nIf a new token value has been set, `'token'` event is emitted.\n\n    xoauth2obj.on(\"token\", function(token){\n        console.log(\"User: \", token.user); // e-mail address\n        console.log(\"New access token: \", token.accessToken);\n        console.log(\"New access token timeout: \", token.timeout); // timestamp after 1.1.1970 in seconds\n    });\n\n### Example\n\n    var xoauth2 = require(\"xoauth2\"),\n        xoauth2gen;\n\n    xoauth2gen = xoauth2.createXOAuth2Generator({\n        user: \"user@gmail.com\",\n        clientId: \"{Client ID}\",\n        clientSecret: \"{Client Secret}\",\n        refreshToken: \"{User Refresh Token}\"\n    });\n\n    // SMTP/IMAP\n    xoauth2gen.getToken(function(err, token){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"AUTH XOAUTH2 \" + token);\n    });\n\n    // HTTP\n    xoauth2gen.getToken(function(err, token, accessToken){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"Authorization: Bearer \" + accessToken);\n    });\n\n## License\n\n**MIT**","readmeFilename":"README.md","_id":"xoauth2@0.1.7","dist":{"shasum":"ce055d5ab904a170ca2f6aff932f063b349e3ba5","tarball":"http://registry.npmjs.org/xoauth2/-/xoauth2-0.1.7.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"andris","email":"andris@node.ee"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}},"0.1.8":{"name":"xoauth2","version":"0.1.8","description":"XOAuth2 token generation for accessing GMail SMTP and IMAP","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git://github.com/andris9/xoauth2.git"},"keywords":["XOAUTH","XOAUTH2","GMail","SMTP","IMAP"],"author":{"name":"Andris Reinman"},"license":"MIT","readme":"xoauth2\n=======\n\nXOAuth2 token generation with node.js\n\n## Installation\n\n    npm install xoauth2\n\n## Usage\n\n**xoauth2** generates XOAUTH2 login tokens from provided Client and User credentials.\n\nUse `xoauth2.createXOAuth2Generator(options)` to initialize Token Generator\n\nPossible options values:\n\n  * **user** _(Required)_ User e-mail address\n  * **accessUrl** _(Optional)_ Endpoint for token generation (defaults to *https://accounts.google.com/o/oauth2/token*)\n  * **clientId** _(Required)_ Client ID value\n  * **clientSecret** _(Required)_ Client secret value\n  * **refreshToken** _(Required)_ Refresh token for an user\n  * **accessToken** _(Optional)_ initial access token. If not set, a new one will be generated\n  * **timeout** _(Optional)_ timestamp for when the initial access token times out. In **milliseconds** after 1.1.1970.\n\nSee [https://developers.google.com/accounts/docs/OAuth2WebServer#offline]() for generating the required credentials\n\n### Methods\n\n#### Request an access token\n\nUse `xoauth2obj.getToken(callback)` to get an access token. If a cached token is found and it should not be expired yet, the cached value will be used.\n\n#### Request for generating a new access token\n\nUse `xoauth2obj.generateToken(callback)` to get an access token. Cache will not be used and a new token is generated.\n\n#### Update access token values\n\nUse `xoauth2obj.updateToken(accessToken, timeout)` to set the new value for the xoauth2 access token. This function emits 'token'\n\n### Events\n\nIf a new token value has been set, `'token'` event is emitted.\n\n    xoauth2obj.on(\"token\", function(token){\n        console.log(\"User: \", token.user); // e-mail address\n        console.log(\"New access token: \", token.accessToken);\n        console.log(\"New access token timeout: \", token.timeout); // timestamp after 1.1.1970 in seconds\n    });\n\n### Example\n\n    var xoauth2 = require(\"xoauth2\"),\n        xoauth2gen;\n\n    xoauth2gen = xoauth2.createXOAuth2Generator({\n        user: \"user@gmail.com\",\n        clientId: \"{Client ID}\",\n        clientSecret: \"{Client Secret}\",\n        refreshToken: \"{User Refresh Token}\"\n    });\n\n    // SMTP/IMAP\n    xoauth2gen.getToken(function(err, token){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"AUTH XOAUTH2 \" + token);\n    });\n\n    // HTTP\n    xoauth2gen.getToken(function(err, token, accessToken){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"Authorization: Bearer \" + accessToken);\n    });\n\n## License\n\n**MIT**","readmeFilename":"README.md","_id":"xoauth2@0.1.8","dist":{"shasum":"b916ff10ecfb54320f16f24a3e975120653ab0d2","tarball":"http://registry.npmjs.org/xoauth2/-/xoauth2-0.1.8.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"andris","email":"andris@node.ee"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}}},"readme":"xoauth2\n=======\n\nXOAuth2 token generation with node.js\n\n## Installation\n\n    npm install xoauth2\n\n## Usage\n\nxoauth2 generates XOAUTH2 login tokens from provided Client and User credentials\n\nUser xoauth2.createXOAuth2Generator(options) to initialize Token Generator\n\nPossible options values:\n\n  * **user** User e-mail address\n  * **accessUrl** Optional Endpoint for token genration (defaults to *https://accounts.google.com/o/oauth2/token*)\n  * **clientId** Client ID value\n  * **clientSecret** Client secret value\n  * **refreshToken** Refresh token for an user\n\nSee https://developers.google.com/accounts/docs/OAuth2WebServer#offline for generating the required credentials\n\n### Example\n\n    var xoauth2 = require(\"xoauth2\"),\n        xoauth2gen;\n\n    xoauth2gen = xoauth2.createXOAuth2Generator({\n        user: \"user@gmail.com\",\n        clientId: \"{Client ID}\",\n        clientId: \"{Client Secret}\",\n        refreshToken: \"{User Refresh Token}\"\n    });\n\n    xoauth2gen.getToken(function(err, token){\n        if(err){\n            return console.log(err);\n        }\n        console.log(\"Base64 encoded XOAUTH2 auth string: \" + token);\n    });\n\n## License\n\n**MIT**","maintainers":[{"name":"andris","email":"andris@node.ee"}],"time":{"0.1.0":"2012-09-10T10:02:23.639Z","0.1.1":"2012-09-10T13:56:50.924Z","0.1.2":"2012-09-18T11:04:30.936Z","0.1.3":"2012-10-09T08:23:04.160Z","0.1.4":"2012-12-04T09:20:09.271Z","0.1.5":"2013-01-28T13:47:19.873Z","0.1.6":"2013-02-25T14:14:50.685Z","0.1.7":"2013-03-12T07:52:55.720Z","0.1.8":"2013-05-02T08:14:07.643Z"},"author":{"name":"Andris Reinman"},"repository":{"type":"git","url":"git://github.com/andris9/xoauth2.git"},"_attachments":{},"_etag":"\"3RV687YCJMOCWYORX7SSBIW5Y\""}