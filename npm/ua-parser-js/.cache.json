{"_id":"ua-parser-js","_rev":"48-f13c7c6eff913fae653875b85f4884fb","name":"ua-parser-js","description":"Lightweight JavaScript-based user-agent string parser","dist-tags":{"latest":"0.6.2"},"versions":{"0.3.0":{"title":"UA-Parser.js","name":"ua-parser-js","version":"0.3.0","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent parser","keywords":["user-agent","parser","browser","engine","os","device"],"homepage":"http://faisalman.github.com/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"}],"main":"ua-parser","repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"repository":"git://github.com/faisalman/ua-parser-js.git","_id":"ua-parser-js@0.3.0","_engineSupported":true,"_npmVersion":"0.2.19","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"5625ecb6ab14a0bdad563b004000acf4d73d2012","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.3.0.tgz"},"maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.3.1":{"title":"UA-Parser.js","name":"ua-parser-js","version":"0.3.1","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"}],"main":"ua-parser","repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.3.1","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"6989d9d92dae89fc842d58b1380a7c00b631aefc","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.3.1.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.4.0":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.4.0","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"}],"main":"ua-parser","repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.4.0","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"6a0d6f54780241d00aa61dd9fa7fee5d6fa44b10","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.4.0.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.4.1":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.4.1","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"}],"main":"ua-parser","repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.4.1","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"73109774bc5f412732b6b42b3a62854f4bcd42a2","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.4.1.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.4.3":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.4.3","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"}],"main":"ua-parser","repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.4.3","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"64706ae506a0339a27e735988f958534ff77f7bc","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.4.3.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.4.4":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.4.4","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"}],"main":"ua-parser","repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.4.4","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"ae24adb98af19db10fa23896df0210a4f9450685","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.4.4.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.4.6":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.4.6","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"}],"main":"ua-parser","repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.4.6","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"64c4ba59f62b7e47307d1c849b0b9301c364a6a3","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.4.6.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.4.7":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.4.7","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"}],"main":"ua-parser","repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.4.7","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"2441f58d0c6304645ca256f8978f0755cb4d4fa8","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.4.7.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.4.13":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.4.13","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"}],"main":"ua-parser","scripts":{"test":"./node_modules/mocha/bin/mocha"},"devDependencies":{"mocha":">= 1.7.1"},"repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.4.13","dependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"a0d4a43ec3b5aa2640c4781182df800f76233948","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.4.13.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.4.15":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.4.15","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"}],"main":"ua-parser","scripts":{"test":"./node_modules/mocha/bin/mocha -R spec","pretest":"./node_modules/uglify-js/bin/uglifyjs ua-parser.js > ua-parser.min.js"},"devDependencies":{"mocha":">= 1.7.1","uglify-js":">= 1.3.4"},"repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.4.15","dependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"9bc366992e489c5e3723ffd5f2d6475905f2095f","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.4.15.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.5.1":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.5.1","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"}],"main":"ua-parser","scripts":{"test":"./node_modules/mocha/bin/mocha -R spec","pretest":"./node_modules/uglify-js/bin/uglifyjs ua-parser.js > ua-parser.min.js"},"devDependencies":{"mocha":">= 1.7.1","uglify-js":">= 1.3.4"},"repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.5.1","dependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"1b80d1a90be5f902c00a70ba44bb57e1ed8c80d6","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.5.1.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.5.2":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.5.2","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"}],"main":"ua-parser","scripts":{"test":"./node_modules/mocha/bin/mocha -R spec","pretest":"./node_modules/uglify-js/bin/uglifyjs ua-parser.js > ua-parser.min.js"},"devDependencies":{"mocha":">= 1.7.1","uglify-js":">= 1.3.4"},"repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.5.2","dependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"e70129d8d13203a721ea43a8c94536f9563b6e6d","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.5.2.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.5.3":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.5.3","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"},{"name":"Christopher De Cairos","email":"chris.decairos@gmail.com"},{"name":"John Tantalo","email":"john.tantalo@gmail.com"},{"name":"Lee Treveil","email":"leetreveil@gmail.com"}],"main":"ua-parser","scripts":{"test":"./node_modules/mocha/bin/mocha -R spec","pretest":"./node_modules/uglify-js/bin/uglifyjs ua-parser.js > ua-parser.min.js"},"devDependencies":{"mocha":">= 1.7.1","uglify-js":">= 1.3.4"},"repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.5.3","dependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"d0fe8b13253af9e06a27090ead03b088b9b43147","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.5.3.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.5.11":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.5.11","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user-agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"},{"name":"Christopher De Cairos","email":"chris.decairos@gmail.com"},{"name":"John Tantalo","email":"john.tantalo@gmail.com"},{"name":"Lee Treveil","email":"leetreveil@gmail.com"}],"main":"ua-parser","scripts":{"test":"./node_modules/mocha/bin/mocha -R spec","pretest":"./node_modules/uglify-js/bin/uglifyjs ua-parser.js > ua-parser.min.js"},"devDependencies":{"mocha":">= 1.7.1","uglify-js":">= 1.3.4"},"repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.5.11","dependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"81cd35530578948b3745d629d2f9e71869b420ee","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.5.11.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.5.12":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.5.12","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user-agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"},{"name":"Christopher De Cairos","email":"chris.decairos@gmail.com"},{"name":"John Tantalo","email":"john.tantalo@gmail.com"},{"name":"Jon Buckley","email":"jon@jbuckley.ca"},{"name":"Lee Treveil","email":"leetreveil@gmail.com"}],"main":"ua-parser","scripts":{"test":"./node_modules/mocha/bin/mocha -R spec","pretest":"./node_modules/uglify-js/bin/uglifyjs ua-parser.js > ua-parser.min.js"},"devDependencies":{"mocha":">= 1.7.1","uglify-js":">= 1.3.4"},"repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.5.12","dependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"0ec2240be9ce9159a275738394603b0d0e983350","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.5.12.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.5.15":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.5.15","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user-agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"},{"name":"Christopher De Cairos","email":"chris.decairos@gmail.com"},{"name":"John Tantalo","email":"john.tantalo@gmail.com"},{"name":"Jon Buckley","email":"jon@jbuckley.ca"},{"name":"Lee Treveil","email":"leetreveil@gmail.com"}],"main":"ua-parser","scripts":{"test":"./node_modules/mocha/bin/mocha -R spec","pretest":"./node_modules/uglify-js/bin/uglifyjs ua-parser.js > ua-parser.min.js"},"devDependencies":{"mocha":">= 1.7.1","uglify-js":">= 1.3.4"},"repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"."},"files":[""],"_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"_id":"ua-parser-js@0.5.15","dependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"435c26b815745102aaf2fb577b3917e43cd0e0ef","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.5.15.tgz"},"readme":"","maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.5.20":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.5.20","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user-agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"},{"name":"Christopher De Cairos","email":"chris.decairos@gmail.com"},{"name":"John Tantalo","email":"john.tantalo@gmail.com"},{"name":"Jon Buckley","email":"jon@jbuckley.ca"},{"name":"Lee Treveil","email":"leetreveil@gmail.com"}],"main":"ua-parser","scripts":{"test":"./node_modules/mocha/bin/mocha -R spec"},"devDependencies":{"jshint":">= 1.1.0","mocha":">= 1.7.1","uglify-js":">= 1.3.4"},"repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"src","test":"test"},"files":[""],"readme":"# UAParser.js\n\nLightweight JavaScript-based User-Agent string parser. Supports browser & node.js environment. Also available as Component package, Bower package, jQuery.ua, & AMD module\n\n[![Build Status](https://travis-ci.org/faisalman/ua-parser-js.png)](https://travis-ci.org/faisalman/ua-parser-js)\n\n* Author    : Faisalman <<fyzlman@gmail.com>>\n* Demo      : http://faisalman.github.com/ua-parser-js\n* Source    : https://github.com/faisalman/ua-parser-js\n\n## Features\n\nExtract detailed type of web browser, layout engine, operating system, and device purely from user-agent string with relatively lightweight footprint (~7KB minified / ~3KB gzipped). Written in vanilla js, which means it doesn't depends on any other library.\n\n![It's over 9000](https://pbs.twimg.com/media/A9LpEG6CIAA5VrT.jpg)\n\n## Methods\n\n* `getBrowser()`\n    * returns `{ name: '', major: '', version: '' }`\n\n```\n# Possible 'browser.name':\nAmaya, Arora, Avant, Baidu, Blazer, Bolt, Camino, Chimera, Chrome, Chromium, Comodo Dragon, Conkeror, \nDillo, Dolphin, Doris, Epiphany, Fennec, Firebird, Firefox, Flock, GoBrowser, iCab, ICE Browser, IceApe, IceCat, \nIceweasel, IE [Mobile], Jasmine, K-Meleon, Konqueror, Kindle, Links, Lunascape, Lynx, Maemo, Maxthon, Midori, Minimo, \n[Mobile] Safari, Mosaic, Mozilla, Netfront, Netscape, NetSurf, Nokia, OmniWeb, Opera [Mini/Mobi/Tablet], Phoenix, \nPolaris, RockMelt, Silk, Skyfire, SeaMonkey, SlimBrowser, Swiftfox, Tizen, UCBrowser, w3m, Yandex\n```\n\n* `getDevice()`\n    * returns `{ model: '', type: '', vendor: '' }` \n\n```\n# Possible 'device.type':\nconsole, mobile, tablet\n\n# Possible 'device.vendor':\nAcer, Alcatel, Apple, Asus, BenQ, BlackBerry, Dell, GeeksPhone, HP, HTC, Huawei, Lenovo, LG, Meizu, Motorola, Nexian, \nNintendo, Nokia, Palm, Panasonic, RIM, Samsung, Siemens, Sony-Ericsson, Sprint, ZTE\n```\n\n* `getEngine()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'engine.name'\nAmaya, Gecko, iCab, KHTML, Links, Lynx, NetFront, NetSurf, Presto, Tasman, Trident, w3m, WebKit\n```\n\n* `getOS()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'os.name'\nAIX, Amiga OS, Android, Arch, Bada, BeOS, BlackBerry, CentOS, Chromium OS, Fedora, Firefox OS, FreeBSD, Debian, \nDragonFly, Gentoo, GNU, Haiku, Hurd, iOS, Joli, Linux, Mac OS, Mandriva, MeeGo, Minix, Mint, Morph OS, NetBSD, \nNintendo, OpenBSD, OS/2, Palm, PCLinuxOS, Plan9, Playstation, QNX, RedHat, RIM Tablet OS, RISC OS, Slackware, \nSolaris, SUSE, Symbian, Tizen, Ubuntu, UNIX, WebOS, Windows [Phone/Mobile], Zenwalk\n```\n\n* `getResult()`\n    * returns `{ browser: {}, device: {}, engine: {}, os: {} }`\n\n* `getUA()`\n    * returns UA string of current instance\n\n* `setUA(uastring)`\n    * set & parse UA string\n\n## Example\n\n```html\n<!doctype html>\n<html>\n<head>\n<script type=\"text/javascript\" src=\"ua-parser.min.js\"></script>\n<script type=\"text/javascript\">\n\n\tvar parser = new UAParser();\n\n    // by default it takes ua string from current browser's window.navigator.userAgent\n    console.log(parser.getResult());\n    /*\n        /// this will print an object structured like this:\n        {\n            browser: {\n                name: \"\",\n                version: \"\",\n                major: \"\"\n            },\n            engine: {\n                name: \"\",\n                version: \"\"\n            },\n            os: {\n                name: \"\",\n                version: \"\"\n            },\n            device: {\n                model: \"\",\n                type: \"\",\n                vendor: \"\"\n            }\n        }\n    */\n\n    // let's test a custom user-agent string as an example\n    var uastring = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.2 (KHTML, like Gecko) Ubuntu/11.10 Chromium/15.0.874.106 Chrome/15.0.874.106 Safari/535.2\";\n    parser.setUA(uastring);\n\n    var result = parser.getResult();\n    // this will also produce the same result (without instantiation):\n    // var result = UAParser(uastring);\n\n    console.log(result.browser);        // {name: \"Chromium\", major: \"15\", version: \"15.0.874.106\"}\n    console.log(result.device);         // {model: undefined, type: undefined, vendor: undefined}\n    console.log(result.os);             // {name: \"Ubuntu\", version: \"11.10\"}\n    console.log(result.os.version);     // \"11.10\"\n    console.log(result.engine.name);    // \"WebKit\"\n\n    // do some other tests\n    var uastring2 = \"Mozilla/5.0 (compatible; Konqueror/4.1; OpenBSD) KHTML/4.1.4 (like Gecko)\";\n    console.log(parser.setUA(uastring2).getBrowser().name); // \"Konqueror\"\n    console.log(parser.getOS());                            // {name: \"OpenBSD\", version: undefined}\n    console.log(parser.getEngine());                        // {name: \"KHTML\", version: \"4.1.4\"}\n\n    var uastring3 = 'Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.11 (KHTML, like Gecko) Version/7.1.0.7 Safari/534.11';\n    console.log(parser.setUA(uastring3).getDevice().model); // \"PlayBook\"\n    console.log(parser.getOS())                             // {name: \"RIM Tablet OS\", version: \"1.0.0\"}\n    console.log(parser.getBrowser().name);                  // \"Safari\"\n\n</script>\n</head>\n<body>\n</body>\n</html>\n```\n\n## Using requirejs\n\n```js\nrequire(['ua-parser'], function(UAParser) {\n    var parser = new UAParser();\n    console.log(parser.getResult());\n});\n```\n\n## Using node.js\n\n```sh\n$ npm install ua-parser-js\n```\n\n```js\nvar UAParser = require('ua-parser');\nvar parser = new UAParser();\nconsole.log(parser.getResult());\n```\n\n## Using component\n\n```sh\n$ component install faisalman/ua-parser-js\n```\n\n```js\nvar UAParser = require('ua-parser-js');\nvar parser = new UAParser();\nconsole.log(parser.getResult());\n```\n\n## Using bower\n\n```sh\n$ bower install ua-parser-js\n```\n\n## Using jQuery.ua\n\nAlthough written in vanilla js (which means it doesn't depends on jQuery), if you're using jQuery, this library will automatically detect and create `$.ua` object based on browser's user-agent. In case you need, `UAParser` constructor is still present in global though. To get/set user-agent you can use: `$.ua.get()` / `$.ua.set(uastring)`. \n\n```js\n// In browser with default user-agent: 'Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0':\n\n// Do some tests\nconsole.log($.ua.device);           // {vendor: \"HTC\", model: \"Evo Shift 4G\", type: \"mobile\"}\nconsole.log($.ua.os);               // {name: \"Android\", version: \"2.3.4\"}\nconsole.log($.ua.os.name);          // \"Android\"\nconsole.log($.ua.get());            // \"Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0\"\n\n// reset to custom user-agent\n$.ua.set('Mozilla/5.0 (Linux; U; Android 3.0.1; en-us; Xoom Build/HWI69) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13');\n\n// Test again\nconsole.log($.ua.device);           // {vendor: \"Motorola\", model: \"Xoom\", type: \"tablet\"}\nconsole.log($.ua.engine.name);      // \"Webkit\"\nconsole.log($.ua.browser.version);  // \"4.0\"\nconsole.log(parseInt($.ua.browser.version.split('.')[0], 10));  // 4\n```\n\n## Development\n\nInstall dependencies\n\n```sh\n$ npm install jshint\n$ npm install mocha\n$ npm install uglify-js\n```\n\nVerify, test, & minify script\n\n```sh\n$ ./build/build.sh\n```\n\n## License\n\nDual licensed under GPLv2 & MIT\n\nCopyright © 2012-2013 Faisalman <<fyzlman@gmail.com>>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to use, \ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the \nSoftware, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n","readmeFilename":"readme.md","_id":"ua-parser-js@0.5.20","dist":{"shasum":"b7dc9e8603c5948e42b3134b08c7d6f1d987f8d9","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.5.20.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.5.22":{"title":"UA-Parser.JS","name":"ua-parser-js","version":"0.5.22","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user-agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"},{"name":"Christopher De Cairos","email":"chris.decairos@gmail.com"},{"name":"John Tantalo","email":"john.tantalo@gmail.com"},{"name":"Jon Buckley","email":"jon@jbuckley.ca"},{"name":"Lee Treveil","email":"leetreveil@gmail.com"}],"main":"ua-parser","scripts":{"test":"./build/build.sh"},"devDependencies":{"jshint":">= 1.1.0","mocha":">= 1.7.1","uglify-js":">= 1.3.4"},"repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"src","test":"test"},"files":[""],"readme":"# UAParser.js\n\nLightweight JavaScript-based User-Agent string parser. Supports browser & node.js environment. Also available as Component package, Bower package, jQuery.ua, & AMD module\n\n[![Build Status](https://travis-ci.org/faisalman/ua-parser-js.png?branch=master)](https://travis-ci.org/faisalman/ua-parser-js)\n\n* Author    : Faisalman <<fyzlman@gmail.com>>\n* Demo      : http://faisalman.github.com/ua-parser-js\n* Source    : https://github.com/faisalman/ua-parser-js\n\n## Features\n\nExtract detailed type of web browser, layout engine, operating system, and device purely from user-agent string with relatively lightweight footprint (~7KB minified / ~3KB gzipped). Written in vanilla js, which means it doesn't depends on any other library.\n\n![It's over 9000](https://pbs.twimg.com/media/A9LpEG6CIAA5VrT.jpg)\n\n## Methods\n\n* `getBrowser()`\n    * returns `{ name: '', major: '', version: '' }`\n\n```\n# Possible 'browser.name':\nAmaya, Arora, Avant, Baidu, Blazer, Bolt, Camino, Chimera, Chrome, Chromium, \nComodo Dragon, Conkeror, Dillo, Dolphin, Doris, Epiphany, Fennec, Firebird, \nFirefox, Flock, GoBrowser, iCab, ICE Browser, IceApe, IceCat, Iceweasel, \nIE [Mobile], Jasmine, K-Meleon, Konqueror, Kindle, Links, Lunascape, Lynx, Maemo, \nMaxthon, Midori, Minimo, [Mobile] Safari, Mosaic, Mozilla, Netfront, Netscape, \nNetSurf, Nokia, OmniWeb, Opera [Mini/Mobi/Tablet], Phoenix, Polaris, RockMelt, \nSilk, Skyfire, SeaMonkey, SlimBrowser, Swiftfox, Tizen, UCBrowser, w3m, Yandex\n\n# 'browser.version' & 'browser.major' determined dynamically\n```\n\n* `getDevice()`\n    * returns `{ model: '', type: '', vendor: '' }` \n\n```\n# Possible 'device.type':\nconsole, mobile, tablet\n\n# Possible 'device.vendor':\nAcer, Alcatel, Apple, Asus, BenQ, BlackBerry, Dell, GeeksPhone, HP, HTC, Huawei, \nLenovo, LG, Meizu, Motorola, Nexian, Nintendo, Nokia, Palm, Panasonic, \nRIM, Samsung, Siemens, Sony-Ericsson, Sprint, ZTE\n\n# 'device.model' determined dynamically\n```\n\n* `getEngine()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'engine.name'\nAmaya, Gecko, iCab, KHTML, Links, Lynx, NetFront, NetSurf, Presto, Tasman, \nTrident, w3m, WebKit\n\n# 'engine.version' determined dynamically\n```\n\n* `getOS()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'os.name'\nAIX, Amiga OS, Android, Arch, Bada, BeOS, BlackBerry, CentOS, Chromium OS, \nFedora, Firefox OS, FreeBSD, Debian, DragonFly, Gentoo, GNU, Haiku, Hurd, iOS, \nJoli, Linux, Mac OS, Mandriva, MeeGo, Minix, Mint, Morph OS, NetBSD, Nintendo, \nOpenBSD, OS/2, Palm, PCLinuxOS, Plan9, Playstation, QNX, RedHat, RIM Tablet OS, \nRISC OS, Slackware, Solaris, SUSE, Symbian, Tizen, Ubuntu, UNIX, WebOS, \nWindows [Phone/Mobile], Zenwalk\n\n# 'os.version' determined dynamically\n```\n\n* `getResult()`\n    * returns `{ browser: {}, device: {}, engine: {}, os: {} }`\n* `getUA()`\n    * returns UA string of current instance\n* `setUA(uastring)`\n    * set & parse UA string\n\n## Example\n\n```html\n<!doctype html>\n<html>\n<head>\n<script type=\"text/javascript\" src=\"ua-parser.min.js\"></script>\n<script type=\"text/javascript\">\n\n\tvar parser = new UAParser();\n\n    // by default it takes ua string from current browser's window.navigator.userAgent\n    console.log(parser.getResult());\n    /*\n        /// this will print an object structured like this:\n        {\n            browser: {\n                name: \"\",\n                version: \"\",\n                major: \"\"\n            },\n            engine: {\n                name: \"\",\n                version: \"\"\n            },\n            os: {\n                name: \"\",\n                version: \"\"\n            },\n            device: {\n                model: \"\",\n                type: \"\",\n                vendor: \"\"\n            }\n        }\n    */\n\n    // let's test a custom user-agent string as an example\n    var uastring = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.2 (KHTML, like Gecko) Ubuntu/11.10 Chromium/15.0.874.106 Chrome/15.0.874.106 Safari/535.2\";\n    parser.setUA(uastring);\n\n    var result = parser.getResult();\n    // this will also produce the same result (without instantiation):\n    // var result = UAParser(uastring);\n\n    console.log(result.browser);        // {name: \"Chromium\", major: \"15\", version: \"15.0.874.106\"}\n    console.log(result.device);         // {model: undefined, type: undefined, vendor: undefined}\n    console.log(result.os);             // {name: \"Ubuntu\", version: \"11.10\"}\n    console.log(result.os.version);     // \"11.10\"\n    console.log(result.engine.name);    // \"WebKit\"\n\n    // do some other tests\n    var uastring2 = \"Mozilla/5.0 (compatible; Konqueror/4.1; OpenBSD) KHTML/4.1.4 (like Gecko)\";\n    console.log(parser.setUA(uastring2).getBrowser().name); // \"Konqueror\"\n    console.log(parser.getOS());                            // {name: \"OpenBSD\", version: undefined}\n    console.log(parser.getEngine());                        // {name: \"KHTML\", version: \"4.1.4\"}\n\n    var uastring3 = 'Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.11 (KHTML, like Gecko) Version/7.1.0.7 Safari/534.11';\n    console.log(parser.setUA(uastring3).getDevice().model); // \"PlayBook\"\n    console.log(parser.getOS())                             // {name: \"RIM Tablet OS\", version: \"1.0.0\"}\n    console.log(parser.getBrowser().name);                  // \"Safari\"\n\n</script>\n</head>\n<body>\n</body>\n</html>\n```\n\n### Using requirejs\n\n```js\nrequire(['ua-parser'], function(UAParser) {\n    var parser = new UAParser();\n    console.log(parser.getResult());\n});\n```\n\n### Using node.js\n\n```sh\n$ npm install ua-parser-js\n```\n\n```js\nvar UAParser = require('ua-parser');\nvar parser = new UAParser();\nconsole.log(parser.getResult());\n```\n\n### Using component\n\n```sh\n$ component install faisalman/ua-parser-js\n```\n\n```js\nvar UAParser = require('ua-parser-js');\nvar parser = new UAParser();\nconsole.log(parser.getResult());\n```\n\n### Using bower\n\n```sh\n$ bower install ua-parser-js\n```\n\n### Using jQuery.ua\n\nAlthough written in vanilla js (which means it doesn't depends on jQuery), if you're using jQuery, this library will automatically detect and create `$.ua` object based on browser's user-agent. In case you need, `UAParser` constructor is still present in global though. To get/set user-agent you can use: `$.ua.get()` / `$.ua.set(uastring)`. \n\n```js\n// In browser with default user-agent: 'Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0':\n\n// Do some tests\nconsole.log($.ua.device);           // {vendor: \"HTC\", model: \"Evo Shift 4G\", type: \"mobile\"}\nconsole.log($.ua.os);               // {name: \"Android\", version: \"2.3.4\"}\nconsole.log($.ua.os.name);          // \"Android\"\nconsole.log($.ua.get());            // \"Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0\"\n\n// reset to custom user-agent\n$.ua.set('Mozilla/5.0 (Linux; U; Android 3.0.1; en-us; Xoom Build/HWI69) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13');\n\n// Test again\nconsole.log($.ua.browser.name);     // \"Safari\"\nconsole.log($.ua.engine.name);      // \"Webkit\"\nconsole.log($.ua.device);           // {vendor: \"Motorola\", model: \"Xoom\", type: \"tablet\"}\nconsole.log(parseInt($.ua.browser.version.split('.')[0], 10));  // 4\n```\n\n## Development\n\nInstall dependencies\n\n```sh\n$ npm install jshint\n$ npm install mocha\n$ npm install uglify-js\n```\n\nVerify, test, & minify script\n\n```sh\n$ ./build/build.sh\n```\n\n## License\n\nDual licensed under GPLv2 & MIT\n\nCopyright © 2012-2013 Faisalman <<fyzlman@gmail.com>>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to use, \ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the \nSoftware, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n","readmeFilename":"readme.md","_id":"ua-parser-js@0.5.22","dist":{"shasum":"13b1e88d4b2913464c34c1c089d1e2ebb707f8a0","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.5.22.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.5.23":{"title":"UAParser.js","name":"ua-parser-js","version":"0.5.23","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user-agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"},{"name":"Christopher De Cairos","email":"chris.decairos@gmail.com"},{"name":"John Tantalo","email":"john.tantalo@gmail.com"},{"name":"Jon Buckley","email":"jon@jbuckley.ca"},{"name":"Lee Treveil","email":"leetreveil@gmail.com"}],"main":"src/ua-parser.js","scripts":{"test":"./build/build.sh"},"devDependencies":{"jshint":">= 1.1.0","mocha":">= 1.7.1","uglify-js":">= 1.3.4"},"repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"src","test":"test"},"files":[""],"readme":"# UAParser.js\n\nLightweight JavaScript-based User-Agent string parser. Supports browser & node.js environment. Also available as Component package, Bower package, jQuery.ua, & AMD module\n\n[![Build Status](https://travis-ci.org/faisalman/ua-parser-js.png?branch=master)](https://travis-ci.org/faisalman/ua-parser-js)\n\n* Author    : Faisalman <<fyzlman@gmail.com>>\n* Demo      : http://faisalman.github.com/ua-parser-js\n* Source    : https://github.com/faisalman/ua-parser-js\n\n## Features\n\nExtract detailed type of web browser, layout engine, operating system, and device purely from user-agent string with relatively lightweight footprint (~7KB minified / ~3KB gzipped). Written in vanilla js, which means it doesn't depends on any other library.\n\n![It's over 9000](https://pbs.twimg.com/media/A9LpEG6CIAA5VrT.jpg)\n\n## Methods\n\n* `getBrowser()`\n    * returns `{ name: '', major: '', version: '' }`\n\n```\n# Possible 'browser.name':\nAmaya, Arora, Avant, Baidu, Blazer, Bolt, Camino, Chimera, Chrome, Chromium, \nComodo Dragon, Conkeror, Dillo, Dolphin, Doris, Epiphany, Fennec, Firebird, \nFirefox, Flock, GoBrowser, iCab, ICE Browser, IceApe, IceCat, Iceweasel, \nIE [Mobile], Jasmine, K-Meleon, Konqueror, Kindle, Links, Lunascape, Lynx, Maemo, \nMaxthon, Midori, Minimo, [Mobile] Safari, Mosaic, Mozilla, Netfront, Netscape, \nNetSurf, Nokia, OmniWeb, Opera [Mini/Mobi/Tablet], Phoenix, Polaris, RockMelt, \nSilk, Skyfire, SeaMonkey, SlimBrowser, Swiftfox, Tizen, UCBrowser, w3m, Yandex\n\n# 'browser.version' & 'browser.major' determined dynamically\n```\n\n* `getDevice()`\n    * returns `{ model: '', type: '', vendor: '' }` \n\n```\n# Possible 'device.type':\nconsole, mobile, tablet\n\n# Possible 'device.vendor':\nAcer, Alcatel, Apple, Asus, BenQ, BlackBerry, Dell, GeeksPhone, HP, HTC, Huawei, \nLenovo, LG, Meizu, Motorola, Nexian, Nintendo, Nokia, Palm, Panasonic, \nRIM, Samsung, Siemens, Sony-Ericsson, Sprint, ZTE\n\n# 'device.model' determined dynamically\n```\n\n* `getEngine()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'engine.name'\nAmaya, Gecko, iCab, KHTML, Links, Lynx, NetFront, NetSurf, Presto, Tasman, \nTrident, w3m, WebKit\n\n# 'engine.version' determined dynamically\n```\n\n* `getOS()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'os.name'\nAIX, Amiga OS, Android, Arch, Bada, BeOS, BlackBerry, CentOS, Chromium OS, \nFedora, Firefox OS, FreeBSD, Debian, DragonFly, Gentoo, GNU, Haiku, Hurd, iOS, \nJoli, Linux, Mac OS, Mandriva, MeeGo, Minix, Mint, Morph OS, NetBSD, Nintendo, \nOpenBSD, OS/2, Palm, PCLinuxOS, Plan9, Playstation, QNX, RedHat, RIM Tablet OS, \nRISC OS, Slackware, Solaris, SUSE, Symbian, Tizen, Ubuntu, UNIX, WebOS, \nWindows [Phone/Mobile], Zenwalk\n\n# 'os.version' determined dynamically\n```\n\n* `getResult()`\n    * returns `{ browser: {}, device: {}, engine: {}, os: {} }`\n* `getUA()`\n    * returns UA string of current instance\n* `setUA(uastring)`\n    * set & parse UA string\n\n## Example\n\n```html\n<!doctype html>\n<html>\n<head>\n<script type=\"text/javascript\" src=\"ua-parser.min.js\"></script>\n<script type=\"text/javascript\">\n\n\tvar parser = new UAParser();\n\n    // by default it takes ua string from current browser's window.navigator.userAgent\n    console.log(parser.getResult());\n    /*\n        /// this will print an object structured like this:\n        {\n            browser: {\n                name: \"\",\n                version: \"\",\n                major: \"\"\n            },\n            engine: {\n                name: \"\",\n                version: \"\"\n            },\n            os: {\n                name: \"\",\n                version: \"\"\n            },\n            device: {\n                model: \"\",\n                type: \"\",\n                vendor: \"\"\n            }\n        }\n    */\n\n    // let's test a custom user-agent string as an example\n    var uastring = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.2 (KHTML, like Gecko) Ubuntu/11.10 Chromium/15.0.874.106 Chrome/15.0.874.106 Safari/535.2\";\n    parser.setUA(uastring);\n\n    var result = parser.getResult();\n    // this will also produce the same result (without instantiation):\n    // var result = UAParser(uastring);\n\n    console.log(result.browser);        // {name: \"Chromium\", major: \"15\", version: \"15.0.874.106\"}\n    console.log(result.device);         // {model: undefined, type: undefined, vendor: undefined}\n    console.log(result.os);             // {name: \"Ubuntu\", version: \"11.10\"}\n    console.log(result.os.version);     // \"11.10\"\n    console.log(result.engine.name);    // \"WebKit\"\n\n    // do some other tests\n    var uastring2 = \"Mozilla/5.0 (compatible; Konqueror/4.1; OpenBSD) KHTML/4.1.4 (like Gecko)\";\n    console.log(parser.setUA(uastring2).getBrowser().name); // \"Konqueror\"\n    console.log(parser.getOS());                            // {name: \"OpenBSD\", version: undefined}\n    console.log(parser.getEngine());                        // {name: \"KHTML\", version: \"4.1.4\"}\n\n    var uastring3 = 'Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.11 (KHTML, like Gecko) Version/7.1.0.7 Safari/534.11';\n    console.log(parser.setUA(uastring3).getDevice().model); // \"PlayBook\"\n    console.log(parser.getOS())                             // {name: \"RIM Tablet OS\", version: \"1.0.0\"}\n    console.log(parser.getBrowser().name);                  // \"Safari\"\n\n</script>\n</head>\n<body>\n</body>\n</html>\n```\n\n### Using requirejs\n\n```js\nrequire(['ua-parser'], function(UAParser) {\n    var parser = new UAParser();\n    console.log(parser.getResult());\n});\n```\n\n### Using node.js\n\n```sh\n$ npm install ua-parser-js\n```\n\n```js\nvar UAParser = require('ua-parser-js');\nvar parser = new UAParser();\nconsole.log(parser.getResult());\n```\n\n### Using component\n\n```sh\n$ component install faisalman/ua-parser-js\n```\n\n```js\nvar UAParser = require('ua-parser-js');\nvar parser = new UAParser();\nconsole.log(parser.getResult());\n```\n\n### Using bower\n\n```sh\n$ bower install ua-parser-js\n```\n\n### Using jQuery.ua\n\nAlthough written in vanilla js (which means it doesn't depends on jQuery), if you're using jQuery, this library will automatically detect and create `$.ua` object based on browser's user-agent. In case you need, `UAParser` constructor is still present in global though. To get/set user-agent you can use: `$.ua.get()` / `$.ua.set(uastring)`. \n\n```js\n// In browser with default user-agent: 'Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0':\n\n// Do some tests\nconsole.log($.ua.device);           // {vendor: \"HTC\", model: \"Evo Shift 4G\", type: \"mobile\"}\nconsole.log($.ua.os);               // {name: \"Android\", version: \"2.3.4\"}\nconsole.log($.ua.os.name);          // \"Android\"\nconsole.log($.ua.get());            // \"Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0\"\n\n// reset to custom user-agent\n$.ua.set('Mozilla/5.0 (Linux; U; Android 3.0.1; en-us; Xoom Build/HWI69) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13');\n\n// Test again\nconsole.log($.ua.browser.name);     // \"Safari\"\nconsole.log($.ua.engine.name);      // \"Webkit\"\nconsole.log($.ua.device);           // {vendor: \"Motorola\", model: \"Xoom\", type: \"tablet\"}\nconsole.log(parseInt($.ua.browser.version.split('.')[0], 10));  // 4\n```\n\n## Development\n\nInstall dependencies\n\n```sh\n$ npm install jshint\n$ npm install mocha\n$ npm install uglify-js\n```\n\nVerify, test, & minify script\n\n```sh\n$ ./build/build.sh\n```\n\n## License\n\nDual licensed under GPLv2 & MIT\n\nCopyright © 2012-2013 Faisalman <<fyzlman@gmail.com>>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to use, \ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the \nSoftware, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n","readmeFilename":"readme.md","_id":"ua-parser-js@0.5.23","dist":{"shasum":"7fb55b376026ca73345047b26715e8260217f33e","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.5.23.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.5.25":{"title":"UAParser.js","name":"ua-parser-js","version":"0.5.25","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user-agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"},{"name":"Christopher De Cairos","email":"chris.decairos@gmail.com"},{"name":"John Tantalo","email":"john.tantalo@gmail.com"},{"name":"Jon Buckley","email":"jon@jbuckley.ca"},{"name":"Lee Treveil","email":"leetreveil@gmail.com"}],"main":"src/ua-parser.js","scripts":{"test":"./build/build.sh"},"devDependencies":{"jshint":">= 1.1.0","mocha":">= 1.7.1","uglify-js":">= 1.3.4"},"repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"src","test":"test"},"files":[""],"readme":"# UAParser.js\n\nLightweight JavaScript-based User-Agent string parser. Supports browser & node.js environment. Also available as Component package, Bower package, jQuery.ua, & AMD module\n\n[![Build Status](https://travis-ci.org/faisalman/ua-parser-js.png?branch=master)](https://travis-ci.org/faisalman/ua-parser-js)\n\n* Author    : Faisalman <<fyzlman@gmail.com>>\n* Demo      : http://faisalman.github.com/ua-parser-js\n* Source    : https://github.com/faisalman/ua-parser-js\n\n## Features\n\nExtract detailed type of web browser, layout engine, operating system, and device purely from user-agent string with relatively lightweight footprint (~7KB minified / ~3KB gzipped). Written in vanilla js, which means it doesn't depends on any other library.\n\n![It's over 9000](https://pbs.twimg.com/media/A9LpEG6CIAA5VrT.jpg)\n\n## Methods\n\n* `getBrowser()`\n    * returns `{ name: '', major: '', version: '' }`\n\n```\n# Possible 'browser.name':\nAmaya, Arora, Avant, Baidu, Blazer, Bolt, Camino, Chimera, Chrome, Chromium, \nComodo Dragon, Conkeror, Dillo, Dolphin, Doris, Epiphany, Fennec, Firebird, \nFirefox, Flock, GoBrowser, iCab, ICE Browser, IceApe, IceCat, Iceweasel, \nIE [Mobile], Jasmine, K-Meleon, Konqueror, Kindle, Links, Lunascape, Lynx, Maemo, \nMaxthon, Midori, Minimo, [Mobile] Safari, Mosaic, Mozilla, Netfront, Netscape, \nNetSurf, Nokia, OmniWeb, Opera [Mini/Mobi/Tablet], Phoenix, Polaris, RockMelt, \nSilk, Skyfire, SeaMonkey, SlimBrowser, Swiftfox, Tizen, UCBrowser, w3m, Yandex\n\n# 'browser.version' & 'browser.major' determined dynamically\n```\n\n* `getDevice()`\n    * returns `{ model: '', type: '', vendor: '' }` \n\n```\n# Possible 'device.type':\nconsole, mobile, tablet\n\n# Possible 'device.vendor':\nAcer, Alcatel, Apple, Asus, BenQ, BlackBerry, Dell, GeeksPhone, HP, HTC, Huawei, \nLenovo, LG, Meizu, Motorola, Nexian, Nintendo, Nokia, Palm, Panasonic, \nRIM, Samsung, Siemens, Sony-Ericsson, Sprint, ZTE\n\n# 'device.model' determined dynamically\n```\n\n* `getEngine()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'engine.name'\nAmaya, Gecko, iCab, KHTML, Links, Lynx, NetFront, NetSurf, Presto, Tasman, \nTrident, w3m, WebKit\n\n# 'engine.version' determined dynamically\n```\n\n* `getOS()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'os.name'\nAIX, Amiga OS, Android, Arch, Bada, BeOS, BlackBerry, CentOS, Chromium OS, \nFedora, Firefox OS, FreeBSD, Debian, DragonFly, Gentoo, GNU, Haiku, Hurd, iOS, \nJoli, Linux, Mac OS, Mandriva, MeeGo, Minix, Mint, Morph OS, NetBSD, Nintendo, \nOpenBSD, OS/2, Palm, PCLinuxOS, Plan9, Playstation, QNX, RedHat, RIM Tablet OS, \nRISC OS, Slackware, Solaris, SUSE, Symbian, Tizen, Ubuntu, UNIX, WebOS, \nWindows [Phone/Mobile], Zenwalk\n\n# 'os.version' determined dynamically\n```\n\n* `getResult()`\n    * returns `{ browser: {}, device: {}, engine: {}, os: {} }`\n* `getUA()`\n    * returns UA string of current instance\n* `setUA(uastring)`\n    * set & parse UA string\n\n## Example\n\n```html\n<!doctype html>\n<html>\n<head>\n<script type=\"text/javascript\" src=\"ua-parser.min.js\"></script>\n<script type=\"text/javascript\">\n\n\tvar parser = new UAParser();\n\n    // by default it takes ua string from current browser's window.navigator.userAgent\n    console.log(parser.getResult());\n    /*\n        /// this will print an object structured like this:\n        {\n            browser: {\n                name: \"\",\n                version: \"\",\n                major: \"\"\n            },\n            engine: {\n                name: \"\",\n                version: \"\"\n            },\n            os: {\n                name: \"\",\n                version: \"\"\n            },\n            device: {\n                model: \"\",\n                type: \"\",\n                vendor: \"\"\n            }\n        }\n    */\n\n    // let's test a custom user-agent string as an example\n    var uastring = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.2 (KHTML, like Gecko) Ubuntu/11.10 Chromium/15.0.874.106 Chrome/15.0.874.106 Safari/535.2\";\n    parser.setUA(uastring);\n\n    var result = parser.getResult();\n    // this will also produce the same result (without instantiation):\n    // var result = UAParser(uastring);\n\n    console.log(result.browser);        // {name: \"Chromium\", major: \"15\", version: \"15.0.874.106\"}\n    console.log(result.device);         // {model: undefined, type: undefined, vendor: undefined}\n    console.log(result.os);             // {name: \"Ubuntu\", version: \"11.10\"}\n    console.log(result.os.version);     // \"11.10\"\n    console.log(result.engine.name);    // \"WebKit\"\n\n    // do some other tests\n    var uastring2 = \"Mozilla/5.0 (compatible; Konqueror/4.1; OpenBSD) KHTML/4.1.4 (like Gecko)\";\n    console.log(parser.setUA(uastring2).getBrowser().name); // \"Konqueror\"\n    console.log(parser.getOS());                            // {name: \"OpenBSD\", version: undefined}\n    console.log(parser.getEngine());                        // {name: \"KHTML\", version: \"4.1.4\"}\n\n    var uastring3 = 'Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.11 (KHTML, like Gecko) Version/7.1.0.7 Safari/534.11';\n    console.log(parser.setUA(uastring3).getDevice().model); // \"PlayBook\"\n    console.log(parser.getOS())                             // {name: \"RIM Tablet OS\", version: \"1.0.0\"}\n    console.log(parser.getBrowser().name);                  // \"Safari\"\n\n</script>\n</head>\n<body>\n</body>\n</html>\n```\n\n### Using requirejs\n\n```js\nrequire(['ua-parser'], function(UAParser) {\n    var parser = new UAParser();\n    console.log(parser.getResult());\n});\n```\n\n### Using node.js\n\n```sh\n$ npm install ua-parser-js\n```\n\n```js\nvar UAParser = require('ua-parser-js');\nvar parser = new UAParser();\nconsole.log(parser.getResult());\n```\n\n### Using component\n\n```sh\n$ component install faisalman/ua-parser-js\n```\n\n```js\nvar UAParser = require('ua-parser-js');\nvar parser = new UAParser();\nconsole.log(parser.getResult());\n```\n\n### Using bower\n\n```sh\n$ bower install ua-parser-js\n```\n\n### Using jQuery.ua\n\nAlthough written in vanilla js (which means it doesn't depends on jQuery), if you're using jQuery, this library will automatically detect and create `$.ua` object based on browser's user-agent (although in case you need, `window.UAParser` constructor is still present). To get/set user-agent you can use: `$.ua.get()` / `$.ua.set(uastring)`. \n\n```js\n// In browser with default user-agent: 'Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0':\n\n// Do some tests\nconsole.log($.ua.device);           // {vendor: \"HTC\", model: \"Evo Shift 4G\", type: \"mobile\"}\nconsole.log($.ua.os);               // {name: \"Android\", version: \"2.3.4\"}\nconsole.log($.ua.os.name);          // \"Android\"\nconsole.log($.ua.get());            // \"Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0\"\n\n// reset to custom user-agent\n$.ua.set('Mozilla/5.0 (Linux; U; Android 3.0.1; en-us; Xoom Build/HWI69) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13');\n\n// Test again\nconsole.log($.ua.browser.name);     // \"Safari\"\nconsole.log($.ua.engine.name);      // \"Webkit\"\nconsole.log($.ua.device);           // {vendor: \"Motorola\", model: \"Xoom\", type: \"tablet\"}\nconsole.log(parseInt($.ua.browser.version.split('.')[0], 10));  // 4\n```\n\n## Development\n\nInstall dependencies\n\n```sh\n$ npm install jshint\n$ npm install mocha\n$ npm install uglify-js\n```\n\nVerify, test, & minify script\n\n```sh\n$ ./build/build.sh\n```\n\n## License\n\nDual licensed under GPLv2 & MIT\n\nCopyright © 2012-2013 Faisalman <<fyzlman@gmail.com>>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to use, \ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the \nSoftware, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n","readmeFilename":"readme.md","_id":"ua-parser-js@0.5.25","dist":{"shasum":"ac560a79a1bfbf4c696c492c0863c911f9bb6c16","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.5.25.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.5.27":{"title":"UAParser.js","name":"ua-parser-js","version":"0.5.27","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user-agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"},{"name":"Christopher De Cairos","email":"chris.decairos@gmail.com"},{"name":"John Tantalo","email":"john.tantalo@gmail.com"},{"name":"Jon Buckley","email":"jon@jbuckley.ca"},{"name":"Lee Treveil","email":"leetreveil@gmail.com"}],"main":"src/ua-parser.js","scripts":{"test":"./build/build.sh"},"devDependencies":{"jshint":">= 1.1.0","mocha":">= 1.7.1","uglify-js":">= 1.3.4"},"repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"src","test":"test"},"files":[""],"readme":"# UAParser.js\n\nLightweight JavaScript-based User-Agent string parser. Supports browser & node.js environment. Also available as Component package, Bower package, jQuery.ua, & AMD module\n\n[![Build Status](https://travis-ci.org/faisalman/ua-parser-js.png?branch=master)](https://travis-ci.org/faisalman/ua-parser-js)\n\n* Author    : Faisalman <<fyzlman@gmail.com>>\n* Demo      : http://faisalman.github.com/ua-parser-js\n* Source    : https://github.com/faisalman/ua-parser-js\n\n## Features\n\nExtract detailed type of web browser, layout engine, operating system, and device purely from user-agent string with relatively lightweight footprint (~7KB minified / ~3KB gzipped). Written in vanilla js, which means it doesn't depends on any other library.\n\n![It's over 9000](https://pbs.twimg.com/media/A9LpEG6CIAA5VrT.jpg)\n\n## Methods\n\n* `getBrowser()`\n    * returns `{ name: '', major: '', version: '' }`\n\n```\n# Possible 'browser.name':\nAmaya, Arora, Avant, Baidu, Blazer, Bolt, Camino, Chimera, Chrome, Chromium, \nComodo Dragon, Conkeror, Dillo, Dolphin, Doris, Epiphany, Fennec, Firebird, \nFirefox, Flock, GoBrowser, iCab, ICE Browser, IceApe, IceCat, Iceweasel, \nIE [Mobile], Jasmine, K-Meleon, Konqueror, Kindle, Links, Lunascape, Lynx, Maemo, \nMaxthon, Midori, Minimo, [Mobile] Safari, Mosaic, Mozilla, Netfront, Netscape, \nNetSurf, Nokia, OmniWeb, Opera [Mini/Mobi/Tablet], Phoenix, Polaris, RockMelt, \nSilk, Skyfire, SeaMonkey, SlimBrowser, Swiftfox, Tizen, UCBrowser, w3m, Yandex\n\n# 'browser.version' & 'browser.major' determined dynamically\n```\n\n* `getDevice()`\n    * returns `{ model: '', type: '', vendor: '' }` \n\n```\n# Possible 'device.type':\nconsole, mobile, tablet\n\n# Possible 'device.vendor':\nAcer, Alcatel, Apple, Asus, BenQ, BlackBerry, Dell, GeeksPhone, HP, HTC, Huawei, \nLenovo, LG, Meizu, Motorola, Nexian, Nintendo, Nokia, Palm, Panasonic, \nRIM, Samsung, Siemens, Sony-Ericsson, Sprint, ZTE\n\n# 'device.model' determined dynamically\n```\n\n* `getEngine()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'engine.name'\nAmaya, Gecko, iCab, KHTML, Links, Lynx, NetFront, NetSurf, Presto, Tasman, \nTrident, w3m, WebKit\n\n# 'engine.version' determined dynamically\n```\n\n* `getOS()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'os.name'\nAIX, Amiga OS, Android, Arch, Bada, BeOS, BlackBerry, CentOS, Chromium OS, \nFedora, Firefox OS, FreeBSD, Debian, DragonFly, Gentoo, GNU, Haiku, Hurd, iOS, \nJoli, Linux, Mac OS, Mandriva, MeeGo, Minix, Mint, Morph OS, NetBSD, Nintendo, \nOpenBSD, OS/2, Palm, PCLinuxOS, Plan9, Playstation, QNX, RedHat, RIM Tablet OS, \nRISC OS, Slackware, Solaris, SUSE, Symbian, Tizen, Ubuntu, UNIX, WebOS, \nWindows [Phone/Mobile], Zenwalk\n\n# 'os.version' determined dynamically\n```\n\n* `getResult()`\n    * returns `{ browser: {}, device: {}, engine: {}, os: {} }`\n* `getUA()`\n    * returns UA string of current instance\n* `setUA(uastring)`\n    * set & parse UA string\n\n## Example\n\n```html\n<!doctype html>\n<html>\n<head>\n<script type=\"text/javascript\" src=\"ua-parser.min.js\"></script>\n<script type=\"text/javascript\">\n\n\tvar parser = new UAParser();\n\n    // by default it takes ua string from current browser's window.navigator.userAgent\n    console.log(parser.getResult());\n    /*\n        /// this will print an object structured like this:\n        {\n            browser: {\n                name: \"\",\n                version: \"\",\n                major: \"\"\n            },\n            engine: {\n                name: \"\",\n                version: \"\"\n            },\n            os: {\n                name: \"\",\n                version: \"\"\n            },\n            device: {\n                model: \"\",\n                type: \"\",\n                vendor: \"\"\n            }\n        }\n    */\n\n    // let's test a custom user-agent string as an example\n    var uastring = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.2 (KHTML, like Gecko) Ubuntu/11.10 Chromium/15.0.874.106 Chrome/15.0.874.106 Safari/535.2\";\n    parser.setUA(uastring);\n\n    var result = parser.getResult();\n    // this will also produce the same result (without instantiation):\n    // var result = UAParser(uastring);\n\n    console.log(result.browser);        // {name: \"Chromium\", major: \"15\", version: \"15.0.874.106\"}\n    console.log(result.device);         // {model: undefined, type: undefined, vendor: undefined}\n    console.log(result.os);             // {name: \"Ubuntu\", version: \"11.10\"}\n    console.log(result.os.version);     // \"11.10\"\n    console.log(result.engine.name);    // \"WebKit\"\n\n    // do some other tests\n    var uastring2 = \"Mozilla/5.0 (compatible; Konqueror/4.1; OpenBSD) KHTML/4.1.4 (like Gecko)\";\n    console.log(parser.setUA(uastring2).getBrowser().name); // \"Konqueror\"\n    console.log(parser.getOS());                            // {name: \"OpenBSD\", version: undefined}\n    console.log(parser.getEngine());                        // {name: \"KHTML\", version: \"4.1.4\"}\n\n    var uastring3 = 'Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.11 (KHTML, like Gecko) Version/7.1.0.7 Safari/534.11';\n    console.log(parser.setUA(uastring3).getDevice().model); // \"PlayBook\"\n    console.log(parser.getOS())                             // {name: \"RIM Tablet OS\", version: \"1.0.0\"}\n    console.log(parser.getBrowser().name);                  // \"Safari\"\n\n</script>\n</head>\n<body>\n</body>\n</html>\n```\n\n### Using requirejs\n\n```js\nrequire(['ua-parser'], function(UAParser) {\n    var parser = new UAParser();\n    console.log(parser.getResult());\n});\n```\n\n### Using node.js\n\n```sh\n$ npm install ua-parser-js\n```\n\n```js\nvar UAParser = require('ua-parser-js');\nvar parser = new UAParser();\nconsole.log(parser.getResult());\n```\n\n### Using component\n\n```sh\n$ component install faisalman/ua-parser-js\n```\n\n```js\nvar UAParser = require('ua-parser-js');\nvar parser = new UAParser();\nconsole.log(parser.getResult());\n```\n\n### Using bower\n\n```sh\n$ bower install ua-parser-js\n```\n\n### Using jQuery.ua\n\nAlthough written in vanilla js (which means it doesn't depends on jQuery), if you're using jQuery, this library will automatically detect and create `$.ua` object based on browser's user-agent (although in case you need, `window.UAParser` constructor is still present). To get/set user-agent you can use: `$.ua.get()` / `$.ua.set(uastring)`. \n\n```js\n// In browser with default user-agent: 'Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0':\n\n// Do some tests\nconsole.log($.ua.device);           // {vendor: \"HTC\", model: \"Evo Shift 4G\", type: \"mobile\"}\nconsole.log($.ua.os);               // {name: \"Android\", version: \"2.3.4\"}\nconsole.log($.ua.os.name);          // \"Android\"\nconsole.log($.ua.get());            // \"Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0\"\n\n// reset to custom user-agent\n$.ua.set('Mozilla/5.0 (Linux; U; Android 3.0.1; en-us; Xoom Build/HWI69) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13');\n\n// Test again\nconsole.log($.ua.browser.name);     // \"Safari\"\nconsole.log($.ua.engine.name);      // \"Webkit\"\nconsole.log($.ua.device);           // {vendor: \"Motorola\", model: \"Xoom\", type: \"tablet\"}\nconsole.log(parseInt($.ua.browser.version.split('.')[0], 10));  // 4\n```\n\n## Development\n\nInstall dependencies\n\n```sh\n$ npm install jshint\n$ npm install mocha\n$ npm install uglify-js\n```\n\nVerify, test, & minify script\n\n```sh\n$ ./build/build.sh\n```\n\n## License\n\nDual licensed under GPLv2 & MIT\n\nCopyright © 2012-2013 Faisalman <<fyzlman@gmail.com>>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to use, \ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the \nSoftware, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n","readmeFilename":"readme.md","_id":"ua-parser-js@0.5.27","dist":{"shasum":"ba6fef6cbf4f90284ce073a6302ddf69b8e800c3","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.5.27.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.6.0":{"title":"UAParser.js","name":"ua-parser-js","version":"0.6.0","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user-agent","parser","browser","engine","os","device"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"},{"name":"Christopher De Cairos","email":"chris.decairos@gmail.com"},{"name":"John Tantalo","email":"john.tantalo@gmail.com"},{"name":"Jon Buckley","email":"jon@jbuckley.ca"},{"name":"Lee Treveil","email":"leetreveil@gmail.com"}],"main":"src/ua-parser.js","scripts":{"test":"./build/build.sh"},"devDependencies":{"jshint":">= 1.1.0","mocha":">= 1.7.1","uglify-js":">= 1.3.4"},"repositories":[{"type":"git","url":"https://github.com/faisalman/ua-parser-js.git"}],"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"src","test":"test"},"files":[""],"readme":"# UAParser.js\n\nLightweight JavaScript-based User-Agent string parser. Supports browser & node.js environment. Also available as Component package, Bower package, jQuery.ua, & AMD module\n\n[![Build Status](https://travis-ci.org/faisalman/ua-parser-js.png?branch=master)](https://travis-ci.org/faisalman/ua-parser-js)\n\n* Author    : Faisalman <<fyzlman@gmail.com>>\n* Demo      : http://faisalman.github.com/ua-parser-js\n* Source    : https://github.com/faisalman/ua-parser-js\n\n## Features\n\nExtract detailed type of web browser, layout engine, operating system, and device purely from user-agent string with relatively lightweight footprint (~7KB minified / ~3KB gzipped). Written in vanilla js, which means it doesn't depends on any other library.\n\n![It's over 9000](https://pbs.twimg.com/media/A9LpEG6CIAA5VrT.jpg)\n\n## Methods\n\n* `getBrowser()`\n    * returns `{ name: '', major: '', version: '' }`\n\n```\n# Possible 'browser.name':\nAmaya, Arora, Avant, Baidu, Blazer, Bolt, Camino, Chimera, Chrome, Chromium, \nComodo Dragon, Conkeror, Dillo, Dolphin, Doris, Epiphany, Fennec, Firebird, \nFirefox, Flock, GoBrowser, iCab, ICE Browser, IceApe, IceCat, Iceweasel, \nIE [Mobile], Jasmine, K-Meleon, Konqueror, Kindle, Links, Lunascape, Lynx, Maemo, \nMaxthon, Midori, Minimo, [Mobile] Safari, Mosaic, Mozilla, Netfront, Netscape, \nNetSurf, Nokia, OmniWeb, Opera [Mini/Mobi/Tablet], Phoenix, Polaris, RockMelt, \nSilk, Skyfire, SeaMonkey, SlimBrowser, Swiftfox, Tizen, UCBrowser, w3m, Yandex\n\n# 'browser.version' & 'browser.major' determined dynamically\n```\n\n* `getDevice()`\n    * returns `{ model: '', type: '', vendor: '' }` \n\n```\n# Possible 'device.type':\nconsole, mobile, tablet\n\n# Possible 'device.vendor':\nAcer, Alcatel, Apple, Asus, BenQ, BlackBerry, Dell, GeeksPhone, HP, HTC, Huawei, \nLenovo, LG, Meizu, Motorola, Nexian, Nintendo, Nokia, Palm, Panasonic, \nRIM, Samsung, Siemens, Sony-Ericsson, Sprint, ZTE\n\n# 'device.model' determined dynamically\n```\n\n* `getEngine()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'engine.name'\nAmaya, Gecko, iCab, KHTML, Links, Lynx, NetFront, NetSurf, Presto, Tasman, \nTrident, w3m, WebKit\n\n# 'engine.version' determined dynamically\n```\n\n* `getOS()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'os.name'\nAIX, Amiga OS, Android, Arch, Bada, BeOS, BlackBerry, CentOS, Chromium OS, \nFedora, Firefox OS, FreeBSD, Debian, DragonFly, Gentoo, GNU, Haiku, Hurd, iOS, \nJoli, Linux, Mac OS, Mandriva, MeeGo, Minix, Mint, Morph OS, NetBSD, Nintendo, \nOpenBSD, OS/2, Palm, PCLinuxOS, Plan9, Playstation, QNX, RedHat, RIM Tablet OS, \nRISC OS, Slackware, Solaris, SUSE, Symbian, Tizen, Ubuntu, UNIX, WebOS, \nWindows [Phone/Mobile], Zenwalk\n\n# 'os.version' determined dynamically\n```\n\n* `getCPU()`\n    * returns `{ architecture: '' }`\n\n```\n# Possible 'cpu.architecture'\n68k, amd64, arm, ia32, ia64, irix, mips, pa-risc, ppc, sparc\n```\n\n* `getResult()`\n    * returns `{ browser: {}, cpu: {}, device: {}, engine: {}, os: {} }`\n* `getUA()`\n    * returns UA string of current instance\n* `setUA(uastring)`\n    * set & parse UA string\n\n## Example\n\n```html\n<!doctype html>\n<html>\n<head>\n<script type=\"text/javascript\" src=\"ua-parser.min.js\"></script>\n<script type=\"text/javascript\">\n\n\tvar parser = new UAParser();\n\n    // by default it takes ua string from current browser's window.navigator.userAgent\n    console.log(parser.getResult());\n    /*\n        /// this will print an object structured like this:\n        {\n            browser: {\n                name: \"\",\n                version: \"\",\n                major: \"\"\n            },\n            engine: {\n                name: \"\",\n                version: \"\"\n            },\n            os: {\n                name: \"\",\n                version: \"\"\n            },\n            device: {\n                model: \"\",\n                type: \"\",\n                vendor: \"\"\n            },\n            cpu: {\n                architecture: \"\"\n            }\n        }\n    */\n\n    // let's test a custom user-agent string as an example\n    var uastring = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.2 (KHTML, like Gecko) Ubuntu/11.10 Chromium/15.0.874.106 Chrome/15.0.874.106 Safari/535.2\";\n    parser.setUA(uastring);\n\n    var result = parser.getResult();\n    // this will also produce the same result (without instantiation):\n    // var result = UAParser(uastring);\n\n    console.log(result.browser);        // {name: \"Chromium\", major: \"15\", version: \"15.0.874.106\"}\n    console.log(result.device);         // {model: undefined, type: undefined, vendor: undefined}\n    console.log(result.os);             // {name: \"Ubuntu\", version: \"11.10\"}\n    console.log(result.os.version);     // \"11.10\"\n    console.log(result.engine.name);    // \"WebKit\"\n    console.log(result.cpu.architecture);   // \"amd64\"\n\n    // do some other tests\n    var uastring2 = \"Mozilla/5.0 (compatible; Konqueror/4.1; OpenBSD) KHTML/4.1.4 (like Gecko)\";\n    console.log(parser.setUA(uastring2).getBrowser().name); // \"Konqueror\"\n    console.log(parser.getOS());                            // {name: \"OpenBSD\", version: undefined}\n    console.log(parser.getEngine());                        // {name: \"KHTML\", version: \"4.1.4\"}\n\n    var uastring3 = 'Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.11 (KHTML, like Gecko) Version/7.1.0.7 Safari/534.11';\n    console.log(parser.setUA(uastring3).getDevice().model); // \"PlayBook\"\n    console.log(parser.getOS())                             // {name: \"RIM Tablet OS\", version: \"1.0.0\"}\n    console.log(parser.getBrowser().name);                  // \"Safari\"\n\n</script>\n</head>\n<body>\n</body>\n</html>\n```\n\n### Using node.js\n\n```sh\n$ npm install ua-parser-js\n```\n\n```js\nvar UAParser = require('ua-parser-js');\nvar parser = new UAParser();\nvar ua = request.headers['user-agent'];     // user-agent header from an HTTP request\nconsole.log(parser.setUA(ua).getResult());\n```\n\n### Using requirejs\n\n```js\nrequire(['ua-parser'], function(UAParser) {\n    var parser = new UAParser();\n    console.log(parser.getResult());\n});\n```\n\n### Using component\n\n```sh\n$ component install faisalman/ua-parser-js\n```\n\n```js\nvar UAParser = require('ua-parser-js');\nvar parser = new UAParser();\nconsole.log(parser.getResult());\n```\n\n### Using bower\n\n```sh\n$ bower install ua-parser-js\n```\n\n### Using jQuery.ua\n\nAlthough written in vanilla js (which means it doesn't depends on jQuery), this library will automatically detect if jQuery is present and create `$.ua` object based on browser's user-agent (although in case you need, `window.UAParser` constructor is still present). To get/set user-agent you can use: `$.ua.get()` / `$.ua.set(uastring)`. \n\n```js\n// In browser with default user-agent: 'Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0':\n\n// Do some tests\nconsole.log($.ua.device);           // {vendor: \"HTC\", model: \"Evo Shift 4G\", type: \"mobile\"}\nconsole.log($.ua.os);               // {name: \"Android\", version: \"2.3.4\"}\nconsole.log($.ua.os.name);          // \"Android\"\nconsole.log($.ua.get());            // \"Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0\"\n\n// reset to custom user-agent\n$.ua.set('Mozilla/5.0 (Linux; U; Android 3.0.1; en-us; Xoom Build/HWI69) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13');\n\n// Test again\nconsole.log($.ua.browser.name);     // \"Safari\"\nconsole.log($.ua.engine.name);      // \"Webkit\"\nconsole.log($.ua.device);           // {vendor: \"Motorola\", model: \"Xoom\", type: \"tablet\"}\nconsole.log(parseInt($.ua.browser.version.split('.')[0], 10));  // 4\n```\n\n## Development\n\nInstall dependencies\n\n```sh\n$ npm install jshint\n$ npm install mocha\n$ npm install uglify-js\n```\n\nVerify, test, & minify script\n\n```sh\n$ ./build/build.sh\n```\n\n## License\n\nDual licensed under GPLv2 & MIT\n\nCopyright © 2012-2013 Faisalman <<fyzlman@gmail.com>>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to use, \ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the \nSoftware, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n","readmeFilename":"readme.md","_id":"ua-parser-js@0.6.0","dist":{"shasum":"9b7c70336f119b0b6275c581f13cd647275fafa6","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.6.0.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]},"0.6.2":{"title":"UAParser.js","name":"ua-parser-js","version":"0.6.2","author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"description":"Lightweight JavaScript-based user-agent string parser","keywords":["user-agent","parser","browser","engine","os","device","cpu"],"homepage":"http://github.com/faisalman/ua-parser-js","contributors":[{"name":"Faisal Salman","email":"fyzlman@gmail.com"},{"name":"Christopher De Cairos","email":"chris.decairos@gmail.com"},{"name":"John Tantalo","email":"john.tantalo@gmail.com"},{"name":"Jon Buckley","email":"jon@jbuckley.ca"},{"name":"Lee Treveil","email":"leetreveil@gmail.com"}],"main":"src/ua-parser.js","scripts":{"test":"./build/build.sh"},"devDependencies":{"jshint":">= 1.1.0","mocha":">= 1.7.1","uglify-js":">= 1.3.4"},"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"licenses":[{"type":"GPLv2","url":"http://www.gnu.org/licenses/gpl-2.0.html"},{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"engines":{"node":"*"},"directories":{"lib":"src","test":"test"},"files":[""],"readme":"# UAParser.js\n\nLightweight JavaScript-based User-Agent string parser. Supports browser & node.js environment. Also available as Component package, Bower package, jQuery.ua, & AMD module\n\n[![Build Status](https://travis-ci.org/faisalman/ua-parser-js.png?branch=master)](https://travis-ci.org/faisalman/ua-parser-js)\n\n* Author    : Faisalman <<fyzlman@gmail.com>>\n* Demo      : http://faisalman.github.com/ua-parser-js\n* Source    : https://github.com/faisalman/ua-parser-js\n\n## Features\n\nExtract detailed type of web browser, layout engine, operating system, cpu architecture, and device purely from user-agent string with relatively lightweight footprint (~7KB minified / ~3KB gzipped). Written in vanilla js, which means it doesn't depends on any other library.\n\n![It's over 9000](https://pbs.twimg.com/media/A9LpEG6CIAA5VrT.jpg)\n\n## Methods\n\n* `getBrowser()`\n    * returns `{ name: '', major: '', version: '' }`\n\n```\n# Possible 'browser.name':\nAmaya, Arora, Avant, Baidu, Blazer, Bolt, Camino, Chimera, Chrome, Chromium, \nComodo Dragon, Conkeror, Dillo, Dolphin, Doris, Epiphany, Fennec, Firebird, \nFirefox, Flock, GoBrowser, iCab, ICE Browser, IceApe, IceCat, IceDragon, \nIceweasel, IE [Mobile], Iron, Jasmine, K-Meleon, Konqueror, Kindle, Links, \nLunascape, Lynx, Maemo, Maxthon, Midori, Minimo, [Mobile] Safari, Mosaic, Mozilla, \nNetfront, Netscape, NetSurf, Nokia, OmniWeb, Opera [Mini/Mobi/Tablet], Phoenix, \nPolaris, QQBrowser, RockMelt, Silk, Skyfire, SeaMonkey, SlimBrowser, Swiftfox, \nTizen, UCBrowser, w3m, Yandex\n\n# 'browser.version' & 'browser.major' determined dynamically\n```\n\n* `getDevice()`\n    * returns `{ model: '', type: '', vendor: '' }` \n\n```\n# Possible 'device.type':\nconsole, mobile, tablet\n\n# Possible 'device.vendor':\nAcer, Alcatel, Apple, Asus, BenQ, BlackBerry, Dell, GeeksPhone, HP, HTC, Huawei, \nLenovo, LG, Meizu, Motorola, Nexian, Nintendo, Nokia, Palm, Panasonic, \nRIM, Samsung, Siemens, Sony-Ericsson, Sprint, ZTE\n\n# 'device.model' determined dynamically\n```\n\n* `getEngine()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'engine.name'\nAmaya, Gecko, iCab, KHTML, Links, Lynx, NetFront, NetSurf, Presto, Tasman, \nTrident, w3m, WebKit\n\n# 'engine.version' determined dynamically\n```\n\n* `getOS()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'os.name'\nAIX, Amiga OS, Android, Arch, Bada, BeOS, BlackBerry, CentOS, Chromium OS, \nFedora, Firefox OS, FreeBSD, Debian, DragonFly, Gentoo, GNU, Haiku, Hurd, iOS, \nJoli, Linux, Mac OS, Mandriva, MeeGo, Minix, Mint, Morph OS, NetBSD, Nintendo, \nOpenBSD, OS/2, Palm, PCLinuxOS, Plan9, Playstation, QNX, RedHat, RIM Tablet OS, \nRISC OS, Slackware, Solaris, SUSE, Symbian, Tizen, Ubuntu, UNIX, WebOS, \nWindows [Phone/Mobile], Zenwalk\n\n# 'os.version' determined dynamically\n```\n\n* `getCPU()`\n    * returns `{ architecture: '' }`\n\n```\n# Possible 'cpu.architecture'\n68k, amd64, arm, ia32, ia64, irix, irix64, mips, mips64, pa-risc, ppc, sparc, sparc64\n```\n\n* `getResult()`\n    * returns `{ ua: '', browser: {}, cpu: {}, device: {}, engine: {}, os: {} }`\n* `getUA()`\n    * returns UA string of current instance\n* `setUA(uastring)`\n    * set & parse UA string\n\n## Example\n\n```html\n<!doctype html>\n<html>\n<head>\n<script type=\"text/javascript\" src=\"ua-parser.min.js\"></script>\n<script type=\"text/javascript\">\n\n\tvar parser = new UAParser();\n\n    // by default it takes ua string from current browser's window.navigator.userAgent\n    console.log(parser.getResult());\n    /*\n        /// this will print an object structured like this:\n        {\n            ua: \"\",\n            browser: {\n                name: \"\",\n                version: \"\",\n                major: \"\"\n            },\n            engine: {\n                name: \"\",\n                version: \"\"\n            },\n            os: {\n                name: \"\",\n                version: \"\"\n            },\n            device: {\n                model: \"\",\n                type: \"\",\n                vendor: \"\"\n            },\n            cpu: {\n                architecture: \"\"\n            }\n        }\n    */\n\n    // let's test a custom user-agent string as an example\n    var uastring = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.2 (KHTML, like Gecko) Ubuntu/11.10 Chromium/15.0.874.106 Chrome/15.0.874.106 Safari/535.2\";\n    parser.setUA(uastring);\n\n    var result = parser.getResult();\n    // this will also produce the same result (without instantiation):\n    // var result = UAParser(uastring);\n\n    console.log(result.browser);        // {name: \"Chromium\", major: \"15\", version: \"15.0.874.106\"}\n    console.log(result.device);         // {model: undefined, type: undefined, vendor: undefined}\n    console.log(result.os);             // {name: \"Ubuntu\", version: \"11.10\"}\n    console.log(result.os.version);     // \"11.10\"\n    console.log(result.engine.name);    // \"WebKit\"\n    console.log(result.cpu.architecture);   // \"amd64\"\n\n    // do some other tests\n    var uastring2 = \"Mozilla/5.0 (compatible; Konqueror/4.1; OpenBSD) KHTML/4.1.4 (like Gecko)\";\n    console.log(parser.setUA(uastring2).getBrowser().name); // \"Konqueror\"\n    console.log(parser.getOS());                            // {name: \"OpenBSD\", version: undefined}\n    console.log(parser.getEngine());                        // {name: \"KHTML\", version: \"4.1.4\"}\n\n    var uastring3 = 'Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.11 (KHTML, like Gecko) Version/7.1.0.7 Safari/534.11';\n    console.log(parser.setUA(uastring3).getDevice().model); // \"PlayBook\"\n    console.log(parser.getOS())                             // {name: \"RIM Tablet OS\", version: \"1.0.0\"}\n    console.log(parser.getBrowser().name);                  // \"Safari\"\n\n</script>\n</head>\n<body>\n</body>\n</html>\n```\n\n### Using node.js\n\n```sh\n$ npm install ua-parser-js\n```\n\n```js\nvar UAParser = require('ua-parser-js');\nvar parser = new UAParser();\nvar ua = request.headers['user-agent'];     // user-agent header from an HTTP request\nconsole.log(parser.setUA(ua).getResult());\n```\n\n### Using requirejs\n\n```js\nrequire(['ua-parser'], function(UAParser) {\n    var parser = new UAParser();\n    console.log(parser.getResult());\n});\n```\n\n### Using component\n\n```sh\n$ component install faisalman/ua-parser-js\n```\n\n```js\nvar UAParser = require('ua-parser-js');\nvar parser = new UAParser();\nconsole.log(parser.getResult());\n```\n\n### Using bower\n\n```sh\n$ bower install ua-parser-js\n```\n\n### Using jQuery.ua\n\nAlthough written in vanilla js (which means it doesn't depends on jQuery), this library will automatically detect if jQuery is present and create `$.ua` object based on browser's user-agent (although in case you need, `window.UAParser` constructor is still present). To get/set user-agent you can use: `$.ua.get()` / `$.ua.set(uastring)`. \n\n```js\n// In browser with default user-agent: 'Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0':\n\n// Do some tests\nconsole.log($.ua.device);           // {vendor: \"HTC\", model: \"Evo Shift 4G\", type: \"mobile\"}\nconsole.log($.ua.os);               // {name: \"Android\", version: \"2.3.4\"}\nconsole.log($.ua.os.name);          // \"Android\"\nconsole.log($.ua.get());            // \"Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0\"\n\n// reset to custom user-agent\n$.ua.set('Mozilla/5.0 (Linux; U; Android 3.0.1; en-us; Xoom Build/HWI69) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13');\n\n// Test again\nconsole.log($.ua.browser.name);     // \"Safari\"\nconsole.log($.ua.engine.name);      // \"Webkit\"\nconsole.log($.ua.device);           // {vendor: \"Motorola\", model: \"Xoom\", type: \"tablet\"}\nconsole.log(parseInt($.ua.browser.version.split('.')[0], 10));  // 4\n```\n\n## Development\n\nInstall dependencies\n\n```sh\n$ npm install jshint\n$ npm install mocha\n$ npm install uglify-js\n```\n\nVerify, test, & minify script\n\n```sh\n$ ./build/build.sh\n```\n\n## License\n\nDual licensed under GPLv2 & MIT\n\nCopyright © 2012-2013 Faisalman <<fyzlman@gmail.com>>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to use, \ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the \nSoftware, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/faisalman/ua-parser-js/issues"},"_id":"ua-parser-js@0.6.2","dist":{"shasum":"6faae855a0ee896b8713fc371516f241e3b99063","tarball":"http://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.6.2.tgz"},"_from":".","_npmVersion":"1.2.25","_npmUser":{"name":"faisalman","email":"fyzlman@gmail.com"},"maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}]}},"maintainers":[{"name":"faisalman","email":"fyzlman@gmail.com"}],"time":{"modified":"2013-07-04T12:36:10.667Z","created":"2012-07-28T20:54:42.902Z","0.3.0":"2012-07-28T20:54:44.026Z","0.3.1":"2012-09-10T20:20:00.942Z","0.4.0":"2012-09-14T20:57:54.701Z","0.4.1":"2012-09-17T18:04:46.834Z","0.4.3":"2012-09-21T17:22:56.478Z","0.4.4":"2012-10-22T09:08:22.907Z","0.4.6":"2012-11-02T11:32:02.442Z","0.4.7":"2012-11-06T10:47:25.024Z","0.4.13":"2012-11-28T08:53:08.175Z","0.4.15":"2012-12-05T04:16:44.852Z","0.5.1":"2013-01-25T13:31:43.684Z","0.5.2":"2013-01-28T12:25:58.465Z","0.5.3":"2013-02-05T15:37:01.349Z","0.5.11":"2013-02-07T16:28:17.480Z","0.5.12":"2013-02-15T03:27:50.741Z","0.5.15":"2013-03-05T14:07:51.010Z","0.5.20":"2013-03-16T07:40:04.255Z","0.5.22":"2013-03-20T05:06:21.724Z","0.5.23":"2013-03-20T06:07:12.618Z","0.5.25":"2013-03-22T06:27:07.654Z","0.5.27":"2013-03-26T07:19:53.728Z","0.6.0":"2013-04-04T06:50:31.599Z","0.6.2":"2013-07-04T12:36:10.667Z"},"author":{"name":"Faisal Salman","email":"fyzlman@gmail.com","url":"http://faisalman.com"},"repository":{"type":"git","url":"git://github.com/faisalman/ua-parser-js.git"},"users":{"fgribreau":true},"_attachments":{},"_etag":"\"76CDK0C03OR9GZKX64Z2514B0\""}