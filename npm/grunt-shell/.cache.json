{"_id":"grunt-shell","_rev":"51-e3b5e2908c32c7879aed01732bc74da1","name":"grunt-shell","description":"Run shell commands","dist-tags":{"latest":"0.6.1"},"versions":{"0.1.0":{"name":"grunt-shell","version":"0.1.0","description":"Grunt task to run shell commands","keywords":["gruntplugin","grunt","shell","command","exec","cli"],"homepage":"https://github.com/sindresorhus/grunt-shell","bugs":{"name":"https://github.com/sindresorhus/grunt-shell/issues"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"main":"grunt.js","bin":{"grunt-shell":"bin/grunt-shell"},"repository":{"type":"git","url":"git://github.com/sindresorhus/grunt-shell.git"},"dependencies":{"grunt":"~0.3.9"},"engines":{"node":">=0.6.0"},"licenses":{"type":"MIT"},"_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"_id":"grunt-shell@0.1.0","devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.15","_defaultsLoaded":true,"dist":{"shasum":"0d082612b063661f4208c0d7f3af77186cedad7f","tarball":"http://registry.npmjs.org/grunt-shell/-/grunt-shell-0.1.0.tgz"},"readme":"","maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"directories":{}},"0.1.1":{"name":"grunt-shell","version":"0.1.1","description":"Grunt task to run shell commands","keywords":["gruntplugin","grunt","shell","command","exec","cli"],"homepage":"https://github.com/sindresorhus/grunt-shell","bugs":{"name":"https://github.com/sindresorhus/grunt-shell/issues"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"main":"grunt.js","bin":{"grunt-shell":"bin/grunt-shell"},"repository":{"type":"git","url":"git://github.com/sindresorhus/grunt-shell.git"},"dependencies":{"grunt":"~0.3.9"},"engines":{"node":">=0.6.0"},"licenses":{"type":"MIT"},"_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"_id":"grunt-shell@0.1.1","devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.15","_defaultsLoaded":true,"dist":{"shasum":"e559832887d0444bc64f13bf9c8624916039a1e3","tarball":"http://registry.npmjs.org/grunt-shell/-/grunt-shell-0.1.1.tgz"},"readme":"","maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"directories":{}},"0.1.2":{"name":"grunt-shell","version":"0.1.2","description":"Grunt task to run shell commands","keywords":["gruntplugin","grunt","shell","command","exec","cli"],"homepage":"https://github.com/sindresorhus/grunt-shell","bugs":{"name":"https://github.com/sindresorhus/grunt-shell/issues"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"main":"grunt.js","bin":{"grunt-shell":"bin/grunt-shell"},"repository":{"type":"git","url":"git://github.com/sindresorhus/grunt-shell.git"},"dependencies":{"grunt":"~0.3.10"},"engines":{"node":">=0.6.0"},"licenses":{"type":"MIT"},"_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"_id":"grunt-shell@0.1.2","devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"17ff0cf20cf3453917aff0b56c9d23f86da5ff2d","tarball":"http://registry.npmjs.org/grunt-shell/-/grunt-shell-0.1.2.tgz"},"readme":"","maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"directories":{}},"0.1.3":{"name":"grunt-shell","version":"0.1.3","description":"Grunt task to run shell commands","keywords":["gruntplugin","grunt","shell","command","cmd","exec","spawn","cli"],"homepage":"https://github.com/sindresorhus/grunt-shell","bugs":"https://github.com/sindresorhus/grunt-shell/issues","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"main":"grunt.js","bin":{"grunt-shell":"bin/grunt-shell"},"repository":{"type":"git","url":"git://github.com/sindresorhus/grunt-shell.git"},"devDependencies":{"grunt":"~0.3.12"},"engines":{"node":">=0.8.0"},"licenses":{"type":"MIT"},"readme":"# grunt-shell\n\n[Grunt][grunt] task to run shell commands.\n\nE.g. compile Compass (`compass compile`) or get the current git branch (`git branch`).\n\n\n## Getting started\n\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-shell`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-shell');\n```\n\n\n## Documentation\n\n\n### Example usage\n\nThis grunt task is a [multi task](https://github.com/cowboy/grunt/blob/master/docs/types_of_tasks.md#multi-tasks-%E2%9A%91), which means you can specify multiple subtasks and grunt will iterate over them. The `dist` below is a subtask, you could e.g. create a `dev` subtask to handle stuff while developing. You can also add a special subtask named `_options` that can contain options for all your subtasks.\n\n\n#### Run command\n\nCreate a folder named `test`.\n\n```javascript\nshell: {\n\tmake_directory: {\n\t\tcommand: 'mkdir test'\n\t}\n}\n```\n\n\n#### Run command and display output\n\nOutput a directory listing to your Terminal.\n\n```javascript\nshell: {\n\tdirectory_listing: {\n\t\tcommand: 'ls',\n\t\tstdout: true\n\t}\n}\n```\n\n\n#### Run command and handle output\n\nDo whatever you want with the stdout.\n\n```javascript\nfunction log() {\n\tconsole.log( this );\n}\n\n...\n\nshell: {\n\tdirectory_listing: {\n\t\tcommand: 'ls',\n\t\tstdout: log\n\t}\n}\n```\n\n#### Option passed to the .exec() method\n\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` option.\n\n```javascript\nshell: {\n\tsubfolder_ls: {\n\t\tcommand: 'ls',\n\t\tstdout: true,\n\t\texecOptions: {\n\t\t\tcwd: './tasks'\n\t\t}\n\t}\n}\n```\n\n\n#### Custom callback\n\nDefine custom callback method to handle everything yourself. Check out [shell.js](https://github.com/sindresorhus/grunt-shell/blob/master/tasks/shell.js) to see how it's handled by default.\n\n```javascript\nfunction customHandler() {\n\tconsole.log( this, this.data.stdout );\n}\n\n...\n\nshell: {\n\tls: {\n\t\tcommand: 'ls',\n\t\tcallback: customHandler\n\t}\n}\n```\n\n\n#### Multiple subtasks\n\nThis task is a [multi task](https://github.com/cowboy/grunt/blob/master/docs/types_of_tasks.md#multi-tasks-%E2%9A%91), which means you can specify multiple subtasks and grunt will iterate over them.\n\n```javascript\nshell: {\n\tdirectory_listing: {\n\t\tcommand: 'ls',\n\t\tstdout: true\n\t},\n\tcompile_coffescript: {\n\t\tcommand: 'coffee main.coffee',\n\t\tfailOnError: true\n\t}\n}\n```\n\n#### Global options\n\nYou can define global options in a subtask called `_options`. Your subtasks will then inherit those options with the ability to override them.\n\n\n```javascript\nshell: {\n\tdirectory_listing: {\n\t\tcommand: 'ls',\n\t\tstdout: true\n\t},\n\tcreate_folder: {\n\t\tcommand: 'mkdir test',\n\t\tfailOnError: false\n\t},\n\t_options: {\n\t\tfailOnError: true\n\t}\n}\n```\n\n\n### Options\n\n\n#### command\n\n**Required**  \nAccepts: String\n\nYour command is my wish.\n\n\n#### stdout\n\nDefault: `false`  \nAccepts: Boolean / Function\n\nShow stdout in the Terminal. You can supply a function to handle the output.\n\n\n#### stderr\n\nDefault: `false`  \nAccepts: Boolean / Function\n\nShow stderr in the Terminal. You can supply a function to handle the output.\n\n\n#### failOnError\n\nDefault: `false`  \nAccepts: Boolean\n\nFail task if it encounters an error.\n\n\n#### execOptions\n\nDefault: `undefined`  \nAccepts: Object\n\nSpecify some options to be passed to the [.exec()](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\n\n- `cwd` String *Current working directory of the child process*\n- `env` Object *Environment key-value pairs*\n- `setsid` Boolean\n- `encoding` String *(Default: 'utf8')*\n- `timeout` Number *(Default: 0)*\n- `maxBuffer` Number *(Default: 200\\*1024)*\n- `killSignal` String *(Default: 'SIGTERM')*\n\n\n#### callback\n\nDefault: `undefined`  \nAccepts: Function\n\nLets you override the default callback with your own. Everything you need is available on `this`.\n\n\n## Tests\n\nGrunt currently doesn't have a way to test tasks directly. You can test this task by running `grunt` and manually verify that it works.\n\n\n## Contribute\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\n\n\n## License\n\nMIT License\n(c) [Sindre Sorhus](http://sindresorhus.com)\n\n\n[grunt]: https://github.com/cowboy/grunt\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md","_id":"grunt-shell@0.1.3","dist":{"shasum":"c0783244b85c504aa3f7454a0bbb723a0c488a05","tarball":"http://registry.npmjs.org/grunt-shell/-/grunt-shell-0.1.3.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"directories":{}},"0.1.4":{"name":"grunt-shell","version":"0.1.4","description":"Grunt task to run shell commands","keywords":["gruntplugin","grunt","shell","command","cmd","exec","spawn","cli"],"homepage":"https://github.com/sindresorhus/grunt-shell","bugs":"https://github.com/sindresorhus/grunt-shell/issues","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"main":"grunt.js","bin":{"grunt-shell":"bin/grunt-shell"},"repository":{"type":"git","url":"git://github.com/sindresorhus/grunt-shell.git"},"devDependencies":{"grunt":"~0.3.12"},"engines":{"node":">=0.8.0"},"licenses":{"type":"MIT"},"readme":"# grunt-shell\n\n[Grunt][grunt] task to run shell commands.\n\nE.g. compile Compass (`compass compile`) or get the current git branch (`git branch`).\n\n\n## Getting started\n\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-shell`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-shell');\n```\n\n\n## Documentation\n\n\n### Example usage\n\nThis grunt task is a [multi task](https://github.com/cowboy/grunt/blob/master/docs/types_of_tasks.md#multi-tasks-%E2%9A%91), which means you can specify multiple subtasks and grunt will iterate over them. The `dist` below is a subtask, you could e.g. create a `dev` subtask to handle stuff while developing. You can also add a special subtask named `_options` that can contain options for all your subtasks.\n\n\n#### Run command\n\nCreate a folder named `test`.\n\n```javascript\nshell: {\n\tmake_directory: {\n\t\tcommand: 'mkdir test'\n\t}\n}\n```\n\nCommand expand templates :\n\n```javascript\ntest_dir: 'test',\nshell: {\n\tmake_directory: {\n\t\tcommand: 'mkdir <% test_dir %>'\n\t}\n}\n```\n\n\n\n#### Run command and display output\n\nOutput a directory listing to your Terminal.\n\n```javascript\nshell: {\n\tdirectory_listing: {\n\t\tcommand: 'ls',\n\t\tstdout: true\n\t}\n}\n```\n\n\n#### Run command and handle output\n\nDo whatever you want with the stdout.\n\n```javascript\nfunction log() {\n\tconsole.log( this );\n}\n\n...\n\nshell: {\n\tdirectory_listing: {\n\t\tcommand: 'ls',\n\t\tstdout: log\n\t}\n}\n```\n\n#### Option passed to the .exec() method\n\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` option.\n\n```javascript\nshell: {\n\tsubfolder_ls: {\n\t\tcommand: 'ls',\n\t\tstdout: true,\n\t\texecOptions: {\n\t\t\tcwd: './tasks'\n\t\t}\n\t}\n}\n```\n\n\n#### Custom callback\n\nDefine custom callback method to handle everything yourself. Check out [shell.js](https://github.com/sindresorhus/grunt-shell/blob/master/tasks/shell.js) to see how it's handled by default.\n\n```javascript\nfunction customHandler() {\n\tconsole.log( this, this.data.stdout );\n}\n\n...\n\nshell: {\n\tls: {\n\t\tcommand: 'ls',\n\t\tcallback: customHandler\n\t}\n}\n```\n\n\n#### Multiple subtasks\n\nThis task is a [multi task](https://github.com/cowboy/grunt/blob/master/docs/types_of_tasks.md#multi-tasks-%E2%9A%91), which means you can specify multiple subtasks and grunt will iterate over them.\n\n```javascript\nshell: {\n\tdirectory_listing: {\n\t\tcommand: 'ls',\n\t\tstdout: true\n\t},\n\tcompile_coffescript: {\n\t\tcommand: 'coffee main.coffee',\n\t\tfailOnError: true\n\t}\n}\n```\n\n#### Global options\n\nYou can define global options in a subtask called `_options`. Your subtasks will then inherit those options with the ability to override them.\n\n\n```javascript\nshell: {\n\tdirectory_listing: {\n\t\tcommand: 'ls',\n\t\tstdout: true\n\t},\n\tcreate_folder: {\n\t\tcommand: 'mkdir test',\n\t\tfailOnError: false\n\t},\n\t_options: {\n\t\tfailOnError: true\n\t}\n}\n```\n\n\n### Options\n\n\n#### command\n\n**Required**  \nAccepts: String\n\nYour command is my wish.\n\n\n#### stdout\n\nDefault: `false`  \nAccepts: Boolean / Function\n\nShow stdout in the Terminal. You can supply a function to handle the output.\n\n\n#### stderr\n\nDefault: `false`  \nAccepts: Boolean / Function\n\nShow stderr in the Terminal. You can supply a function to handle the output.\n\n\n#### failOnError\n\nDefault: `false`  \nAccepts: Boolean\n\nFail task if it encounters an error.\n\n\n#### execOptions\n\nDefault: `undefined`  \nAccepts: Object\n\nSpecify some options to be passed to the [.exec()](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\n\n- `cwd` String *Current working directory of the child process*\n- `env` Object *Environment key-value pairs*\n- `setsid` Boolean\n- `encoding` String *(Default: 'utf8')*\n- `timeout` Number *(Default: 0)*\n- `maxBuffer` Number *(Default: 200\\*1024)*\n- `killSignal` String *(Default: 'SIGTERM')*\n\n\n#### callback\n\nDefault: `undefined`  \nAccepts: Function\n\nLets you override the default callback with your own. Everything you need is available on `this`.\n\n\n## Tests\n\nGrunt currently doesn't have a way to test tasks directly. You can test this task by running `grunt` and manually verify that it works.\n\n\n## Contribute\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\n\n\n## License\n\nMIT License\n(c) [Sindre Sorhus](http://sindresorhus.com)\n\n\n[grunt]: https://github.com/cowboy/grunt\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md","readmeFilename":"readme.md","_id":"grunt-shell@0.1.4","dist":{"shasum":"c3bb3da42550424b0435ef1d87235a616a8b58ef","tarball":"http://registry.npmjs.org/grunt-shell/-/grunt-shell-0.1.4.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"directories":{}},"0.2.0":{"name":"grunt-shell","version":"0.2.0","description":"Run shell commands","keywords":["gruntplugin","grunt","shell","command","cmd","exec","spawn","cli"],"homepage":"https://github.com/sindresorhus/grunt-shell","bugs":"https://github.com/sindresorhus/grunt-shell/issues","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"git://github.com/sindresorhus/grunt-shell.git"},"dependencies":{},"devDependencies":{"grunt":"~0.4.0"},"engines":{"node":">=0.8.0"},"licenses":{"type":"MIT"},"readme":"# grunt-shell\n\n*Requires grunt 0.4. Use version 0.1.4 for grunt 0.3 compatibility*\n\n[Grunt][grunt] task to run shell commands.\n\nA good way to interact with other CLI tools. E.g. compiling Compass `compass compile` or get the current git branch `git branch`.\n\n\n## Getting Started\n\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-shell --save-dev\n```\n\n[grunt]: http://gruntjs.com\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\n\n\n## Documentation\n\n\n### Example usage\n\n\n#### Run command\n\nCreate a folder named `test`.\n\n```javascript\nshell: {\n\tmakeDir: {\n\t\tcommand: 'mkdir test'\n\t}\n}\n```\n\nThe `command` property supports templates :\n\n```javascript\ntestDir: 'test',\nshell: {\n\tmakeDir: {\n\t\tcommand: 'mkdir <%= testDir %>'\n\t}\n}\n```\n\n\n\n#### Run command and display the output\n\nOutput a directory listing in your Terminal.\n\n```javascript\nshell: {\n\tdirListing: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tstdout: true\n\t\t}\n\t}\n}\n```\n\n\n#### Custom callback\n\nDo whatever you want with the output.\n\n```javascript\nfunction log(err, stdout, stderr, cb) {\n\tconsole.log(stdout);\n}\n\n...\n\nshell: {\n\tdirListing: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tcallback: log\n\t\t}\n\t}\n}\n```\n\n#### Option passed to the .exec() method\n\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` (current working directory) option.\n\n```javascript\nshell: {\n\tsubfolderLs: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tstdout: true,\n\t\t\texecOptions: {\n\t\t\t\tcwd: 'tasks'\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\n### Config\n\n\n#### command\n\n**Required**  \nType: `String`\n\nThe command you want to run. Supports templates.\n\n\n### Options\n\n\n#### stdout\n\nDefault: `false`  \nType: `Boolean`\n\nShow stdout in the Terminal.\n\n\n#### stderr\n\nDefault: `false`  \nType: `Boolean`\n\nShow stderr in the Terminal.\n\n\n#### failOnError\n\nDefault: `false`  \nType: `Boolean`\n\nFail task if it encounters an error. Does not apply if you specify a `callback`.\n\n\n#### callback(err, stdout, stderr, cb)\n\nDefault: `function () {}`  \nType: `Function`\n\nLets you override the default callback with your own.\n\n**Make sure to call the `cb` method when you're done.**\n\n\n#### execOptions\n\nDefault: `undefined`  \nAccepts: Object\n\nSpecify some options to be passed to the [.exec()](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\n\n- `cwd` String *Current working directory of the child process*\n- `env` Object *Environment key-value pairs*\n- `setsid` Boolean\n- `encoding` String *(Default: 'utf8')*\n- `timeout` Number *(Default: 0)*\n- `maxBuffer` Number *(Default: 200\\*1024)*\n- `killSignal` String *(Default: 'SIGTERM')*\n\n\n## Upgrade from 0.1.3 to 0.2.0\n\nBecause of the transition to grunt 0.4 there are some changes. To conform to new grunt standards, all options are now to be specified in an `options` object. I also took the opportunity to improve the task. The `stdout` and `stderr` options now only supports a boolean. If you want to do something with the result use the `callback` option. The `callback` option also changed.\n\n\n## Tests\n\nGrunt currently doesn't have a way to test tasks directly. You can test this task by running `grunt` and manually verify that it works.\n\n\n## Contribute\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\n\n\n## License\n\nMIT License\n(c) [Sindre Sorhus](http://sindresorhus.com)\n","readmeFilename":"readme.md","_id":"grunt-shell@0.2.0","dist":{"shasum":"55a00b363b86845b85f802fb2ace2de346bb4053","tarball":"http://registry.npmjs.org/grunt-shell/-/grunt-shell-0.2.0.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"directories":{}},"0.2.1":{"name":"grunt-shell","version":"0.2.1","description":"Run shell commands","keywords":["gruntplugin","shell","command","cmd","exec","spawn","cli"],"homepage":"https://github.com/sindresorhus/grunt-shell","bugs":"https://github.com/sindresorhus/grunt-shell/issues","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"git://github.com/sindresorhus/grunt-shell.git"},"scripts":{"test":"grunt"},"devDependencies":{"grunt":"~0.4.0"},"peerDependencies":{"grunt":"~0.4.0"},"engines":{"node":">=0.8.0"},"licenses":{"type":"MIT"},"readme":"# grunt-shell\n\n*Requires grunt 0.4. Use version 0.1.4 for grunt 0.3 compatibility*\n\n[Grunt][grunt] task to run shell commands.\n\nA good way to interact with other CLI tools. E.g. compiling Compass `compass compile` or get the current git branch `git branch`.\n\n\n## Getting Started\n\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-shell --save-dev\n```\n\n[grunt]: http://gruntjs.com\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\n\n\n## Documentation\n\n\n### Example usage\n\n\n#### Run command\n\nCreate a folder named `test`.\n\n```javascript\nshell: {\n\tmakeDir: {\n\t\tcommand: 'mkdir test'\n\t}\n}\n```\n\nThe `command` property supports templates :\n\n```javascript\ntestDir: 'test',\nshell: {\n\tmakeDir: {\n\t\tcommand: 'mkdir <%= testDir %>'\n\t}\n}\n```\n\n\n\n#### Run command and display the output\n\nOutput a directory listing in your Terminal.\n\n```javascript\nshell: {\n\tdirListing: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tstdout: true\n\t\t}\n\t}\n}\n```\n\n\n#### Custom callback\n\nDo whatever you want with the output.\n\n```javascript\nfunction log(err, stdout, stderr, cb) {\n\tconsole.log(stdout);\n}\n\n...\n\nshell: {\n\tdirListing: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tcallback: log\n\t\t}\n\t}\n}\n```\n\n#### Option passed to the .exec() method\n\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` (current working directory) option.\n\n```javascript\nshell: {\n\tsubfolderLs: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tstdout: true,\n\t\t\texecOptions: {\n\t\t\t\tcwd: 'tasks'\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\n### Config\n\n\n#### command\n\n**Required**  \nType: `String`\n\nThe command you want to run. Supports templates.\n\n\n### Options\n\n\n#### stdout\n\nDefault: `false`  \nType: `Boolean`\n\nShow stdout in the Terminal.\n\n\n#### stderr\n\nDefault: `false`  \nType: `Boolean`\n\nShow stderr in the Terminal.\n\n\n#### failOnError\n\nDefault: `false`  \nType: `Boolean`\n\nFail task if it encounters an error. Does not apply if you specify a `callback`.\n\n\n#### callback(err, stdout, stderr, cb)\n\nDefault: `function () {}`  \nType: `Function`\n\nLets you override the default callback with your own.\n\n**Make sure to call the `cb` method when you're done.**\n\n\n#### execOptions\n\nDefault: `undefined`  \nAccepts: Object\n\nSpecify some options to be passed to the [.exec()](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\n\n- `cwd` String *Current working directory of the child process*\n- `env` Object *Environment key-value pairs*\n- `setsid` Boolean\n- `encoding` String *(Default: 'utf8')*\n- `timeout` Number *(Default: 0)*\n- `maxBuffer` Number *(Default: 200\\*1024)*\n- `killSignal` String *(Default: 'SIGTERM')*\n\n\n## Upgrade from 0.1.4 to 0.2.0\n\nBecause of the transition to grunt 0.4 there are some changes. To conform to new grunt standards, all options are now to be specified in an `options` object. I also took the opportunity to improve the task. The `stdout` and `stderr` options now only supports a boolean. If you want to do something with the result use the `callback` option. The `callback` option also changed.\n\n\n## Tests\n\nGrunt currently doesn't have a way to test tasks directly. You can test this task by running `grunt` and manually verify that it works.\n\n\n## Contribute\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\n\n\n## License\n\nMIT License\n(c) [Sindre Sorhus](http://sindresorhus.com)\n","readmeFilename":"readme.md","_id":"grunt-shell@0.2.1","dist":{"shasum":"faef44141bb78f1fd4b49258e14563090326f6ae","tarball":"http://registry.npmjs.org/grunt-shell/-/grunt-shell-0.2.1.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"directories":{}},"0.2.2":{"name":"grunt-shell","version":"0.2.2","description":"Run shell commands","keywords":["gruntplugin","shell","command","cmd","exec","spawn","cli"],"homepage":"https://github.com/sindresorhus/grunt-shell","bugs":"https://github.com/sindresorhus/grunt-shell/issues","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"git://github.com/sindresorhus/grunt-shell.git"},"scripts":{"test":"grunt"},"devDependencies":{"grunt":"~0.4.0"},"peerDependencies":{"grunt":"~0.4.0"},"engines":{"node":">=0.8.0"},"licenses":{"type":"MIT"},"readme":"# grunt-shell\n\n*Requires grunt 0.4. Use version 0.1.4 for grunt 0.3 compatibility*\n\n[Grunt][grunt] task to run shell commands.\n\nA good way to interact with other CLI tools. E.g. compiling Compass `compass compile` or get the current git branch `git branch`.\n\n\n## Getting Started\n\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-shell --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-shell');\n```\n\n[grunt]: http://gruntjs.com\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\n\n\n## Documentation\n\n\n### Example usage\n\n\n#### Run command\n\nCreate a folder named `test`.\n\n```javascript\nshell: {\n\tmakeDir: {\n\t\tcommand: 'mkdir test'\n\t}\n}\n```\n\nThe `command` property supports templates :\n\n```javascript\ntestDir: 'test',\nshell: {\n\tmakeDir: {\n\t\tcommand: 'mkdir <%= testDir %>'\n\t}\n}\n```\n\n\n\n#### Run command and display the output\n\nOutput a directory listing in your Terminal.\n\n```javascript\nshell: {\n\tdirListing: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tstdout: true\n\t\t}\n\t}\n}\n```\n\n\n#### Custom callback\n\nDo whatever you want with the output.\n\n```javascript\nfunction log(err, stdout, stderr, cb) {\n\tconsole.log(stdout);\n\tcb();\n}\n\n...\n\nshell: {\n\tdirListing: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tcallback: log\n\t\t}\n\t}\n}\n```\n\n#### Option passed to the .exec() method\n\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` (current working directory) option.\n\n```javascript\nshell: {\n\tsubfolderLs: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tstdout: true,\n\t\t\texecOptions: {\n\t\t\t\tcwd: 'tasks'\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\n### Config\n\n\n#### command\n\n**Required**  \nType: `String`\n\nThe command you want to run. Supports templates.\n\n\n### Options\n\n\n#### stdout\n\nDefault: `false`  \nType: `Boolean`\n\nShow stdout in the Terminal.\n\n\n#### stderr\n\nDefault: `false`  \nType: `Boolean`\n\nShow stderr in the Terminal.\n\n\n#### failOnError\n\nDefault: `false`  \nType: `Boolean`\n\nFail task if it encounters an error. Does not apply if you specify a `callback`.\n\n\n#### callback(err, stdout, stderr, cb)\n\nDefault: `function () {}`  \nType: `Function`\n\nLets you override the default callback with your own.\n\n**Make sure to call the `cb` method when you're done.**\n\n\n#### execOptions\n\nDefault: `undefined`  \nAccepts: Object\n\nSpecify some options to be passed to the [.exec()](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\n\n- `cwd` String *Current working directory of the child process*\n- `env` Object *Environment key-value pairs*\n- `setsid` Boolean\n- `encoding` String *(Default: 'utf8')*\n- `timeout` Number *(Default: 0)*\n- `maxBuffer` Number *(Default: 200\\*1024)*\n- `killSignal` String *(Default: 'SIGTERM')*\n\n\n## Upgrade from 0.1.4 to 0.2.0\n\nBecause of the transition to grunt 0.4 there are some changes. To conform to new grunt standards, all options are now to be specified in an `options` object. I also took the opportunity to improve the task. The `stdout` and `stderr` options now only supports a boolean. If you want to do something with the result use the `callback` option. The `callback` option also changed.\n\n\n## Tests\n\nGrunt currently doesn't have a way to test tasks directly. You can test this task by running `grunt` and manually verify that it works.\n\n\n## Contribute\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\n\n\n## License\n\nMIT License\n(c) [Sindre Sorhus](http://sindresorhus.com)\n","readmeFilename":"readme.md","_id":"grunt-shell@0.2.2","dist":{"shasum":"7fde3bd33bbd4a0871638dbc4867389f7fd95fe6","tarball":"http://registry.npmjs.org/grunt-shell/-/grunt-shell-0.2.2.tgz"},"_from":".","_npmVersion":"1.2.17","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"directories":{}},"0.3.0":{"name":"grunt-shell","version":"0.3.0","description":"Run shell commands","keywords":["gruntplugin","shell","command","cmd","exec","spawn","cli"],"homepage":"https://github.com/sindresorhus/grunt-shell","bugs":{"url":"https://github.com/sindresorhus/grunt-shell/issues"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"git://github.com/sindresorhus/grunt-shell.git"},"scripts":{"test":"grunt"},"devDependencies":{"grunt":"~0.4.0"},"peerDependencies":{"grunt":"~0.4.0"},"engines":{"node":">=0.8.0"},"licenses":{"type":"MIT"},"readme":"# grunt-shell\n\n*Requires grunt 0.4. Use version 0.1.4 for grunt 0.3 compatibility*\n\n[Grunt][grunt] task to run shell commands.\n\nA good way to interact with other CLI tools. E.g. compiling Compass `compass compile` or get the current git branch `git branch`.\n\n\n## Getting Started\n\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install --save-dev grunt-shell\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-shell');\n```\n\n[grunt]: http://gruntjs.com\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\n\n\n## Documentation\n\n\n### Example usage\n\n\n#### Run command\n\nCreate a folder named `test`.\n\n```javascript\nshell: {\n\tmakeDir: {\n\t\tcommand: 'mkdir test'\n\t}\n}\n```\n\nThe `command` property supports templates:\n\n```javascript\ntestDir: 'test',\nshell: {\n\tmakeDir: {\n\t\tcommand: 'mkdir <%= testDir %>'\n\t}\n}\n```\n\nYou can also supply a function that returns the command:\n\n```javascript\nshell: {\n\tmakeDir: {\n\t\tcommand: function () {\n\t\t\treturn 'echo hello';\n\t\t}\n\t}\n}\n```\n\n\n#### Run command and display the output\n\nOutput a directory listing in your Terminal.\n\n```javascript\nshell: {\n\tdirListing: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tstdout: true\n\t\t}\n\t}\n}\n```\n\n\n#### Custom callback\n\nDo whatever you want with the output.\n\n```javascript\nfunction log(err, stdout, stderr, cb) {\n\tconsole.log(stdout);\n\tcb();\n}\n\n...\n\nshell: {\n\tdirListing: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tcallback: log\n\t\t}\n\t}\n}\n```\n\n\n#### Option passed to the .exec() method\n\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` (current working directory) option.\n\n```javascript\nshell: {\n\tsubfolderLs: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tstdout: true,\n\t\t\texecOptions: {\n\t\t\t\tcwd: 'tasks'\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\n#### Multiple commands\n\nRun multiple commands by placing them in an array which is joined using `&&` or `;`. `&&` means run this only if the previous command succeded. You can also use `&` to have the commands run concurrently (by executing all commands except the last one in a subshell).\n\n```javascript\nshell: {\n\tmultiple: {\n\t\tcommand: [\n\t\t\t'mkdir test',\n\t\t\t'cd test',\n\t\t\t'ls'\n\t\t].join('&&')\n\t}\n}\n```\n\n\n### Config\n\n\n#### command\n\n**Required**  \nType: `String|Function`\n\nThe command you want to run or a function which returns it. Supports underscore templates.\n\n\n### Options\n\n\n#### stdout\n\nDefault: `false`  \nType: `Boolean`\n\nShow stdout in the Terminal.\n\n\n#### stderr\n\nDefault: `false`  \nType: `Boolean`\n\nShow stderr in the Terminal.\n\n\n#### failOnError\n\nDefault: `false`  \nType: `Boolean`\n\nFail task if it encounters an error. Does not apply if you specify a `callback`.\n\n\n#### callback(err, stdout, stderr, cb)\n\nDefault: `function () {}`  \nType: `Function`\n\nLets you override the default callback with your own.\n\n**Make sure to call the `cb` method when you're done.**\n\n\n#### execOptions\n\nDefault: `undefined`  \nAccepts: Object\n\nSpecify some options to be passed to the [.exec()](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\n\n- `cwd` String *Current working directory of the child process*\n- `env` Object *Environment key-value pairs*\n- `setsid` Boolean\n- `encoding` String *(Default: 'utf8')*\n- `timeout` Number *(Default: 0)*\n- `maxBuffer` Number *(Default: 200\\*1024)*\n- `killSignal` String *(Default: 'SIGTERM')*\n\n\n## Upgrade from 0.1.4 to 0.2.0\n\nBecause of the transition to grunt 0.4 there are some changes. To conform to new grunt standards, all options are now to be specified in an `options` object. I also took the opportunity to improve the task. The `stdout` and `stderr` options now only supports a boolean. If you want to do something with the result use the `callback` option. The `callback` option also changed.\n\n\n## Tests\n\nGrunt currently doesn't have a way to test tasks directly. You can test this task by running `grunt` and manually verify that it works.\n\n\n## License\n\nMIT License • © [Sindre Sorhus](http://sindresorhus.com)\n","readmeFilename":"readme.md","_id":"grunt-shell@0.3.0","dist":{"shasum":"a2ec993d7841a3d9993fa408e9f9880528335171","tarball":"http://registry.npmjs.org/grunt-shell/-/grunt-shell-0.3.0.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"directories":{}},"0.3.1":{"name":"grunt-shell","version":"0.3.1","description":"Run shell commands","keywords":["gruntplugin","shell","command","cmd","exec","spawn","process","cli"],"homepage":"https://github.com/sindresorhus/grunt-shell","bugs":{"url":"https://github.com/sindresorhus/grunt-shell/issues"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"git://github.com/sindresorhus/grunt-shell.git"},"scripts":{"test":"grunt"},"dependencies":{"stripcolorcodes":"~0.1.0"},"devDependencies":{"grunt":"~0.4.0"},"peerDependencies":{"grunt":"~0.4.0"},"engines":{"node":">=0.8.0"},"licenses":{"type":"MIT"},"files":["tasks/shell.js"],"readme":"# grunt-shell\n\n*Requires grunt 0.4. Use version 0.1.4 for grunt 0.3 compatibility*\n\n[Grunt][grunt] task to run shell commands.\n\nA good way to interact with other CLI tools. E.g. compiling Compass `compass compile` or get the current git branch `git branch`.\n\n\n## Getting Started\n\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install --save-dev grunt-shell\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-shell');\n```\n\n[grunt]: http://gruntjs.com\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\n\n\n## Documentation\n\n\n### Example usage\n\n\n#### Run command\n\nCreate a folder named `test`.\n\n```javascript\nshell: {\n\tmakeDir: {\n\t\tcommand: 'mkdir test'\n\t}\n}\n```\n\nThe `command` property supports templates:\n\n```javascript\ntestDir: 'test',\nshell: {\n\tmakeDir: {\n\t\tcommand: 'mkdir <%= testDir %>'\n\t}\n}\n```\n\nYou can also supply a function that returns the command:\n\n```javascript\nshell: {\n\tmakeDir: {\n\t\tcommand: function () {\n\t\t\treturn 'echo hello';\n\t\t}\n\t}\n}\n```\n\n\n#### Run command and display the output\n\nOutput a directory listing in your Terminal.\n\n```javascript\nshell: {\n\tdirListing: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tstdout: true\n\t\t}\n\t}\n}\n```\n\n\n#### Custom callback\n\nDo whatever you want with the output.\n\n```javascript\nfunction log(err, stdout, stderr, cb) {\n\tconsole.log(stdout);\n\tcb();\n}\n\n...\n\nshell: {\n\tdirListing: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tcallback: log\n\t\t}\n\t}\n}\n```\n\n\n#### Option passed to the .exec() method\n\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` (current working directory) option.\n\n```javascript\nshell: {\n\tsubfolderLs: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tstdout: true,\n\t\t\texecOptions: {\n\t\t\t\tcwd: 'tasks'\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\n#### Multiple commands\n\nRun multiple commands by placing them in an array which is joined using `&&` or `;`. `&&` means run this only if the previous command succeded. You can also use `&` to have the commands run concurrently (by executing all commands except the last one in a subshell).\n\n```javascript\nshell: {\n\tmultiple: {\n\t\tcommand: [\n\t\t\t'mkdir test',\n\t\t\t'cd test',\n\t\t\t'ls'\n\t\t].join('&&')\n\t}\n}\n```\n\n\n### Config\n\n\n#### command\n\n**Required**  \nType: `String|Function`\n\nThe command you want to run or a function which returns it. Supports underscore templates.\n\n\n### Options\n\n\n#### stdout\n\nDefault: `false`  \nType: `Boolean`\n\nShow stdout in the Terminal.\n\n\n#### stderr\n\nDefault: `false`  \nType: `Boolean`\n\nShow stderr in the Terminal.\n\n\n#### failOnError\n\nDefault: `false`  \nType: `Boolean`\n\nFail task if it encounters an error. Does not apply if you specify a `callback`.\n\n\n#### callback(err, stdout, stderr, cb)\n\nDefault: `function () {}`  \nType: `Function`\n\nLets you override the default callback with your own.\n\n**Make sure to call the `cb` method when you're done.**\n\n\n#### execOptions\n\nDefault: `undefined`  \nAccepts: Object\n\nSpecify some options to be passed to the [.exec()](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\n\n- `cwd` String *Current working directory of the child process*\n- `env` Object *Environment key-value pairs*\n- `setsid` Boolean\n- `encoding` String *(Default: 'utf8')*\n- `timeout` Number *(Default: 0)*\n- `maxBuffer` Number *(Default: 200\\*1024)*\n- `killSignal` String *(Default: 'SIGTERM')*\n\n\n## Upgrade from 0.1.4 to 0.2.0\n\nBecause of the transition to grunt 0.4 there are some changes. To conform to new grunt standards, all options are now to be specified in an `options` object. I also took the opportunity to improve the task. The `stdout` and `stderr` options now only supports a boolean. If you want to do something with the result use the `callback` option. The `callback` option also changed.\n\n\n## Tests\n\nGrunt currently doesn't have a way to test tasks directly. You can test this task by running `grunt` and manually verify that it works.\n\n\n## License\n\nMIT License • © [Sindre Sorhus](http://sindresorhus.com)\n","readmeFilename":"readme.md","_id":"grunt-shell@0.3.1","dist":{"shasum":"3cb923ccb96af5d3e4980899851a4321cff7d8ee","tarball":"http://registry.npmjs.org/grunt-shell/-/grunt-shell-0.3.1.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"directories":{}},"0.4.0":{"name":"grunt-shell","version":"0.4.0","description":"Run shell commands","keywords":["gruntplugin","shell","command","cmd","exec","spawn","process","cli"],"homepage":"https://github.com/sindresorhus/grunt-shell","bugs":{"url":"https://github.com/sindresorhus/grunt-shell/issues"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"git://github.com/sindresorhus/grunt-shell.git"},"scripts":{"test":"grunt"},"dependencies":{"stripcolorcodes":"~0.1.0"},"devDependencies":{"grunt":"~0.4.0"},"peerDependencies":{"grunt":"~0.4.0"},"engines":{"node":">=0.8.0"},"licenses":{"type":"MIT"},"files":["tasks/shell.js"],"readme":"# grunt-shell\n\n*Requires grunt 0.4. Use version 0.1.4 for grunt 0.3 compatibility*\n\n[Grunt][grunt] task to run shell commands.\n\nA good way to interact with other CLI tools. E.g. compiling Compass `compass compile` or get the current git branch `git branch`.\n\n\n## Getting Started\n\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install --save-dev grunt-shell\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-shell');\n```\n\n[grunt]: http://gruntjs.com\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\n\n\n## Documentation\n\n\n### Example config\n\n```js\ngrunt.initConfig({\n\tshell: {\t\t\t\t\t\t\t\t// Task\n\t\tlistFolders: {\t\t\t\t\t\t// Target\n\t\t\toptions: {\t\t\t\t\t\t// Options\n\t\t\t\tstdout: true\n\t\t\t},\n\t\t\tcommand: 'ls'\n\t\t}\n\t}\n});\n\ngrunt.loadNpmTasks('grunt-shell');\ngrunt.registerTask('default', ['shell']);\n```\n\n\n### Example usage\n\n\n#### Run command\n\nCreate a folder named `test`.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tmakeDir: {\n\t\t\tcommand: 'mkdir test'\n\t\t}\n\t}\n});\n```\n\nThe `command` property supports templates:\n\n```js\ngrunt.initConfig({\n\ttestDir: 'test',\n\tshell: {\n\t\tmakeDir: {\n\t\t\tcommand: 'mkdir <%= testDir %>'\n\t\t}\n\t}\n});\n```\n\nYou can also supply a function that returns the command:\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tmakeDir: {\n\t\t\tcommand: function () {\n\t\t\t\treturn 'echo hello';\n\t\t\t}\n\t\t}\n\t}\n});\n```\nWhich can also take arguments:\n\n```js\nshell: {\n\tmakeDir: {\n\t\tcommand: function (greeting) {\n\t\t\treturn 'echo ' + greeting;\n\t\t}\n\t}\n}\n\ngrunt.loadNpmTasks('grunt-shell');\ngrunt.registerTask('default', ['shell:hello']);\n```\n\n\n#### Run command and display the output\n\nOutput a directory listing in your Terminal.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tdirListing: {\n\t\t\tcommand: 'ls',\n\t\t\toptions: {\n\t\t\t\tstdout: true\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n\n#### Custom callback\n\nDo whatever you want with the output.\n\n```js\nfunction log(err, stdout, stderr, cb) {\n\tconsole.log(stdout);\n\tcb();\n}\n\ngrunt.initConfig({\n\tshell: {\n\t\tdirListing: {\n\t\t\tcommand: 'ls',\n\t\t\toptions: {\n\t\t\t\tcallback: log\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n\n#### Option passed to the .exec() method\n\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` (current working directory) option.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tsubfolderLs: {\n\t\t\tcommand: 'ls',\n\t\t\toptions: {\n\t\t\t\tstdout: true,\n\t\t\t\texecOptions: {\n\t\t\t\t\tcwd: 'tasks'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n\n#### Multiple commands\n\nRun multiple commands by placing them in an array which is joined using `&&` or `;`. `&&` means run this only if the previous command succeded. You can also use `&` to have the commands run concurrently (by executing all commands except the last one in a subshell).\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tmultiple: {\n\t\t\tcommand: [\n\t\t\t\t'mkdir test',\n\t\t\t\t'cd test',\n\t\t\t\t'ls'\n\t\t\t].join('&&')\n\t\t}\n\t}\n});\n```\n\n\n### Config\n\n\n#### command\n\n**Required**  \nType: `String|Function`\n\nThe command you want to run or a function which returns it. Supports underscore templates.\n\n\n### Options\n\n\n#### stdout\n\nDefault: `false`  \nType: `Boolean`\n\nShow stdout in the Terminal.\n\n\n#### stderr\n\nDefault: `false`  \nType: `Boolean`\n\nShow stderr in the Terminal.\n\n\n#### failOnError\n\nDefault: `false`  \nType: `Boolean`\n\nFail task if it encounters an error. Does not apply if you specify a `callback`.\n\n\n#### callback(err, stdout, stderr, cb)\n\nDefault: `function () {}`  \nType: `Function`\n\nLets you override the default callback with your own.\n\n**Make sure to call the `cb` method when you're done.**\n\n\n#### execOptions\n\nDefault: `undefined`  \nAccepts: Object\n\nSpecify some options to be passed to the [.exec()](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\n\n- `cwd` String *Current working directory of the child process*\n- `env` Object *Environment key-value pairs*\n- `setsid` Boolean\n- `encoding` String *(Default: 'utf8')*\n- `timeout` Number *(Default: 0)*\n- `maxBuffer` Number *(Default: 200\\*1024)*\n- `killSignal` String *(Default: 'SIGTERM')*\n\n\n## Upgrade from 0.1.4 to 0.2.0\n\nBecause of the transition to grunt 0.4 there are some changes. To conform to new grunt standards, all options are now to be specified in an `options` object. I also took the opportunity to improve the task. The `stdout` and `stderr` options now only supports a boolean. If you want to do something with the result use the `callback` option. The `callback` option also changed.\n\n\n## Tests\n\nGrunt currently doesn't have a way to test tasks directly. You can test this task by running `grunt` and manually verify that it works.\n\n\n## License\n\nMIT License • © [Sindre Sorhus](http://sindresorhus.com)\n","readmeFilename":"readme.md","_id":"grunt-shell@0.4.0","dist":{"shasum":"306a2b58616fe0ae6f0933cf874280909cbf2971","tarball":"http://registry.npmjs.org/grunt-shell/-/grunt-shell-0.4.0.tgz"},"_from":".","_npmVersion":"1.3.10","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"directories":{}},"0.5.0":{"name":"grunt-shell","version":"0.5.0","description":"Run shell commands","keywords":["gruntplugin","shell","command","cmd","exec","spawn","process","cli"],"homepage":"https://github.com/sindresorhus/grunt-shell","bugs":{"url":"https://github.com/sindresorhus/grunt-shell/issues"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"git://github.com/sindresorhus/grunt-shell.git"},"scripts":{"test":"grunt"},"dependencies":{"stripcolorcodes":"~0.1.0"},"devDependencies":{"grunt":"~0.4.0"},"peerDependencies":{"grunt":"~0.4.0"},"engines":{"node":">=0.8.0"},"licenses":{"type":"MIT"},"files":["tasks/shell.js"],"readme":"# grunt-shell\n\n*Requires grunt 0.4. Use version 0.1.4 for grunt 0.3 compatibility*\n\n[Grunt][grunt] task to run shell commands.\n\nA good way to interact with other CLI tools. E.g. compiling Compass `compass compile` or get the current git branch `git branch`.\n\n\n## Getting Started\n\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install --save-dev grunt-shell\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-shell');\n```\n\n[grunt]: http://gruntjs.com\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\n\n\n## Documentation\n\n\n### Example config\n\n```js\ngrunt.initConfig({\n\tshell: {\t\t\t\t\t\t\t\t// Task\n\t\tlistFolders: {\t\t\t\t\t\t// Target\n\t\t\toptions: {\t\t\t\t\t\t// Options\n\t\t\t\tstdout: true\n\t\t\t},\n\t\t\tcommand: 'ls'\n\t\t}\n\t}\n});\n\ngrunt.loadNpmTasks('grunt-shell');\ngrunt.registerTask('default', ['shell']);\n```\n\n\n### Example usage\n\n\n#### Run command\n\nCreate a folder named `test`.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tmakeDir: {\n\t\t\tcommand: 'mkdir test'\n\t\t}\n\t}\n});\n```\n\nThe `command` property supports templates:\n\n```js\ngrunt.initConfig({\n\ttestDir: 'test',\n\tshell: {\n\t\tmakeDir: {\n\t\t\tcommand: 'mkdir <%= testDir %>'\n\t\t}\n\t}\n});\n```\n\nYou can also supply a function that returns the command:\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tmakeDir: {\n\t\t\tcommand: function () {\n\t\t\t\treturn 'echo hello';\n\t\t\t}\n\t\t}\n\t}\n});\n```\nWhich can also take arguments:\n\n```js\nshell: {\n\tmakeDir: {\n\t\tcommand: function (greeting) {\n\t\t\treturn 'echo ' + greeting;\n\t\t}\n\t}\n}\n\ngrunt.loadNpmTasks('grunt-shell');\ngrunt.registerTask('default', ['shell:hello']);\n```\n\n\n#### Run command and display the output\n\nOutput a directory listing in your Terminal.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tdirListing: {\n\t\t\tcommand: 'ls',\n\t\t\toptions: {\n\t\t\t\tstdout: true\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n\n#### Custom callback\n\nDo whatever you want with the output.\n\n```js\nfunction log(err, stdout, stderr, cb) {\n\tconsole.log(stdout);\n\tcb();\n}\n\ngrunt.initConfig({\n\tshell: {\n\t\tdirListing: {\n\t\t\tcommand: 'ls',\n\t\t\toptions: {\n\t\t\t\tcallback: log\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n\n#### Option passed to the .exec() method\n\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` (current working directory) option.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tsubfolderLs: {\n\t\t\tcommand: 'ls',\n\t\t\toptions: {\n\t\t\t\tstdout: true,\n\t\t\t\texecOptions: {\n\t\t\t\t\tcwd: 'tasks'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n\n#### Multiple commands\n\nRun multiple commands by placing them in an array which is joined using `&&` or `;`. `&&` means run this only if the previous command succeded. You can also use `&` to have the commands run concurrently (by executing all commands except the last one in a subshell).\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tmultiple: {\n\t\t\tcommand: [\n\t\t\t\t'mkdir test',\n\t\t\t\t'cd test',\n\t\t\t\t'ls'\n\t\t\t].join('&&')\n\t\t}\n\t}\n});\n```\n\n\n### Config\n\n\n#### command\n\n**Required**  \nType: `String|Function`\n\nThe command you want to run or a function which returns it. Supports underscore templates.\n\n\n### Options\n\n\n#### stdout\n\nDefault: `false`  \nType: `Boolean`\n\nShow stdout in the Terminal.\n\n\n#### stderr\n\nDefault: `false`  \nType: `Boolean`\n\nShow stderr in the Terminal.\n\n\n#### failOnError\n\nDefault: `false`  \nType: `Boolean`\n\nFail task if it encounters an error. Does not apply if you specify a `callback`.\n\n\n#### callback(err, stdout, stderr, cb)\n\nDefault: `function () {}`  \nType: `Function`\n\nLets you override the default callback with your own.\n\n**Make sure to call the `cb` method when you're done.**\n\n\n#### execOptions\n\nDefault: `undefined`  \nAccepts: Object\n\nSpecify some options to be passed to the [.exec()](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\n\n- `cwd` String *Current working directory of the child process*\n- `env` Object *Environment key-value pairs*\n- `setsid` Boolean\n- `encoding` String *(Default: 'utf8')*\n- `timeout` Number *(Default: 0)*\n- `maxBuffer` Number *(Default: 200\\*1024)*\n- `killSignal` String *(Default: 'SIGTERM')*\n\n\n## Upgrade from 0.1.4 to 0.2.0\n\nBecause of the transition to grunt 0.4 there are some changes. To conform to new grunt standards, all options are now to be specified in an `options` object. I also took the opportunity to improve the task. The `stdout` and `stderr` options now only supports a boolean. If you want to do something with the result use the `callback` option. The `callback` option also changed.\n\n\n## Tests\n\nGrunt currently doesn't have a way to test tasks directly. You can test this task by running `grunt` and manually verify that it works.\n\n\n## License\n\nMIT License • © [Sindre Sorhus](http://sindresorhus.com)\n","readmeFilename":"readme.md","_id":"grunt-shell@0.5.0","dist":{"shasum":"ee4142ad1dfc0e95cf657bf82f3667a6440303d9","tarball":"http://registry.npmjs.org/grunt-shell/-/grunt-shell-0.5.0.tgz"},"_from":".","_npmVersion":"1.3.10","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"directories":{}},"0.6.0":{"name":"grunt-shell","version":"0.6.0","description":"Run shell commands","keywords":["gruntplugin","shell","command","cmd","exec","spawn","process","cli"],"license":"MIT","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"files":["tasks/shell.js"],"repository":{"type":"git","url":"sindresorhus/grunt-shell.git"},"scripts":{"test":"grunt"},"dependencies":{"chalk":"~0.3.0"},"devDependencies":{"grunt":"~0.4.0"},"peerDependencies":{"grunt":"~0.4.0"},"engines":{"node":">=0.8.0"},"readme":"# grunt-shell\n\n> Run shell commands\n\nA good way to interact with other CLI tools. E.g. compiling Compass `compass compile` or get the current git branch `git branch`.\n\n\n## Getting Started\n\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install --save-dev grunt-shell\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-shell');\n```\n\n*Tip: the [load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks) module makes it easier to load multiple grunt tasks.*\n\n[grunt]: http://gruntjs.com\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\n\n\n## Documentation\n\n\n### Example config\n\n```js\ngrunt.initConfig({\n\tshell: {\t\t\t\t\t\t\t\t// Task\n\t\tlistFolders: {\t\t\t\t\t\t// Target\n\t\t\toptions: {\t\t\t\t\t\t// Options\n\t\t\t\tstdout: true\n\t\t\t},\n\t\t\tcommand: 'ls'\n\t\t}\n\t}\n});\n\ngrunt.loadNpmTasks('grunt-shell');\ngrunt.registerTask('default', ['shell']);\n```\n\n\n### Example usage\n\n\n#### Run command\n\nCreate a folder named `test`.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tmakeDir: {\n\t\t\tcommand: 'mkdir test'\n\t\t}\n\t}\n});\n```\n\nThe `command` property supports templates:\n\n```js\ngrunt.initConfig({\n\ttestDir: 'test',\n\tshell: {\n\t\tmakeDir: {\n\t\t\tcommand: 'mkdir <%= testDir %>'\n\t\t}\n\t}\n});\n```\n\nYou can also supply a function that returns the command:\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\thello: {\n\t\t\tcommand: function () {\n\t\t\t\treturn 'echo hello';\n\t\t\t}\n\t\t}\n\t}\n});\n```\nWhich can also take arguments:\n\n```js\nshell: {\n\thello: {\n\t\tcommand: function (greeting) {\n\t\t\treturn 'echo ' + greeting;\n\t\t}\n\t}\n}\n\ngrunt.loadNpmTasks('grunt-shell');\ngrunt.registerTask('default', ['shell:hello']);\n```\n\n\n#### Run command and display the output\n\nOutput a directory listing in your Terminal.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tdirListing: {\n\t\t\tcommand: 'ls',\n\t\t\toptions: {\n\t\t\t\tstdout: true\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n\n#### Custom callback\n\nDo whatever you want with the output.\n\n```js\nfunction log(err, stdout, stderr, cb) {\n\tconsole.log(stdout);\n\tcb();\n}\n\ngrunt.initConfig({\n\tshell: {\n\t\tdirListing: {\n\t\t\tcommand: 'ls',\n\t\t\toptions: {\n\t\t\t\tcallback: log\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n\n#### Option passed to the .exec() method\n\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` (current working directory) option.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tsubfolderLs: {\n\t\t\tcommand: 'ls',\n\t\t\toptions: {\n\t\t\t\tstdout: true,\n\t\t\t\texecOptions: {\n\t\t\t\t\tcwd: 'tasks'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n\n#### Multiple commands\n\nRun multiple commands by placing them in an array which is joined using `&&` or `;`. `&&` means run this only if the previous command succeeded. You can also use `&` to have the commands run concurrently (by executing all commands except the last one in a subshell).\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tmultiple: {\n\t\t\tcommand: [\n\t\t\t\t'mkdir test',\n\t\t\t\t'cd test',\n\t\t\t\t'ls'\n\t\t\t].join('&&')\n\t\t}\n\t}\n});\n```\n\n\n### Config\n\n\n#### command\n\n**Required**  \nType: `String|Function`\n\nThe command you want to run or a function which returns it. Supports underscore templates.\n\n\n### Options\n\n\n#### stdout\n\nDefault: `false`  \nType: `Boolean`\n\nShow stdout in the Terminal.\n\n\n#### stderr\n\nDefault: `false`  \nType: `Boolean`\n\nShow stderr in the Terminal.\n\n\n#### stdin\n\nDefault: `true`  \nType: `Boolean`\n\nForward the terminal's stdin to the command.\n\n\n#### failOnError\n\nDefault: `false`  \nType: `Boolean`\n\nFail task if it encounters an error. Does not apply if you specify a `callback`.\n\n\n#### callback(err, stdout, stderr, cb)\n\nDefault: `function () {}`  \nType: `Function`\n\nLets you override the default callback with your own.\n\n**Make sure to call the `cb` method when you're done.**\n\n\n#### execOptions\n\nDefault: `undefined`  \nAccepts: Object\n\nSpecify some options to be passed to the [.exec()](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\n\n- `cwd` String *Current working directory of the child process*\n- `env` Object *Environment key-value pairs*\n- `setsid` Boolean\n- `encoding` String *(Default: 'utf8')*\n- `timeout` Number *(Default: 0)*\n- `maxBuffer` Number *(Default: 200\\*1024)*\n- `killSignal` String *(Default: 'SIGTERM')*\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n","readmeFilename":"readme.md","_id":"grunt-shell@0.6.0","dist":{"shasum":"9e9a0e1ebf2679c7d9bf26eb932e90be53d79dfb","tarball":"http://registry.npmjs.org/grunt-shell/-/grunt-shell-0.6.0.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"directories":{}},"0.6.1":{"name":"grunt-shell","version":"0.6.1","description":"Run shell commands","keywords":["gruntplugin","shell","command","cmd","exec","spawn","process","cli"],"license":"MIT","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"files":["tasks/shell.js"],"repository":{"type":"git","url":"sindresorhus/grunt-shell.git"},"scripts":{"test":"grunt"},"dependencies":{"chalk":"~0.3.0"},"devDependencies":{"grunt":"~0.4.0"},"peerDependencies":{"grunt":"~0.4.0"},"engines":{"node":">=0.8.0"},"readme":"# grunt-shell [![Build Status](https://secure.travis-ci.org/sindresorhus/grunt-shell.png?branch=master)](http://travis-ci.org/sindresorhus/grunt-shell)\n\n> Run shell commands\n\nA good way to interact with other CLI tools. E.g. compiling Compass `compass compile` or get the current git branch `git branch`.\n\n\n## Getting Started\n\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install --save-dev grunt-shell\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-shell');\n```\n\n*Tip: the [load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks) module makes it easier to load multiple grunt tasks.*\n\n[grunt]: http://gruntjs.com\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\n\n\n## Documentation\n\n\n### Example config\n\n```js\ngrunt.initConfig({\n\tshell: {\t\t\t\t\t\t\t\t// Task\n\t\tlistFolders: {\t\t\t\t\t\t// Target\n\t\t\toptions: {\t\t\t\t\t\t// Options\n\t\t\t\tstdout: true\n\t\t\t},\n\t\t\tcommand: 'ls'\n\t\t}\n\t}\n});\n\ngrunt.loadNpmTasks('grunt-shell');\ngrunt.registerTask('default', ['shell']);\n```\n\n\n### Example usage\n\n\n#### Run command\n\nCreate a folder named `test`.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tmakeDir: {\n\t\t\tcommand: 'mkdir test'\n\t\t}\n\t}\n});\n```\n\nThe `command` property supports templates:\n\n```js\ngrunt.initConfig({\n\ttestDir: 'test',\n\tshell: {\n\t\tmakeDir: {\n\t\t\tcommand: 'mkdir <%= testDir %>'\n\t\t}\n\t}\n});\n```\n\nYou can also supply a function that returns the command:\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\thello: {\n\t\t\tcommand: function () {\n\t\t\t\treturn 'echo hello';\n\t\t\t}\n\t\t}\n\t}\n});\n```\nWhich can also take arguments:\n\n```js\nshell: {\n\thello: {\n\t\tcommand: function (greeting) {\n\t\t\treturn 'echo ' + greeting;\n\t\t}\n\t}\n}\n\ngrunt.loadNpmTasks('grunt-shell');\ngrunt.registerTask('default', ['shell:hello']);\n```\n\n\n#### Run command and display the output\n\nOutput a directory listing in your Terminal.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tdirListing: {\n\t\t\tcommand: 'ls',\n\t\t\toptions: {\n\t\t\t\tstdout: true\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n\n#### Custom callback\n\nDo whatever you want with the output.\n\n```js\nfunction log(err, stdout, stderr, cb) {\n\tconsole.log(stdout);\n\tcb();\n}\n\ngrunt.initConfig({\n\tshell: {\n\t\tdirListing: {\n\t\t\tcommand: 'ls',\n\t\t\toptions: {\n\t\t\t\tcallback: log\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n\n#### Option passed to the .exec() method\n\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` (current working directory) option.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tsubfolderLs: {\n\t\t\tcommand: 'ls',\n\t\t\toptions: {\n\t\t\t\tstdout: true,\n\t\t\t\texecOptions: {\n\t\t\t\t\tcwd: 'tasks'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n\n#### Multiple commands\n\nRun multiple commands by placing them in an array which is joined using `&&` or `;`. `&&` means run this only if the previous command succeeded. You can also use `&` to have the commands run concurrently (by executing all commands except the last one in a subshell).\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tmultiple: {\n\t\t\tcommand: [\n\t\t\t\t'mkdir test',\n\t\t\t\t'cd test',\n\t\t\t\t'ls'\n\t\t\t].join('&&')\n\t\t}\n\t}\n});\n```\n\n\n### Config\n\n\n#### command\n\n**Required**  \nType: `String|Function`\n\nThe command you want to run or a function which returns it. Supports underscore templates.\n\n\n### Options\n\n\n#### stdout\n\nDefault: `false`  \nType: `Boolean`\n\nShow stdout in the Terminal.\n\n\n#### stderr\n\nDefault: `false`  \nType: `Boolean`\n\nShow stderr in the Terminal.\n\n\n#### stdin\n\nDefault: `true`  \nType: `Boolean`\n\nForward the terminal's stdin to the command.\n\n\n#### failOnError\n\nDefault: `false`  \nType: `Boolean`\n\nFail task if it encounters an error. Does not apply if you specify a `callback`.\n\n\n#### callback(err, stdout, stderr, cb)\n\nDefault: `function () {}`  \nType: `Function`\n\nLets you override the default callback with your own.\n\n**Make sure to call the `cb` method when you're done.**\n\n\n#### execOptions\n\nDefault: `undefined`  \nAccepts: Object\n\nSpecify some options to be passed to the [.exec()](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\n\n- `cwd` String *Current working directory of the child process*\n- `env` Object *Environment key-value pairs*\n- `setsid` Boolean\n- `encoding` String *(Default: 'utf8')*\n- `timeout` Number *(Default: 0)*\n- `maxBuffer` Number *(Default: 200\\*1024)*\n- `killSignal` String *(Default: 'SIGTERM')*\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n","readmeFilename":"readme.md","_id":"grunt-shell@0.6.1","dist":{"shasum":"7c75f71cabccf8a03728d766cc5fa0639dafc919","tarball":"http://registry.npmjs.org/grunt-shell/-/grunt-shell-0.6.1.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"directories":{}}},"readme":"","maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}],"time":{"0.1.0":"2012-06-04T19:48:26.332Z","0.1.1":"2012-06-06T16:49:01.033Z","0.1.2":"2012-06-28T19:33:02.826Z","0.1.3":"2012-08-25T20:44:45.480Z","0.1.4":"2012-12-02T16:51:19.796Z","0.2.0":"2013-02-10T19:32:09.419Z","0.2.1":"2013-02-22T23:38:59.643Z","0.2.2":"2013-04-06T17:42:11.271Z","0.3.0":"2013-06-24T18:16:56.880Z","0.3.1":"2013-07-11T20:16:31.530Z","0.4.0":"2013-09-17T15:53:39.279Z","0.5.0":"2013-10-10T10:44:53.250Z","0.6.0":"2013-11-15T16:54:42.672Z","0.6.1":"2013-11-22T17:52:02.743Z"},"author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"sindresorhus/grunt-shell.git"},"users":{"joeybaker":true,"passy":true},"_attachments":{"grunt-shell-0.6.1.tgz":{"content_type":"application/octet-stream","revpos":50,"digest":"md5-7woZPAkYFMwlD3s8R//vKA==","length":2734,"stub":true},"grunt-shell-0.6.0.tgz":{"content_type":"application/octet-stream","revpos":48,"digest":"md5-cBYSmt+c4/vI8Zbl0j0KKg==","length":2701,"stub":true},"grunt-shell-0.5.0.tgz":{"content_type":"application/octet-stream","revpos":46,"digest":"md5-wUd0Y6CUyjIsgx7LYcUnfA==","length":2956,"stub":true},"grunt-shell-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":40,"digest":"md5-qhS4RcFW9LntJZaFUm2beQ==","length":2937,"stub":true},"grunt-shell-0.3.1.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-zyO9QFKQyNsFQlM74lDNEA==","length":2811,"stub":true},"grunt-shell-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-e69ax0ncGrwSAepJvelk4w==","length":2753,"stub":true},"grunt-shell-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":21,"digest":"md5-h1o7n5qJfvamVAw+8uCvig==","length":2473,"stub":true},"grunt-shell-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-lOTnhyre25BiJdkQtbOvWQ==","length":2382,"stub":true},"grunt-shell-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-SS8kAhTkCa8uRx0Kh9wvMA==","length":2381,"stub":true},"grunt-shell-0.1.4.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-j7VYU1fTMQ+0a0hjQqwiYw==","length":2640,"stub":true},"grunt-shell-0.1.3.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-TbcDo96mrLUjRfxcyrptow==","length":2595,"stub":true},"grunt-shell-0.1.2.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-ZCy+u7lPcZlGRzr3nL7u+A==","length":1123,"stub":true},"grunt-shell-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-v3A7qrtAm7p55Ray+IE+lw==","length":1034,"stub":true},"grunt-shell-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-9p60tkKLGUJp5b0yqmsd2A==","length":5518,"stub":true}},"_etag":"\"G5JTGMQLFCSMR6WBJCA3KQWQ\""}