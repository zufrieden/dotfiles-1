{"_id":"grunt-contrib-handlebars","_rev":"72-384d60c1779f95f057a785b343b8d1ba","name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","dist-tags":{"latest":"0.6.0"},"versions":{"0.2.0":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.2.0","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Tim Branyen","url":"http://tbranyen.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"grunt.js","engines":{"node":"*"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.4","grunt-contrib-lib":"~0.2.0"},"devDependencies":{"grunt":"~0.3.15","grunt-contrib-clean":"~0.2.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"},{"name":"Chris Talkington","url":"http://christalkington.com/"},{"name":"David Mosher","url":"http://blog.davemo.com/"}],"readme":"# grunt-contrib-handlebars\r\n> Precompile Handlebars templates to JST file (part of the [grunt-contrib](https://github.com/gruntjs/grunt-contrib) collection).  Submitted by [Tim Branyen](/tbranyen).\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-contrib-handlebars`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\r\n```\r\n\r\n[grunt]: https://github.com/cowboy/grunt\r\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\r\n\r\n### Overview\r\n\r\nInside your `grunt.js` file, add a section named `handlebars`. This section specifies the files to compile and the options used with [handlebars](http://handlebarsjs.com/).\r\n\r\n##### files ```object```\r\n\r\nThis defines what files this task will process and should contain key:value pairs.\r\n\r\nThe key (destination) should be an unique filepath (supports [grunt.template](https://github.com/cowboy/grunt/blob/master/docs/api_template.md)) and the value (source) should be a filepath or an array of filepaths (supports [minimatch](https://github.com/isaacs/minimatch)).\r\n\r\nNote: Values are precompiled to the namespaced JST array in the order passed.\r\n\r\n##### options ```object```\r\n\r\nThis controls how this task operates and should contain key:value pairs, see options below.\r\n\r\n#### Options\r\n\r\n##### namespace ```string```\r\n\r\nThe namespace in which the resulting JST templates are assigned to.\r\n\r\n##### wrapped ```boolean```\r\n\r\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function (default is false).\r\n\r\n##### processName ```function```\r\n\r\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\r\n\r\n``` javascript\r\noptions: {\r\n  processName: function(filename) {\r\n    return filename.toUpperCase();\r\n  }\r\n}\r\n```\r\n\r\n##### processPartialName ```function```\r\n\r\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\r\n\r\n``` javascript\r\noptions: {\r\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\r\n    var pieces = filePath.split(\"/\");\r\n    return pieces[pieces.length - 1];      // output: _header.hbs\r\n  }\r\n}\r\n````\r\n\r\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\r\n\r\n##### partialRegex ```regex```\r\n\r\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files. (The default is _).\r\n\r\n``` javascript\r\noptions: {\r\n  partialRegex: /^par_/ // assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\r\n}\r\n```\r\n\r\n#### Config Example\r\n\r\n``` javascript\r\nhandlebars: {\r\n  compile: {\r\n    options: {\r\n      namespace: \"JST\"\r\n    },\r\n    files: {\r\n      \"path/to/result.js\": \"path/to/source.hbs\",\r\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\r\n    }\r\n  }\r\n}\r\n```","_id":"grunt-contrib-handlebars@0.2.0","dist":{"shasum":"1c1ce35645115376add55792a6a6983a1c54cdc5","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.2.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"}],"directories":{}},"0.2.1":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.2.1","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Tim Branyen","url":"http://tbranyen.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"grunt.js","engines":{"node":"*"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.4","grunt-contrib-lib":"~0.2.0"},"devDependencies":{"grunt":"~0.3.15","grunt-contrib-clean":"~0.2.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"},{"name":"Chris Talkington","url":"http://christalkington.com/"},{"name":"David Mosher","url":"http://blog.davemo.com/"}],"readme":"# grunt-contrib-handlebars\r\n> Precompile Handlebars templates to JST file (part of the [grunt-contrib](https://github.com/gruntjs/grunt-contrib) collection).  Submitted by [Tim Branyen](/tbranyen).\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-contrib-handlebars`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\r\n```\r\n\r\n[grunt]: https://github.com/cowboy/grunt\r\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\r\n\r\n### Overview\r\n\r\nInside your `grunt.js` file, add a section named `handlebars`. This section specifies the files to compile and the options used with [handlebars](http://handlebarsjs.com/).\r\n\r\n##### files ```object```\r\n\r\nThis defines what files this task will process and should contain key:value pairs.\r\n\r\nThe key (destination) should be an unique filepath (supports [grunt.template](https://github.com/cowboy/grunt/blob/master/docs/api_template.md)) and the value (source) should be a filepath or an array of filepaths (supports [minimatch](https://github.com/isaacs/minimatch)).\r\n\r\nNote: Values are precompiled to the namespaced JST array in the order passed.\r\n\r\n##### options ```object```\r\n\r\nThis controls how this task operates and should contain key:value pairs, see options below.\r\n\r\n#### Options\r\n\r\n##### namespace ```string```\r\n\r\nThe namespace in which the resulting JST templates are assigned to.\r\n\r\n##### wrapped ```boolean```\r\n\r\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function (default is false).\r\n\r\n##### processName ```function```\r\n\r\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\r\n\r\n``` javascript\r\noptions: {\r\n  processName: function(filename) {\r\n    return filename.toUpperCase();\r\n  }\r\n}\r\n```\r\n\r\n##### processPartialName ```function```\r\n\r\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\r\n\r\n``` javascript\r\noptions: {\r\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\r\n    var pieces = filePath.split(\"/\");\r\n    return pieces[pieces.length - 1];      // output: _header.hbs\r\n  }\r\n}\r\n````\r\n\r\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\r\n\r\n##### partialRegex ```regex```\r\n\r\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files. (The default is _).\r\n\r\n``` javascript\r\noptions: {\r\n  partialRegex: /^par_/ // assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\r\n}\r\n```\r\n\r\n#### Config Example\r\n\r\n``` javascript\r\nhandlebars: {\r\n  compile: {\r\n    options: {\r\n      namespace: \"JST\"\r\n    },\r\n    files: {\r\n      \"path/to/result.js\": \"path/to/source.hbs\",\r\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\r\n    }\r\n  }\r\n}\r\n```","_id":"grunt-contrib-handlebars@0.2.1","dist":{"shasum":"ad73210b3af12631ae0f0f1c2c27e48411a68967","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.2.1.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"}],"directories":{}},"0.2.2":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.2.2","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Tim Branyen","url":"http://tbranyen.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"grunt.js","engines":{"node":"*"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.4","grunt-contrib-lib":"~0.2.0"},"devDependencies":{"grunt":"~0.3.15","grunt-contrib-clean":"~0.2.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"},{"name":"Chris Talkington","url":"http://christalkington.com/"},{"name":"David Mosher","url":"http://blog.davemo.com/"}],"readme":"# grunt-contrib-handlebars\r\n> Precompile Handlebars templates to JST file (part of the [grunt-contrib](https://github.com/gruntjs/grunt-contrib) collection).  Submitted by [Tim Branyen](/tbranyen).\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-contrib-handlebars`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\r\n```\r\n\r\n[grunt]: https://github.com/cowboy/grunt\r\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\r\n\r\n### Overview\r\n\r\nInside your `grunt.js` file, add a section named `handlebars`. This section specifies the files to compile and the options used with [handlebars](http://handlebarsjs.com/).\r\n\r\n##### files ```object```\r\n\r\nThis defines what files this task will process and should contain key:value pairs.\r\n\r\nThe key (destination) should be an unique filepath (supports [grunt.template](https://github.com/cowboy/grunt/blob/master/docs/api_template.md)) and the value (source) should be a filepath or an array of filepaths (supports [minimatch](https://github.com/isaacs/minimatch)).\r\n\r\nNote: Values are precompiled to the namespaced JST array in the order passed.\r\n\r\n##### options ```object```\r\n\r\nThis controls how this task operates and should contain key:value pairs, see options below.\r\n\r\n#### Options\r\n\r\n##### namespace ```string```\r\n\r\nThe namespace in which the resulting JST templates are assigned to.\r\n\r\n##### wrapped ```boolean```\r\n\r\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function (default is false).\r\n\r\n##### processName ```function```\r\n\r\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\r\n\r\n``` javascript\r\noptions: {\r\n  processName: function(filename) {\r\n    return filename.toUpperCase();\r\n  }\r\n}\r\n```\r\n\r\n##### processPartialName ```function```\r\n\r\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\r\n\r\n``` javascript\r\noptions: {\r\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\r\n    var pieces = filePath.split(\"/\");\r\n    return pieces[pieces.length - 1];      // output: _header.hbs\r\n  }\r\n}\r\n````\r\n\r\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\r\n\r\n##### partialRegex ```regex```\r\n\r\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files. (The default is _).\r\n\r\n``` javascript\r\noptions: {\r\n  partialRegex: /^par_/ // assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\r\n}\r\n```\r\n\r\n#### Config Example\r\n\r\n``` javascript\r\nhandlebars: {\r\n  compile: {\r\n    options: {\r\n      namespace: \"JST\"\r\n    },\r\n    files: {\r\n      \"path/to/result.js\": \"path/to/source.hbs\",\r\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Release History\r\n\r\n* 2012/08/12 - v0.2.2 - Escape single quotes in filenames.\r\n* 2012/08/10 - v0.2.0 - Refactored from grunt-contrib into individual repo.","_id":"grunt-contrib-handlebars@0.2.2","dist":{"shasum":"0c1431e540bac0d15770b308252c7ae51abbf952","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.2.2.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"}],"directories":{}},"0.2.3":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.2.3","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Tim Branyen","url":"http://tbranyen.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"grunt.js","engines":{"node":"*"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.4","grunt-contrib-lib":"~0.2.0"},"devDependencies":{"grunt":"~0.3.15","grunt-contrib-clean":"~0.2.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"},{"name":"Chris Talkington","url":"http://christalkington.com/"},{"name":"David Mosher","url":"http://blog.davemo.com/"},{"name":"Larry Davis","url":"http://lazd.net/"}],"readme":"# grunt-contrib-handlebars\r\n> Precompile Handlebars templates to JST file (part of the [grunt-contrib](https://github.com/gruntjs/grunt-contrib) collection).  Submitted by [Tim Branyen](/tbranyen).\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-contrib-handlebars`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\r\n```\r\n\r\n[grunt]: https://github.com/cowboy/grunt\r\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\r\n\r\n### Overview\r\n\r\nInside your `grunt.js` file, add a section named `handlebars`. This section specifies the files to compile and the options used with [handlebars](http://handlebarsjs.com/).\r\n\r\n##### files ```object```\r\n\r\nThis defines what files this task will process and should contain key:value pairs.\r\n\r\nThe key (destination) should be an unique filepath (supports [grunt.template](https://github.com/cowboy/grunt/blob/master/docs/api_template.md)) and the value (source) should be a filepath or an array of filepaths (supports [minimatch](https://github.com/isaacs/minimatch)).\r\n\r\nNote: Values are precompiled to the namespaced JST array in the order passed.\r\n\r\n##### options ```object```\r\n\r\nThis controls how this task operates and should contain key:value pairs, see options below.\r\n\r\n#### Options\r\n\r\n##### namespace ```string```\r\n\r\nThe namespace in which the precompiled templates will be asssigned (default is JST).  *Use dot notation (e.g. App.Templates) for nested namespaces.*\r\n\r\nExample:\r\n``` javascript\r\noptions: {\r\n  namespace: 'MyApp.Templates'\r\n}\r\n```\r\n\r\n##### wrapped ```boolean```\r\n\r\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function (default is false).\r\n\r\n##### processName ```function```\r\n\r\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\r\n\r\n``` javascript\r\noptions: {\r\n  processName: function(filename) {\r\n    return filename.toUpperCase();\r\n  }\r\n}\r\n```\r\n\r\n##### processPartialName ```function```\r\n\r\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\r\n\r\n``` javascript\r\noptions: {\r\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\r\n    var pieces = filePath.split(\"/\");\r\n    return pieces[pieces.length - 1];      // output: _header.hbs\r\n  }\r\n}\r\n````\r\n\r\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\r\n\r\n##### partialRegex ```regex```\r\n\r\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files. (The default is _).\r\n\r\n``` javascript\r\noptions: {\r\n  partialRegex: /^par_/ // assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\r\n}\r\n```\r\n\r\n#### Config Example\r\n\r\n``` javascript\r\nhandlebars: {\r\n  compile: {\r\n    options: {\r\n      namespace: \"JST\"\r\n    },\r\n    files: {\r\n      \"path/to/result.js\": \"path/to/source.hbs\",\r\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Release History\r\n\r\n* 2012/08/16 - v0.2.3 - Support for nested namespaces.\r\n* 2012/08/12 - v0.2.2 - Escape single quotes in filenames.\r\n* 2012/08/10 - v0.2.0 - Refactored from grunt-contrib into individual repo.","_id":"grunt-contrib-handlebars@0.2.3","dist":{"shasum":"ecbc5a4fc4efd2d6d3c55c95b51844ef2b0ec72e","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.2.3.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"}],"directories":{}},"0.2.4":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.2.4","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Tim Branyen","url":"http://tbranyen.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"grunt.js","engines":{"node":"*"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.4","grunt-contrib-lib":"~0.2.0"},"devDependencies":{"grunt":"~0.3.15","grunt-contrib-clean":"~0.2.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"},{"name":"Chris Talkington","url":"http://christalkington.com/"},{"name":"David Mosher","url":"http://blog.davemo.com/"},{"name":"Larry Davis","url":"http://lazd.net/"}],"readme":"# grunt-contrib-handlebars\r\n> Precompile Handlebars templates to JST file (part of the [grunt-contrib](https://github.com/gruntjs/grunt-contrib) collection).  Submitted by [Tim Branyen](/tbranyen).\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-contrib-handlebars`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\r\n```\r\n\r\n[grunt]: https://github.com/cowboy/grunt\r\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\r\n\r\n### Overview\r\n\r\nInside your `grunt.js` file, add a section named `handlebars`. This section specifies the files to compile and the options used with [handlebars](http://handlebarsjs.com/).\r\n\r\n##### files ```object```\r\n\r\nThis defines what files this task will process and should contain key:value pairs.\r\n\r\nThe key (destination) should be an unique filepath (supports [grunt.template](https://github.com/cowboy/grunt/blob/master/docs/api_template.md)) and the value (source) should be a filepath or an array of filepaths (supports [minimatch](https://github.com/isaacs/minimatch)).\r\n\r\nNote: Values are precompiled to the namespaced JST array in the order passed.\r\n\r\n##### options ```object```\r\n\r\nThis controls how this task operates and should contain key:value pairs, see options below.\r\n\r\n#### Options\r\n\r\n##### namespace ```string```\r\n\r\nThe namespace in which the precompiled templates will be asssigned (default is JST).  *Use dot notation (e.g. App.Templates) for nested namespaces.*\r\n\r\nExample:\r\n``` javascript\r\noptions: {\r\n  namespace: 'MyApp.Templates'\r\n}\r\n```\r\n\r\n##### wrapped ```boolean```\r\n\r\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function (default is false).\r\n\r\n##### processName ```function```\r\n\r\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\r\n\r\n``` javascript\r\noptions: {\r\n  processName: function(filename) {\r\n    return filename.toUpperCase();\r\n  }\r\n}\r\n```\r\n\r\n##### processPartialName ```function```\r\n\r\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\r\n\r\n``` javascript\r\noptions: {\r\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\r\n    var pieces = filePath.split(\"/\");\r\n    return pieces[pieces.length - 1];      // output: _header.hbs\r\n  }\r\n}\r\n````\r\n\r\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\r\n\r\n##### partialRegex ```regex```\r\n\r\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files. (The default is _).\r\n\r\n``` javascript\r\noptions: {\r\n  partialRegex: /^par_/ // assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\r\n}\r\n```\r\n\r\n#### Config Example\r\n\r\n``` javascript\r\nhandlebars: {\r\n  compile: {\r\n    options: {\r\n      namespace: \"JST\"\r\n    },\r\n    files: {\r\n      \"path/to/result.js\": \"path/to/source.hbs\",\r\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Release History\r\n\r\n* 2012/08/16 - v0.2.3 - Support for nested namespaces.\r\n* 2012/08/12 - v0.2.2 - Escape single quotes in filenames.\r\n* 2012/08/10 - v0.2.0 - Refactored from grunt-contrib into individual repo.\r\n","_id":"grunt-contrib-handlebars@0.2.4","dist":{"shasum":"386decda07582b170c877ca26e4742416be58b57","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.2.4.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"}],"directories":{}},"0.3.0":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.3.0","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Tim Branyen","url":"http://tbranyen.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"grunt.js","engines":{"node":"*"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.4","grunt-contrib-lib":"~0.3.0"},"devDependencies":{"grunt":"~0.3.15","grunt-contrib-clean":"~0.3.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"},{"name":"Chris Talkington","url":"http://christalkington.com/"},{"name":"David Mosher","url":"http://blog.davemo.com/"},{"name":"Larry Davis","url":"http://lazd.net/"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\r\n> Precompile Handlebars templates to JST file (part of the [grunt-contrib](https://github.com/gruntjs/grunt-contrib) collection).  Submitted by [Tim Branyen](/tbranyen).\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-contrib-handlebars`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\r\n```\r\n\r\n[grunt]: https://github.com/cowboy/grunt\r\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\r\n\r\n### Overview\r\n\r\nInside your `grunt.js` file, add a section named `handlebars`. This section specifies the files to compile and the options used with [handlebars](http://handlebarsjs.com/).\r\n\r\n##### files ```object```\r\n\r\nThis defines what files this task will process and should contain key:value pairs.\r\n\r\nThe key (destination) should be an unique filepath (supports [grunt.template](https://github.com/cowboy/grunt/blob/master/docs/api_template.md)) and the value (source) should be a filepath or an array of filepaths (supports [minimatch](https://github.com/isaacs/minimatch)).\r\n\r\nNote: Values are precompiled to the namespaced JST array in the order passed.\r\n\r\n##### options ```object```\r\n\r\nThis controls how this task operates and should contain key:value pairs, see options below.\r\n\r\n#### Options\r\n\r\n##### namespace ```string```\r\n\r\nThe namespace in which the precompiled templates will be asssigned (default is JST).  *Use dot notation (e.g. App.Templates) for nested namespaces.*\r\n\r\nExample:\r\n``` javascript\r\noptions: {\r\n  namespace: 'MyApp.Templates'\r\n}\r\n```\r\n\r\n##### wrapped ```boolean```\r\n\r\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function (default is false).\r\n\r\n##### processName ```function```\r\n\r\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\r\n\r\n``` javascript\r\noptions: {\r\n  processName: function(filename) {\r\n    return filename.toUpperCase();\r\n  }\r\n}\r\n```\r\n\r\n##### processPartialName ```function```\r\n\r\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\r\n\r\n``` javascript\r\noptions: {\r\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\r\n    var pieces = filePath.split(\"/\");\r\n    return pieces[pieces.length - 1];      // output: _header.hbs\r\n  }\r\n}\r\n````\r\n\r\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\r\n\r\n##### partialRegex ```regex```\r\n\r\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files. (The default is _).\r\n\r\n``` javascript\r\noptions: {\r\n  partialRegex: /^par_/ // assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\r\n}\r\n```\r\n\r\n#### Config Example\r\n\r\n``` javascript\r\nhandlebars: {\r\n  compile: {\r\n    options: {\r\n      namespace: \"JST\"\r\n    },\r\n    files: {\r\n      \"path/to/result.js\": \"path/to/source.hbs\",\r\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Release History\r\n\r\n* 2012/08/23 - v0.3.0 - Options no longer accepted from global config key.\r\n* 2012/08/16 - v0.2.3 - Support for nested namespaces.\r\n* 2012/08/12 - v0.2.2 - Escape single quotes in filenames.\r\n* 2012/08/10 - v0.2.0 - Refactored from grunt-contrib into individual repo.\r\n","_id":"grunt-contrib-handlebars@0.3.0","dist":{"shasum":"47690d597d86068689520bb24ff8c5cdf8d1eecb","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.3.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"}],"directories":{}},"0.3.1":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.3.1","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Tim Branyen","url":"http://tbranyen.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"grunt.js","engines":{"node":"*"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.4","grunt-contrib-lib":"~0.3.0"},"devDependencies":{"grunt":"~0.3.15","grunt-contrib-clean":"~0.3.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"},{"name":"Chris Talkington","url":"http://christalkington.com/"},{"name":"David Mosher","url":"http://blog.davemo.com/"},{"name":"Larry Davis","url":"http://lazd.net/"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\r\n> Precompile Handlebars templates to JST file (part of the [grunt-contrib](https://github.com/gruntjs/grunt-contrib) collection).  Submitted by [Tim Branyen](/tbranyen).\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-contrib-handlebars`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\r\n```\r\n\r\n[grunt]: https://github.com/cowboy/grunt\r\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\r\n\r\n### Overview\r\n\r\nInside your `grunt.js` file, add a section named `handlebars`. This section specifies the files to compile and the options used with [handlebars](http://handlebarsjs.com/).\r\n\r\n##### files ```object```\r\n\r\nThis defines what files this task will process and should contain key:value pairs.\r\n\r\nThe key (destination) should be an unique filepath (supports [grunt.template](https://github.com/cowboy/grunt/blob/master/docs/api_template.md)) and the value (source) should be a filepath or an array of filepaths (supports [minimatch](https://github.com/isaacs/minimatch)).\r\n\r\nNote: Values are precompiled to the namespaced JST array in the order passed.\r\n\r\n##### options ```object```\r\n\r\nThis controls how this task operates and should contain key:value pairs, see options below.\r\n\r\n#### Options\r\n\r\n##### namespace ```string```\r\n\r\nThe namespace in which the precompiled templates will be asssigned (default is JST).  *Use dot notation (e.g. App.Templates) for nested namespaces.*\r\n\r\nExample:\r\n``` javascript\r\noptions: {\r\n  namespace: 'MyApp.Templates'\r\n}\r\n```\r\n\r\n##### wrapped ```boolean```\r\n\r\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function (default is false).\r\n\r\n##### processName ```function```\r\n\r\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\r\n\r\n``` javascript\r\noptions: {\r\n  processName: function(filename) {\r\n    return filename.toUpperCase();\r\n  }\r\n}\r\n```\r\n\r\n##### processPartialName ```function```\r\n\r\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\r\n\r\n``` javascript\r\noptions: {\r\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\r\n    var pieces = filePath.split(\"/\");\r\n    return pieces[pieces.length - 1];      // output: _header.hbs\r\n  }\r\n}\r\n````\r\n\r\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\r\n\r\n##### partialRegex ```regex```\r\n\r\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files. (The default is _).\r\n\r\n``` javascript\r\noptions: {\r\n  partialRegex: /^par_/ // assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\r\n}\r\n```\r\n\r\n#### Config Example\r\n\r\n``` javascript\r\nhandlebars: {\r\n  compile: {\r\n    options: {\r\n      namespace: \"JST\"\r\n    },\r\n    files: {\r\n      \"path/to/result.js\": \"path/to/source.hbs\",\r\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Release History\r\n* 2012/10/03 - v0.3.1 - Bugfix (default processPartialName)\r\n* 2012/09/23 - v0.3.0 - Options no longer accepted from global config key.\r\n* 2012/09/16 - v0.2.3 - Support for nested namespaces.\r\n* 2012/09/12 - v0.2.2 - Escape single quotes in filenames.\r\n* 2012/09/10 - v0.2.0 - Refactored from grunt-contrib into individual repo.\r\n","_id":"grunt-contrib-handlebars@0.3.1","dist":{"shasum":"35f930b0bbfe49f158dcbd46478d059fcdc21995","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.3.1.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"}],"directories":{}},"0.3.2":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.3.2","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"grunt.js","engines":{"node":"*"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.4","grunt-lib-contrib":"~0.3.0"},"devDependencies":{"grunt":"~0.3.15","grunt-contrib-clean":"~0.3.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"},{"name":"Chris Talkington","url":"http://christalkington.com/"},{"name":"David Mosher","url":"http://blog.davemo.com/"},{"name":"Larry Davis","url":"http://lazd.net/"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\r\n\r\n> Precompile Handlebars templates to JST file.\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-contrib-handlebars`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\r\n```\r\n\r\n[grunt]: https://github.com/gruntjs/grunt\r\n[getting_started]: https://github.com/gruntjs/grunt/blob/master/docs/getting_started.md\r\n\r\n### Overview\r\n\r\nInside your `grunt.js` file, add a section named `handlebars`. This section specifies the files to compile and the options used with [handlebars](http://handlebarsjs.com/).\r\n\r\n##### files ```object```\r\n\r\nThis defines what files this task will process and should contain key:value pairs.\r\n\r\nThe key (destination) should be an unique filepath (supports [grunt.template](https://github.com/gruntjs/grunt/blob/master/docs/api_template.md)) and the value (source) should be a filepath or an array of filepaths (supports [minimatch](https://github.com/isaacs/minimatch)).\r\n\r\nNote: Values are precompiled to the namespaced JST array in the order passed.\r\n\r\n##### options ```object```\r\n\r\nThis controls how this task operates and should contain key:value pairs, see options below.\r\n\r\n#### Options\r\n\r\n##### namespace ```string```\r\n\r\nThe namespace in which the precompiled templates will be assigned (default is JST).  *Use dot notation (e.g. App.Templates) for nested namespaces.*\r\n\r\nExample:\r\n``` javascript\r\noptions: {\r\n  namespace: 'MyApp.Templates'\r\n}\r\n```\r\n\r\n##### wrapped ```boolean```\r\n\r\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function (default is false).\r\n\r\n##### processName ```function```\r\n\r\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\r\n\r\n``` javascript\r\noptions: {\r\n  processName: function(filename) {\r\n    return filename.toUpperCase();\r\n  }\r\n}\r\n```\r\n\r\n##### processPartialName ```function```\r\n\r\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\r\n\r\n``` javascript\r\noptions: {\r\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\r\n    var pieces = filePath.split(\"/\");\r\n    return pieces[pieces.length - 1];      // output: _header.hbs\r\n  }\r\n}\r\n````\r\n\r\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\r\n\r\n##### partialRegex ```regex```\r\n\r\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files. (The default is _).\r\n\r\n``` javascript\r\noptions: {\r\n  partialRegex: /^par_/ // assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\r\n}\r\n```\r\n\r\n#### Config Example\r\n\r\n``` javascript\r\nhandlebars: {\r\n  compile: {\r\n    options: {\r\n      namespace: \"JST\"\r\n    },\r\n    files: {\r\n      \"path/to/result.js\": \"path/to/source.hbs\",\r\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n--\r\n\r\n*Task submitted by [Tim Branyen](http://github.com/tbranyen).*","_id":"grunt-contrib-handlebars@0.3.2","dist":{"shasum":"e3119cd1a43ea402a0abaa74b07b934a1a328bc9","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.3.2.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"}],"directories":{}},"0.3.3":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.3.3","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"grunt.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.4","grunt-lib-contrib":"~0.3.0"},"devDependencies":{"grunt":"~0.3.15","grunt-contrib-clean":"~0.3.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"},{"name":"Chris Talkington","url":"http://christalkington.com/"},{"name":"David Mosher","url":"http://blog.davemo.com/"},{"name":"Larry Davis","url":"http://lazd.net/"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\r\n\r\n> Precompile Handlebars templates to JST file.\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-contrib-handlebars`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\r\n```\r\n\r\n[grunt]: https://github.com/gruntjs/grunt\r\n[getting_started]: https://github.com/gruntjs/grunt/blob/master/docs/getting_started.md\r\n\r\n### Overview\r\n\r\nInside your `grunt.js` file, add a section named `handlebars`. This section specifies the files to compile and the options used with [handlebars](http://handlebarsjs.com/).\r\n\r\n##### files ```object```\r\n\r\nThis defines what files this task will process and should contain key:value pairs.\r\n\r\nThe key (destination) should be an unique filepath (supports [grunt.template](https://github.com/gruntjs/grunt/blob/master/docs/api_template.md)) and the value (source) should be a filepath or an array of filepaths (supports [minimatch](https://github.com/isaacs/minimatch)).\r\n\r\nNote: Values are precompiled to the namespaced JST array in the order passed.\r\n\r\n##### options ```object```\r\n\r\nThis controls how this task operates and should contain key:value pairs, see options below.\r\n\r\n#### Options\r\n\r\n##### namespace ```string```\r\n\r\nThe namespace in which the precompiled templates will be assigned (default is JST).  *Use dot notation (e.g. App.Templates) for nested namespaces.*\r\n\r\nExample:\r\n``` javascript\r\noptions: {\r\n  namespace: 'MyApp.Templates'\r\n}\r\n```\r\n\r\n##### wrapped ```boolean```\r\n\r\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function (default is false).\r\n\r\n##### processName ```function```\r\n\r\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\r\n\r\n``` javascript\r\noptions: {\r\n  processName: function(filename) {\r\n    return filename.toUpperCase();\r\n  }\r\n}\r\n```\r\n\r\n##### processPartialName ```function```\r\n\r\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\r\n\r\n``` javascript\r\noptions: {\r\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\r\n    var pieces = filePath.split(\"/\");\r\n    return pieces[pieces.length - 1];      // output: _header.hbs\r\n  }\r\n}\r\n````\r\n\r\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\r\n\r\n##### partialRegex ```regex```\r\n\r\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files. (The default is _).\r\n\r\n``` javascript\r\noptions: {\r\n  partialRegex: /^par_/ // assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\r\n}\r\n```\r\n\r\n#### Config Example\r\n\r\n``` javascript\r\nhandlebars: {\r\n  compile: {\r\n    options: {\r\n      namespace: \"JST\"\r\n    },\r\n    files: {\r\n      \"path/to/result.js\": \"path/to/source.hbs\",\r\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n--\r\n\r\n*Task submitted by [Tim Branyen](http://github.com/tbranyen).*","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.3.3","dist":{"shasum":"9353a177937d301c4d1ae7b7dc96a1f8a54f40de","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.3.3.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"}],"directories":{}},"0.3.4":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.3.4","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"grunt.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.4","grunt-lib-contrib":"~0.3.0"},"devDependencies":{"grunt":"~0.3.15","grunt-contrib-clean":"~0.3.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"},{"name":"Chris Talkington","url":"http://christalkington.com/"},{"name":"David Mosher","url":"http://blog.davemo.com/"},{"name":"Larry Davis","url":"http://lazd.net/"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\r\n\r\n> Precompile Handlebars templates to JST file.\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-contrib-handlebars`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\r\n```\r\n\r\n[grunt]: https://github.com/gruntjs/grunt\r\n[getting_started]: https://github.com/gruntjs/grunt/blob/master/docs/getting_started.md\r\n\r\n### Overview\r\n\r\nInside your `grunt.js` file, add a section named `handlebars`. This section specifies the files to compile and the options used with [handlebars](http://handlebarsjs.com/).\r\n\r\n##### files ```object```\r\n\r\nThis defines what files this task will process and should contain key:value pairs.\r\n\r\nThe key (destination) should be an unique filepath (supports [grunt.template](https://github.com/gruntjs/grunt/blob/master/docs/api_template.md)) and the value (source) should be a filepath or an array of filepaths (supports [minimatch](https://github.com/isaacs/minimatch)).\r\n\r\nNote: Values are precompiled to the namespaced JST array in the order passed.\r\n\r\n##### options ```object```\r\n\r\nThis controls how this task operates and should contain key:value pairs, see options below.\r\n\r\n#### Options\r\n\r\n##### namespace ```string```\r\n\r\nThe namespace in which the precompiled templates will be assigned (default is JST).  *Use dot notation (e.g. App.Templates) for nested namespaces.*\r\n\r\nExample:\r\n``` javascript\r\noptions: {\r\n  namespace: 'MyApp.Templates'\r\n}\r\n```\r\n\r\n##### wrapped ```boolean```\r\n\r\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function (default is false).\r\n\r\n##### node ```boolean```\r\n\r\nEnable the compiled file to be required on node.js by preppending and appending proper declarations. You can use the file safely on the front-end.\r\n\r\n##### processName ```function```\r\n\r\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\r\n\r\n``` javascript\r\noptions: {\r\n  processName: function(filename) {\r\n    return filename.toUpperCase();\r\n  }\r\n}\r\n```\r\n\r\n##### processPartialName ```function```\r\n\r\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\r\n\r\n``` javascript\r\noptions: {\r\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\r\n    var pieces = filePath.split(\"/\");\r\n    return pieces[pieces.length - 1];      // output: _header.hbs\r\n  }\r\n}\r\n````\r\n\r\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\r\n\r\n##### partialRegex ```regex```\r\n\r\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files. (The default is _).\r\n\r\n``` javascript\r\noptions: {\r\n  partialRegex: /^par_/ // assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\r\n}\r\n```\r\n\r\n#### Config Example\r\n\r\n``` javascript\r\nhandlebars: {\r\n  compile: {\r\n    options: {\r\n      namespace: \"JST\"\r\n    },\r\n    files: {\r\n      \"path/to/result.js\": \"path/to/source.hbs\",\r\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n--\r\n\r\n*Task submitted by [Tim Branyen](http://github.com/tbranyen).*","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.3.4","dist":{"shasum":"bbe5a798db650524bad9945a0ffdb3852831497a","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.3.4.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.3.5":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.3.5","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"grunt.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.4","grunt-lib-contrib":"~0.3.0"},"devDependencies":{"grunt":"~0.3.15","grunt-contrib-clean":"~0.3.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"},{"name":"Chris Talkington","url":"http://christalkington.com/"},{"name":"David Mosher","url":"http://blog.davemo.com/"},{"name":"Larry Davis","url":"http://lazd.net/"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\r\n\r\n> Precompile Handlebars templates to JST file.\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-contrib-handlebars`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\r\n```\r\n\r\n[grunt]: https://github.com/gruntjs/grunt\r\n[getting_started]: https://github.com/gruntjs/grunt/blob/master/docs/getting_started.md\r\n\r\n### Overview\r\n\r\nInside your `grunt.js` file, add a section named `handlebars`. This section specifies the files to compile and the options used with [handlebars](http://handlebarsjs.com/).\r\n\r\n##### files ```object```\r\n\r\nThis defines what files this task will process and should contain key:value pairs.\r\n\r\nThe key (destination) should be an unique filepath (supports [grunt.template](https://github.com/gruntjs/grunt/blob/master/docs/api_template.md)) and the value (source) should be a filepath or an array of filepaths (supports [minimatch](https://github.com/isaacs/minimatch)).\r\n\r\nNote: Values are precompiled to the namespaced JST array in the order passed.\r\n\r\n##### options ```object```\r\n\r\nThis controls how this task operates and should contain key:value pairs, see options below.\r\n\r\n#### Options\r\n\r\n##### namespace ```string```\r\n\r\nThe namespace in which the precompiled templates will be assigned (default is JST).  *Use dot notation (e.g. App.Templates) for nested namespaces.*\r\n\r\nExample:\r\n``` javascript\r\noptions: {\r\n  namespace: 'MyApp.Templates'\r\n}\r\n```\r\n\r\n##### wrapped ```boolean```\r\n\r\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function (default is false).\r\n\r\n##### node ```boolean```\r\n\r\nEnable the compiled file to be required on node.js by preppending and appending proper declarations. You can use the file safely on the front-end.\r\n\r\n##### processName ```function```\r\n\r\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\r\n\r\n``` javascript\r\noptions: {\r\n  processName: function(filename) {\r\n    return filename.toUpperCase();\r\n  }\r\n}\r\n```\r\n\r\n##### processPartialName ```function```\r\n\r\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\r\n\r\n``` javascript\r\noptions: {\r\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\r\n    var pieces = filePath.split(\"/\");\r\n    return pieces[pieces.length - 1];      // output: _header.hbs\r\n  }\r\n}\r\n````\r\n\r\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\r\n\r\n##### partialRegex ```regex```\r\n\r\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files. (The default is _).\r\n\r\n``` javascript\r\noptions: {\r\n  partialRegex: /^par_/ // assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\r\n}\r\n```\r\n\r\n#### Config Example\r\n\r\n``` javascript\r\nhandlebars: {\r\n  compile: {\r\n    options: {\r\n      namespace: \"JST\"\r\n    },\r\n    files: {\r\n      \"path/to/result.js\": \"path/to/source.hbs\",\r\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n--\r\n\r\n*Task submitted by [Tim Branyen](http://github.com/tbranyen).*","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.3.5","dist":{"shasum":"547d623569868f914bf5c0f589963ac81e5f0509","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.3.5.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.5.4":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.5.4","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.8","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"~0.1.1","grunt-contrib-nodeunit":"~0.1.2","grunt-contrib-clean":"~0.4.0","grunt-contrib-internal":"~0.4.2","grunt":"~0.4.0"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com"},{"name":"Chris Talkington","url":"http://christalkington.com"},{"name":"David Mosher","url":"http://blog.davemo.com"},{"name":"Larry Davis","url":"http://lazd.net/"},{"name":"Pete Hawkins","url":"http://phawk.co.uk"},{"name":"Alexander Kong","url":"http://github.com/WebBlow"},{"name":"Yusuke Kawasaki","url":"https://github.com/kawanet"},{"name":"Thanasis Polychronakis","url":"http://thanpol.as"},{"name":"Ryan Leckey","url":"https://github.com/mehcode"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\n```\n\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.3](https://github.com/gruntjs/grunt-contrib-handlebars/tree/grunt-0.3-stable).*\n\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n### Options\n\n#### separator\nType: `String`\nDefault: linefeed + linefeed\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String` `false`\nDefault: 'JST'\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces or false for no namespace wrapping.*  When false with `amd` option set `true`, templates will be returned directly from the AMD wrapper.\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### wrapped\nType: `Boolean`\nDefault: `false`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### node\nType: `Boolean`\nDefault: `false`\n\nEnable the compiled file to be required on node.js by preppending and appending proper declarations. You can use the file safely on the front-end.\n\nFor this option to work you need to define the `namespace` option.\n\n#### amd\nType: `Boolean`\ndefault: `false`\n\nWraps the output file with an AMD define function and returns the compiled template namespace unless namespace has been explicitly set to false in which case the template function will be returned directly.\n\n```js\ndefine(function() {\n    //...//\n    returns this['[template namespace]'];\n});\n```\n\n#### processContent\nType: `function`\n\nThis option accepts a function which takes one argument (the template file content) and returns a string which will be used as the source for the precompiled template object.  The example below removes leading and trailing spaces to shorten templates.\n\n```js\noptions: {\n  processContent: function(content) {\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\n    return content;\n  }\n}\n```\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filename) {\n    return filename.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: ```function```\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`\nDefault: /^_/\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-02-14   v0.5.4   First official release for Grunt 0.4.0.\n * 2013-02-07   v0.5.4rc7   When `namespace` is false and `amd` is true, return handlebars templates directly from AMD wrapper.\n * 2013-01-31   v0.5.3rc7   Add `node` option to produce dual node.js / front-end compiled file.\n * 2013-01-28   v0.5.2rc7   Define handlebars as a dependency for AMD option.\n * 2013-01-27   v0.5.1rc7   Add AMD compilation option. Add processContent option. Do not generate templates into a namespaces when namespace option is false.\n * 2013-01-22   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-08   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-20   v0.3.3   Reset for each target\n * 2012-10-11   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-02   v0.3.1   Bugfix default processPartialName.\n * 2012-09-22   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-15   v0.2.3   Support for nested namespaces.\n * 2012-09-11   v0.2.2   Escape single quotes in filenames.\n * 2012-09-09   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Mon Feb 18 2013 08:38:59.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.5.4","dist":{"shasum":"fd25576c2c22453d8d4a8ff140193d45152fb246","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.5.4.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"cowboy","email":"cowboy@rj3.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.5.5":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.5.5","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.8","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"~0.2.0","grunt-contrib-nodeunit":"~0.1.2","grunt-contrib-clean":"~0.4.0","grunt-contrib-internal":"~0.4.2"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com"},{"name":"Chris Talkington","url":"http://christalkington.com"},{"name":"David Mosher","url":"http://blog.davemo.com"},{"name":"Larry Davis","url":"http://lazd.net/"},{"name":"Pete Hawkins","url":"http://phawk.co.uk"},{"name":"Alexander Kong","url":"http://github.com/WebBlow"},{"name":"Yusuke Kawasaki","url":"https://github.com/kawanet"},{"name":"Thanasis Polychronakis","url":"http://thanpol.as"},{"name":"Ryan Leckey","url":"https://github.com/mehcode"},{"name":"Phil Dokas","url":"http://jetless.org"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\n```\n\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.3](https://github.com/gruntjs/grunt-contrib-handlebars/tree/grunt-0.3-stable).*\n\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n### Options\n\n#### separator\nType: `String`\nDefault: linefeed + linefeed\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String` `false`\nDefault: 'JST'\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces or false for no namespace wrapping.*  When false with `amd` option set `true`, templates will be returned directly from the AMD wrapper.\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### partialsUseNamespace\nType: `Boolean`\nDefault: 'false'\n\nWhen set to `true`, partials will be registered in the `namespace` in addition to templates.\n\n#### wrapped\nType: `Boolean`\nDefault: `false`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### node\nType: `Boolean`\nDefault: `false`\n\nEnable the compiled file to be required on node.js by preppending and appending proper declarations. You can use the file safely on the front-end.\n\nFor this option to work you need to define the `namespace` option.\n\n#### amd\nType: `Boolean`\ndefault: `false`\n\nWraps the output file with an AMD define function and returns the compiled template namespace unless namespace has been explicitly set to false in which case the template function will be returned directly.\n\n```js\ndefine(function() {\n    //...//\n    returns this['[template namespace]'];\n});\n```\n\n#### processContent\nType: `function`\n\nThis option accepts a function which takes one argument (the template file content) and returns a string which will be used as the source for the precompiled template object.  The example below removes leading and trailing spaces to shorten templates.\n\n```js\noptions: {\n  processContent: function(content) {\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\n    return content;\n  }\n}\n```\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filename) {\n    return filename.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: ```function```\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`\nDefault: /^_/\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n#### partialsPathRegex\nType: `Regexp`\nDefault: '/./'\n\nThis option accepts a regex that defines the path to a directory of Handlebars partials files. The example below shows how to mark every file in a specific directory as a partial.\n\n``` javascript\noptions: {\n  partialRegex: /.*/,\n  partialsPathRegex: /\\/partials\\//\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-02-26   v0.5.5   Add new options partialsUseNamespace, partialRegex, partialsPathRegex\n * 2013-02-14   v0.5.4   First official release for Grunt 0.4.0.\n * 2013-02-07   v0.5.4rc7   When `namespace` is false and `amd` is true, return handlebars templates directly from AMD wrapper.\n * 2013-01-31   v0.5.3rc7   Add `node` option to produce dual node.js / front-end compiled file.\n * 2013-01-28   v0.5.2rc7   Define handlebars as a dependency for AMD option.\n * 2013-01-27   v0.5.1rc7   Add AMD compilation option. Add processContent option. Do not generate templates into a namespaces when namespace option is false.\n * 2013-01-22   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-08   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-20   v0.3.3   Reset for each target\n * 2012-10-11   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-02   v0.3.1   Bugfix default processPartialName.\n * 2012-09-22   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-15   v0.2.3   Support for nested namespaces.\n * 2012-09-11   v0.2.2   Escape single quotes in filenames.\n * 2012-09-09   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Wed Feb 27 2013 09:38:15.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.5.5","dist":{"shasum":"88431ebe0781033c49f9ae227f9eccc9cc611009","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.5.5.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.5.6":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.5.6","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.8","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"~0.2.0","grunt-contrib-nodeunit":"~0.1.2","grunt-contrib-clean":"~0.4.0","grunt-contrib-internal":"~0.4.2"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com"},{"name":"Chris Talkington","url":"http://christalkington.com"},{"name":"David Mosher","url":"http://blog.davemo.com"},{"name":"Larry Davis","url":"http://lazd.net/"},{"name":"Pete Hawkins","url":"http://phawk.co.uk"},{"name":"Alexander Kong","url":"http://github.com/WebBlow"},{"name":"Yusuke Kawasaki","url":"https://github.com/kawanet"},{"name":"Thanasis Polychronakis","url":"http://thanpol.as"},{"name":"Ryan Leckey","url":"https://github.com/mehcode"},{"name":"Phil Dokas","url":"http://jetless.org"},{"name":"Jeremy Morrell","url":"https://github.com/jmorrell"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\n```\n\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.3](https://github.com/gruntjs/grunt-contrib-handlebars/tree/grunt-0.3-stable).*\n\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n### Options\n\n#### separator\nType: `String`\nDefault: linefeed + linefeed\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String` `false`\nDefault: 'JST'\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces or false for no namespace wrapping.*  When false with `amd` option set `true`, templates will be returned directly from the AMD wrapper.\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### partialsUseNamespace\nType: `Boolean`\nDefault: 'false'\n\nWhen set to `true`, partials will be registered in the `namespace` in addition to templates.\n\n#### wrapped\nType: `Boolean`\nDefault: `false`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### node\nType: `Boolean`\nDefault: `false`\n\nEnable the compiled file to be required on node.js by preppending and appending proper declarations. You can use the file safely on the front-end.\n\nFor this option to work you need to define the `namespace` option.\n\n#### amd\nType: `Boolean`\ndefault: `false`\n\nWraps the output file with an AMD define function and returns the compiled template namespace unless namespace has been explicitly set to false in which case the template function will be returned directly.\n\n```js\ndefine(function() {\n    //...//\n    returns this['[template namespace]'];\n});\n```\n\n#### processContent\nType: `function`\n\nThis option accepts a function which takes one argument (the template file content) and returns a string which will be used as the source for the precompiled template object.  The example below removes leading and trailing spaces to shorten templates.\n\n```js\noptions: {\n  processContent: function(content) {\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\n    return content;\n  }\n}\n```\n\n#### processAST\nType: `function`\n\nThis option accepts a function which takes one argument (the parsed Abstract Syntax Tree) and returns a modified version which will be used as the source for the precompiled template object.  The example below removes any partial and replaces it with the text `foo`.\n\n```js\noptions: {\n  processAST: function(ast) {\n    ast.statements.forEach(function(statement, i) {\n      if (statement.type === 'partial') {\n        ast.statements[i] = { type: 'content', string: 'foo' };\n      }\n    });\n    return ast;\n  }\n}\n```\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filename) {\n    return filename.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: ```function```\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`\nDefault: /^_/\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n#### partialsPathRegex\nType: `Regexp`\nDefault: '/./'\n\nThis option accepts a regex that defines the path to a directory of Handlebars partials files. The example below shows how to mark every file in a specific directory as a partial.\n\n``` javascript\noptions: {\n  partialRegex: /.*/,\n  partialsPathRegex: /\\/partials\\//\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-03-06   v0.5.6   [object Object]\n * 2013-02-26   v0.5.5   Add new options partialsUseNamespace, partialRegex, partialsPathRegex\n * 2013-02-14   v0.5.4   First official release for Grunt 0.4.0.\n * 2013-02-07   v0.5.4rc7   When `namespace` is false and `amd` is true, return handlebars templates directly from AMD wrapper.\n * 2013-01-31   v0.5.3rc7   Add `node` option to produce dual node.js / front-end compiled file.\n * 2013-01-28   v0.5.2rc7   Define handlebars as a dependency for AMD option.\n * 2013-01-27   v0.5.1rc7   Add AMD compilation option. Add processContent option. Do not generate templates into a namespaces when namespace option is false.\n * 2013-01-22   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-08   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-20   v0.3.3   Reset for each target\n * 2012-10-11   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-02   v0.3.1   Bugfix default processPartialName.\n * 2012-09-22   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-15   v0.2.3   Support for nested namespaces.\n * 2012-09-11   v0.2.2   Escape single quotes in filenames.\n * 2012-09-09   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Thu Mar 07 2013 07:57:54.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.5.6","dist":{"shasum":"21ae46d8aa8a7ad306e28919f7dc6840abd9b9e7","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.5.6.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.5.7":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.5.7","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.8","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"~0.2.0","grunt-contrib-nodeunit":"~0.1.2","grunt-contrib-clean":"~0.4.0","grunt-contrib-internal":"~0.4.2"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com"},{"name":"Chris Talkington","url":"http://christalkington.com"},{"name":"David Mosher","url":"http://blog.davemo.com"},{"name":"Larry Davis","url":"http://lazd.net/"},{"name":"Pete Hawkins","url":"http://phawk.co.uk"},{"name":"Alexander Kong","url":"http://github.com/WebBlow"},{"name":"Yusuke Kawasaki","url":"https://github.com/kawanet"},{"name":"Thanasis Polychronakis","url":"http://thanpol.as"},{"name":"Ryan Leckey","url":"https://github.com/mehcode"},{"name":"Phil Dokas","url":"http://jetless.org"},{"name":"Jeremy Morrell","url":"https://github.com/jmorrell"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\n```\n\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.3](https://github.com/gruntjs/grunt-contrib-handlebars/tree/grunt-0.3-stable).*\n\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n### Options\n\n#### separator\nType: `String`\nDefault: linefeed + linefeed\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String` `false`\nDefault: 'JST'\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces or false for no namespace wrapping.*  When false with `amd` option set `true`, templates will be returned directly from the AMD wrapper.\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### partialsUseNamespace\nType: `Boolean`\nDefault: 'false'\n\nWhen set to `true`, partials will be registered in the `namespace` in addition to templates.\n\n#### wrapped\nType: `Boolean`\nDefault: `false`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### node\nType: `Boolean`\nDefault: `false`\n\nEnable the compiled file to be required on node.js by preppending and appending proper declarations. You can use the file safely on the front-end.\n\nFor this option to work you need to define the `namespace` option.\n\n#### amd\nType: `Boolean`\ndefault: `false`\n\nWraps the output file with an AMD define function and returns the compiled template namespace unless namespace has been explicitly set to false in which case the template function will be returned directly.\n\n```js\ndefine(function() {\n    //...//\n    returns this['[template namespace]'];\n});\n```\n\n#### processContent\nType: `function`\n\nThis option accepts a function which takes one argument (the template file content) and returns a string which will be used as the source for the precompiled template object.  The example below removes leading and trailing spaces to shorten templates.\n\n```js\noptions: {\n  processContent: function(content) {\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\n    return content;\n  }\n}\n```\n\n#### processAST\nType: `function`\n\nThis option accepts a function which takes one argument (the parsed Abstract Syntax Tree) and returns a modified version which will be used as the source for the precompiled template object.  The example below removes any partial and replaces it with the text `foo`.\n\n```js\noptions: {\n  processAST: function(ast) {\n    ast.statements.forEach(function(statement, i) {\n      if (statement.type === 'partial') {\n        ast.statements[i] = { type: 'content', string: 'foo' };\n      }\n    });\n    return ast;\n  }\n}\n```\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filename) {\n    return filename.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: ```function```\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`\nDefault: /^_/\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n#### partialsPathRegex\nType: `Regexp`\nDefault: '/./'\n\nThis option accepts a regex that defines the path to a directory of Handlebars partials files. The example below shows how to mark every file in a specific directory as a partial.\n\n``` javascript\noptions: {\n  partialRegex: /.*/,\n  partialsPathRegex: /\\/partials\\//\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-03-10   v0.5.7   Fix regression with 'wrapped' option.\n * 2013-03-06   v0.5.6   [object Object]\n * 2013-02-26   v0.5.5   Add new options partialsUseNamespace, partialRegex, partialsPathRegex\n * 2013-02-14   v0.5.4   First official release for Grunt 0.4.0.\n * 2013-02-07   v0.5.4rc7   When `namespace` is false and `amd` is true, return handlebars templates directly from AMD wrapper.\n * 2013-01-31   v0.5.3rc7   Add `node` option to produce dual node.js / front-end compiled file.\n * 2013-01-28   v0.5.2rc7   Define handlebars as a dependency for AMD option.\n * 2013-01-27   v0.5.1rc7   Add AMD compilation option. Add processContent option. Do not generate templates into a namespaces when namespace option is false.\n * 2013-01-22   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-08   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-20   v0.3.3   Reset for each target\n * 2012-10-11   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-02   v0.3.1   Bugfix default processPartialName.\n * 2012-09-22   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-15   v0.2.3   Support for nested namespaces.\n * 2012-09-11   v0.2.2   Escape single quotes in filenames.\n * 2012-09-09   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Mon Mar 11 2013 09:51:45.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.5.7","dist":{"shasum":"023e78df8926f459a0d90f7679cb093ce8c3ccb2","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.5.7.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.5.8":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.5.8","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.10","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"~0.2.0","grunt-contrib-nodeunit":"~0.1.2","grunt-contrib-clean":"~0.4.0","grunt-contrib-internal":"~0.4.2"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com"},{"name":"Chris Talkington","url":"http://christalkington.com"},{"name":"David Mosher","url":"http://blog.davemo.com"},{"name":"Larry Davis","url":"http://lazd.net/"},{"name":"Pete Hawkins","url":"http://phawk.co.uk"},{"name":"Alexander Kong","url":"http://github.com/WebBlow"},{"name":"Yusuke Kawasaki","url":"https://github.com/kawanet"},{"name":"Thanasis Polychronakis","url":"http://thanpol.as"},{"name":"Ryan Leckey","url":"https://github.com/mehcode"},{"name":"Phil Dokas","url":"http://jetless.org"},{"name":"Jeremy Morrell","url":"https://github.com/jmorrell"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\n```\n\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.3](https://github.com/gruntjs/grunt-contrib-handlebars/tree/grunt-0.3-stable).*\n\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n### Options\n\n#### separator\nType: `String`\nDefault: linefeed + linefeed\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String` `false`\nDefault: 'JST'\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces or false for no namespace wrapping.*  When false with `amd` option set `true`, templates will be returned directly from the AMD wrapper.\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### partialsUseNamespace\nType: `Boolean`\nDefault: 'false'\n\nWhen set to `true`, partials will be registered in the `namespace` in addition to templates.\n\n#### wrapped\nType: `Boolean`\nDefault: `true`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### node\nType: `Boolean`\nDefault: `false`\n\nEnable the compiled file to be required on node.js by preppending and appending proper declarations. You can use the file safely on the front-end.\n\nFor this option to work you need to define the `namespace` option.\n\n#### amd\nType: `Boolean`\ndefault: `false`\n\nWraps the output file with an AMD define function and returns the compiled template namespace unless namespace has been explicitly set to false in which case the template function will be returned directly.\n\n```js\ndefine(function() {\n    //...//\n    returns this['[template namespace]'];\n});\n```\n\n#### processContent\nType: `function`\n\nThis option accepts a function which takes one argument (the template file content) and returns a string which will be used as the source for the precompiled template object.  The example below removes leading and trailing spaces to shorten templates.\n\n```js\noptions: {\n  processContent: function(content) {\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\n    return content;\n  }\n}\n```\n\n#### processAST\nType: `function`\n\nThis option accepts a function which takes one argument (the parsed Abstract Syntax Tree) and returns a modified version which will be used as the source for the precompiled template object.  The example below removes any partial and replaces it with the text `foo`.\n\n```js\noptions: {\n  processAST: function(ast) {\n    ast.statements.forEach(function(statement, i) {\n      if (statement.type === 'partial') {\n        ast.statements[i] = { type: 'content', string: 'foo' };\n      }\n    });\n    return ast;\n  }\n}\n```\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filename) {\n    return filename.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: ```function```\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`\nDefault: /^_/\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n#### partialsPathRegex\nType: `Regexp`\nDefault: '/./'\n\nThis option accepts a regex that defines the path to a directory of Handlebars partials files. The example below shows how to mark every file in a specific directory as a partial.\n\n``` javascript\noptions: {\n  partialRegex: /.*/,\n  partialsPathRegex: /\\/partials\\//\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-03-13   v0.5.8   Update handlebars dep to ~1.0.10\n * 2013-03-10   v0.5.7   Fix regression with 'wrapped' option.\n * 2013-03-06   v0.5.6   [object Object]\n * 2013-02-26   v0.5.5   Add new options partialsUseNamespace, partialRegex, partialsPathRegex\n * 2013-02-14   v0.5.4   First official release for Grunt 0.4.0.\n * 2013-02-07   v0.5.4rc7   When `namespace` is false and `amd` is true, return handlebars templates directly from AMD wrapper.\n * 2013-01-31   v0.5.3rc7   Add `node` option to produce dual node.js / front-end compiled file.\n * 2013-01-28   v0.5.2rc7   Define handlebars as a dependency for AMD option.\n * 2013-01-27   v0.5.1rc7   Add AMD compilation option. Add processContent option. Do not generate templates into a namespaces when namespace option is false.\n * 2013-01-22   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-08   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-20   v0.3.3   Reset for each target\n * 2012-10-11   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-02   v0.3.1   Bugfix default processPartialName.\n * 2012-09-22   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-15   v0.2.3   Support for nested namespaces.\n * 2012-09-11   v0.2.2   Escape single quotes in filenames.\n * 2012-09-09   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Thu Mar 14 2013 09:50:33.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.5.8","dist":{"shasum":"c9aed2e86d82dcb05d4b89cb552b7e85ae3c7620","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.5.8.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.5.9":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.5.9","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.10","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"~0.2.0","grunt-contrib-nodeunit":"~0.1.2","grunt-contrib-clean":"~0.4.0","grunt-contrib-internal":"~0.4.2"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com"},{"name":"Chris Talkington","url":"http://christalkington.com"},{"name":"David Mosher","url":"http://blog.davemo.com"},{"name":"Larry Davis","url":"http://lazd.net/"},{"name":"Pete Hawkins","url":"http://phawk.co.uk"},{"name":"Alexander Kong","url":"http://github.com/WebBlow"},{"name":"Yusuke Kawasaki","url":"https://github.com/kawanet"},{"name":"Thanasis Polychronakis","url":"http://thanpol.as"},{"name":"Ryan Leckey","url":"https://github.com/mehcode"},{"name":"Phil Dokas","url":"http://jetless.org"},{"name":"Jeremy Morrell","url":"https://github.com/jmorrell"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\n```\n\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.3](https://github.com/gruntjs/grunt-contrib-handlebars/tree/grunt-0.3-stable).*\n\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n### Options\n\n#### separator\nType: `String`\nDefault: linefeed + linefeed\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String` `false`\nDefault: 'JST'\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces or false for no namespace wrapping.*  When false with `amd` option set `true`, templates will be returned directly from the AMD wrapper.\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### partialsUseNamespace\nType: `Boolean`\nDefault: 'false'\n\nWhen set to `true`, partials will be registered in the `namespace` in addition to templates.\n\n#### wrapped\nType: `Boolean`\nDefault: `true`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### node\nType: `Boolean`\nDefault: `false`\n\nEnable the compiled file to be required on node.js by preppending and appending proper declarations. You can use the file safely on the front-end.\n\nFor this option to work you need to define the `namespace` option.\n\n#### amd\nType: `Boolean`\ndefault: `false`\n\nWraps the output file with an AMD define function and returns the compiled template namespace unless namespace has been explicitly set to false in which case the template function will be returned directly.\n\n```js\ndefine(function() {\n    //...//\n    returns this['[template namespace]'];\n});\n```\n\n#### processContent\nType: `function`\n\nThis option accepts a function which takes one argument (the template file content) and returns a string which will be used as the source for the precompiled template object.  The example below removes leading and trailing spaces to shorten templates.\n\n```js\noptions: {\n  processContent: function(content) {\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\n    return content;\n  }\n}\n```\n\n#### processAST\nType: `function`\n\nThis option accepts a function which takes one argument (the parsed Abstract Syntax Tree) and returns a modified version which will be used as the source for the precompiled template object.  The example below removes any partial and replaces it with the text `foo`.\n\n```js\noptions: {\n  processAST: function(ast) {\n    ast.statements.forEach(function(statement, i) {\n      if (statement.type === 'partial') {\n        ast.statements[i] = { type: 'content', string: 'foo' };\n      }\n    });\n    return ast;\n  }\n}\n```\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filename) {\n    return filename.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: ```function```\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`\nDefault: /^_/\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n#### partialsPathRegex\nType: `Regexp`\nDefault: '/./'\n\nThis option accepts a regex that defines the path to a directory of Handlebars partials files. The example below shows how to mark every file in a specific directory as a partial.\n\n``` javascript\noptions: {\n  partialRegex: /.*/,\n  partialsPathRegex: /\\/partials\\//\n}\n```\n\n#### compilerOptions\nType `Object`\nDefault: `{}`\n\nThis option allows you to specify a hash of options which will be passed directly to the Handlebars compiler.\n\n``` javascript\noptions: {\n  compilerOptions: {\n    knownHelpers: {\n      \"my-helper\": true,\n      \"another-helper\": true\n    },\n    knownHelpersOnly: true\n  }\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-05-30   v0.5.9   Allow passing `compilerOptions` to Handlebars compiler.\n * 2013-03-14   v0.5.8   Update handlebars dep to ~1.0.10\n * 2013-03-11   v0.5.7   Fix regression with 'wrapped' option.\n * 2013-03-07   v0.5.6   Add new option, processAST\n * 2013-02-27   v0.5.5   Add new options partialsUseNamespace, partialRegex, partialsPathRegex\n * 2013-02-15   v0.5.4   First official release for Grunt 0.4.0.\n * 2013-02-08   v0.5.4rc7   When `namespace` is false and `amd` is true, return handlebars templates directly from AMD wrapper.\n * 2013-02-01   v0.5.3rc7   Add `node` option to produce dual node.js / front-end compiled file.\n * 2013-01-29   v0.5.2rc7   Define handlebars as a dependency for AMD option.\n * 2013-01-28   v0.5.1rc7   Add AMD compilation option. Add processContent option. Do not generate templates into a namespaces when namespace option is false.\n * 2013-01-23   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-09   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-21   v0.3.3   Reset for each target\n * 2012-10-12   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-03   v0.3.1   Bugfix default processPartialName.\n * 2012-09-23   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-16   v0.2.3   Support for nested namespaces.\n * 2012-09-12   v0.2.2   Escape single quotes in filenames.\n * 2012-09-10   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Thu May 30 2013 09:54:24.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.5.9","dist":{"shasum":"e0d9b2bedc9ba79715e9631c0ddbeb30ef9852e3","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.5.9.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.5.10":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.5.10","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.10","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"~0.6.0","grunt-contrib-nodeunit":"~0.1.2","grunt-contrib-clean":"~0.4.0","grunt-contrib-internal":"~0.4.2"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com"},{"name":"Chris Talkington","url":"http://christalkington.com"},{"name":"David Mosher","url":"http://blog.davemo.com"},{"name":"Larry Davis","url":"http://lazd.net/"},{"name":"Pete Hawkins","url":"http://phawk.co.uk"},{"name":"Alexander Kong","url":"http://github.com/WebBlow"},{"name":"Yusuke Kawasaki","url":"https://github.com/kawanet"},{"name":"Thanasis Polychronakis","url":"http://thanpol.as"},{"name":"Ryan Leckey","url":"https://github.com/mehcode"},{"name":"Phil Dokas","url":"http://jetless.org"},{"name":"Jeremy Morrell","url":"https://github.com/jmorrell"},{"name":"Christian Maughan Tegnér","url":"https://github.com/CMTegner"},{"name":"Spike Brehm","url":"https://github.com/spikebrehm"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\n```\n\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.3](https://github.com/gruntjs/grunt-contrib-handlebars/tree/grunt-0.3-stable).*\n\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n### Options\n\n#### separator\nType: `String`\nDefault: linefeed + linefeed\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String` `false`\nDefault: 'JST'\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces or false for no namespace wrapping.*  When false with `amd` option set `true`, templates will be returned directly from the AMD wrapper.\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### partialsUseNamespace\nType: `Boolean`\nDefault: 'false'\n\nWhen set to `true`, partials will be registered in the `namespace` in addition to templates.\n\n#### wrapped\nType: `Boolean`\nDefault: `true`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### node\nType: `Boolean`\nDefault: `false`\n\nEnable the compiled file to be required on node.js by preppending and appending proper declarations. You can use the file safely on the front-end.\n\nFor this option to work you need to define the `namespace` option.\n\n#### amd\nType: `Boolean`\ndefault: `false`\n\nWraps the output file with an AMD define function and returns the compiled template namespace unless namespace has been explicitly set to false in which case the template function will be returned directly.\n\n```js\ndefine(function() {\n    //...//\n    return this['[template namespace]'];\n});\n```\n\n#### commonjs\nType: `Boolean`\ndefault: `false`\n\nWraps the output file in a CommonJS module function, exporting the compiled templates. It will also add templates to the template namespace, unless `namepsace` is explicitly set to `false`.\n\n```js\nmodule.exports = function(Handlebars) {\n    //...//\n    Handlebars.template(…);\n    return this['[template namespace]'];\n};\n```\n\nWhen requiring the module in a CommonJS environment, pass in your `Handlebars` object.\n\n```js\nvar Handlebars = require('handlebars');\nvar templates = require('./templates')(Handlebars);\n```\n\n#### processContent\nType: `function`\n\nThis option accepts a function which takes one argument (the template file content) and returns a string which will be used as the source for the precompiled template object.  The example below removes leading and trailing spaces to shorten templates.\n\n```js\noptions: {\n  processContent: function(content) {\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\n    return content;\n  }\n}\n```\n\n#### processAST\nType: `function`\n\nThis option accepts a function which takes one argument (the parsed Abstract Syntax Tree) and returns a modified version which will be used as the source for the precompiled template object.  The example below removes any partial and replaces it with the text `foo`.\n\n```js\noptions: {\n  processAST: function(ast) {\n    ast.statements.forEach(function(statement, i) {\n      if (statement.type === 'partial') {\n        ast.statements[i] = { type: 'content', string: 'foo' };\n      }\n    });\n    return ast;\n  }\n}\n```\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filename) {\n    return filename.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: ```function```\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`\nDefault: /^_/\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n#### partialsPathRegex\nType: `Regexp`\nDefault: '/./'\n\nThis option accepts a regex that defines the path to a directory of Handlebars partials files. The example below shows how to mark every file in a specific directory as a partial.\n\n``` javascript\noptions: {\n  partialRegex: /.*/,\n  partialsPathRegex: /\\/partials\\//\n}\n```\n\n#### compilerOptions\nType `Object`\nDefault: `{}`\n\nThis option allows you to specify a hash of options which will be passed directly to the Handlebars compiler.\n\n``` javascript\noptions: {\n  compilerOptions: {\n    knownHelpers: {\n      \"my-helper\": true,\n      \"another-helper\": true\n    },\n    knownHelpersOnly: true\n  }\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-07-14   v0.5.10   Add `commonjs` option.\n * 2013-05-30   v0.5.9   Allow passing `compilerOptions` to Handlebars compiler.\n * 2013-03-14   v0.5.8   Update handlebars dep to ~1.0.10\n * 2013-03-11   v0.5.7   Fix regression with 'wrapped' option.\n * 2013-03-07   v0.5.6   Add new option, processAST\n * 2013-02-27   v0.5.5   Add new options partialsUseNamespace, partialRegex, partialsPathRegex\n * 2013-02-15   v0.5.4   First official release for Grunt 0.4.0.\n * 2013-02-08   v0.5.4rc7   When `namespace` is false and `amd` is true, return handlebars templates directly from AMD wrapper.\n * 2013-02-01   v0.5.3rc7   Add `node` option to produce dual node.js / front-end compiled file.\n * 2013-01-29   v0.5.2rc7   Define handlebars as a dependency for AMD option.\n * 2013-01-28   v0.5.1rc7   Add AMD compilation option. Add processContent option. Do not generate templates into a namespaces when namespace option is false.\n * 2013-01-23   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-09   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-21   v0.3.3   Reset for each target\n * 2012-10-12   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-03   v0.3.1   Bugfix default processPartialName.\n * 2012-09-23   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-16   v0.2.3   Support for nested namespaces.\n * 2012-09-12   v0.2.2   Escape single quotes in filenames.\n * 2012-09-10   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Sun Jul 14 2013 21:15:02.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.5.10","dist":{"shasum":"af462c6ded6a091a5f7b9e81ca86f1f4ade9c50d","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.5.10.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"shama","email":"kyle@dontkry.com"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.5.11":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.5.11","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.10","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"~0.6.0","grunt-contrib-nodeunit":"~0.1.2","grunt-contrib-clean":"~0.4.0","grunt-contrib-internal":"~0.4.6"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com"},{"name":"Chris Talkington","url":"http://christalkington.com"},{"name":"David Mosher","url":"http://blog.davemo.com"},{"name":"Larry Davis","url":"http://lazd.net/"},{"name":"Pete Hawkins","url":"http://phawk.co.uk"},{"name":"Alexander Kong","url":"http://github.com/WebBlow"},{"name":"Yusuke Kawasaki","url":"https://github.com/kawanet"},{"name":"Thanasis Polychronakis","url":"http://thanpol.as"},{"name":"Ryan Leckey","url":"https://github.com/mehcode"},{"name":"Phil Dokas","url":"http://jetless.org"},{"name":"Jeremy Morrell","url":"https://github.com/jmorrell"},{"name":"Christian Maughan Tegnér","url":"https://github.com/CMTegner"},{"name":"Spike Brehm","url":"https://github.com/spikebrehm"}],"readme":"# grunt-contrib-handlebars v0.5.11 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\n```\n\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.3](https://github.com/gruntjs/grunt-contrib-handlebars/tree/grunt-0.3-stable).*\n\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n### Options\n\n#### separator\nType: `String`  \nDefault: `linefeed + linefeed`\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String` `false`  \nDefault: `'JST'`\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces or false for no namespace wrapping.*  When false with `amd` option set `true`, templates will be returned directly from the AMD wrapper.\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### partialsUseNamespace\nType: `Boolean`  \nDefault: `false`\n\nWhen set to `true`, partials will be registered in the `namespace` in addition to templates.\n\n#### wrapped\nType: `Boolean`  \nDefault: `true`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### node\nType: `Boolean`  \nDefault: `false`\n\nEnable the compiled file to be required on node.js by preppending and appending proper declarations. You can use the file safely on the front-end.\n\nFor this option to work you need to define the `namespace` option.\n\n#### amd\nType: `Boolean`  \nDefault: `false`\n\nWraps the output file with an AMD define function and returns the compiled template namespace unless namespace has been explicitly set to false in which case the template function will be returned directly.\n\n```js\ndefine(function() {\n    //...//\n    return this['[template namespace]'];\n});\n```\n\n#### commonjs\nType: `Boolean`  \nDefault: `false`\n\nWraps the output file in a CommonJS module function, exporting the compiled templates. It will also add templates to the template namespace, unless `namepsace` is explicitly set to `false`.\n\n```js\nmodule.exports = function(Handlebars) {\n    //...//\n    Handlebars.template(…);\n    return this['[template namespace]'];\n};\n```\n\nWhen requiring the module in a CommonJS environment, pass in your `Handlebars` object.\n\n```js\nvar Handlebars = require('handlebars');\nvar templates = require('./templates')(Handlebars);\n```\n\n#### processContent\nType: `function`\n\nThis option accepts a function which takes one argument (the template file content) and returns a string which will be used as the source for the precompiled template object.  The example below removes leading and trailing spaces to shorten templates.\n\n```js\noptions: {\n  processContent: function(content) {\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\n    return content;\n  }\n}\n```\n\n#### processAST\nType: `function`\n\nThis option accepts a function which takes one argument (the parsed Abstract Syntax Tree) and returns a modified version which will be used as the source for the precompiled template object.  The example below removes any partial and replaces it with the text `foo`.\n\n```js\noptions: {\n  processAST: function(ast) {\n    ast.statements.forEach(function(statement, i) {\n      if (statement.type === 'partial') {\n        ast.statements[i] = { type: 'content', string: 'foo' };\n      }\n    });\n    return ast;\n  }\n}\n```\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filePath) {\n    return filePath.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: `function`\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`  \nDefault: `/^_/`\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n#### partialsPathRegex\nType: `Regexp`  \nDefault: `/./`\n\nThis option accepts a regex that defines the path to a directory of Handlebars partials files. The example below shows how to mark every file in a specific directory as a partial.\n\n``` javascript\noptions: {\n  partialRegex: /.*/,\n  partialsPathRegex: /\\/partials\\//\n}\n```\n\n#### compilerOptions\nType `Object`  \nDefault: `{}`\n\nThis option allows you to specify a hash of options which will be passed directly to the Handlebars compiler.\n\n``` javascript\noptions: {\n  compilerOptions: {\n    knownHelpers: {\n      \"my-helper\": true,\n      \"another-helper\": true\n    },\n    knownHelpersOnly: true\n  }\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-09-24   v0.5.11   Fix for broken partial pre-compilation.\n * 2013-07-14   v0.5.10   Add `commonjs` option.\n * 2013-05-30   v0.5.9   Allow passing `compilerOptions` to Handlebars compiler.\n * 2013-03-14   v0.5.8   Update handlebars dep to ~1.0.10\n * 2013-03-11   v0.5.7   Fix regression with 'wrapped' option.\n * 2013-03-07   v0.5.6   Add new option, processAST\n * 2013-02-27   v0.5.5   Add new options partialsUseNamespace, partialRegex, partialsPathRegex\n * 2013-02-15   v0.5.4   First official release for Grunt 0.4.0.\n * 2013-02-08   v0.5.4rc7   When `namespace` is false and `amd` is true, return handlebars templates directly from AMD wrapper.\n * 2013-02-01   v0.5.3rc7   Add `node` option to produce dual node.js / front-end compiled file.\n * 2013-01-29   v0.5.2rc7   Define handlebars as a dependency for AMD option.\n * 2013-01-28   v0.5.1rc7   Add AMD compilation option. Add processContent option. Do not generate templates into a namespaces when namespace option is false.\n * 2013-01-23   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-09   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-21   v0.3.3   Reset for each target\n * 2012-10-12   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-03   v0.3.1   Bugfix default processPartialName.\n * 2012-09-23   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-16   v0.2.3   Support for nested namespaces.\n * 2012-09-12   v0.2.2   Escape single quotes in filenames.\n * 2012-09-10   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Tue Sep 24 2013 20:24:30.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.5.11","dist":{"shasum":"de7108a89547314bc776c014a2b332afc1b91663","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.5.11.tgz"},"_from":".","_npmVersion":"1.3.9","_npmUser":{"name":"shama","email":"kyle@dontkry.com"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.5.12":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.5.12","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.10","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"~0.6.0","grunt-contrib-nodeunit":"~0.1.2","grunt-contrib-clean":"~0.4.0","grunt-contrib-internal":"~0.4.6"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com"},{"name":"Chris Talkington","url":"http://christalkington.com"},{"name":"David Mosher","url":"http://blog.davemo.com"},{"name":"Larry Davis","url":"http://lazd.net/"},{"name":"Pete Hawkins","url":"http://phawk.co.uk"},{"name":"Alexander Kong","url":"http://github.com/WebBlow"},{"name":"Yusuke Kawasaki","url":"https://github.com/kawanet"},{"name":"Thanasis Polychronakis","url":"http://thanpol.as"},{"name":"Ryan Leckey","url":"https://github.com/mehcode"},{"name":"Phil Dokas","url":"http://jetless.org"},{"name":"Jeremy Morrell","url":"https://github.com/jmorrell"},{"name":"Christian Maughan Tegnér","url":"https://github.com/CMTegner"},{"name":"Spike Brehm","url":"https://github.com/spikebrehm"}],"readme":"# grunt-contrib-handlebars v0.5.12 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\n```\n\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.3](https://github.com/gruntjs/grunt-contrib-handlebars/tree/grunt-0.3-stable).*\n\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n### Options\n\n#### separator\nType: `String`  \nDefault: `linefeed + linefeed`\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String` `false`  \nDefault: `'JST'`\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces or false for no namespace wrapping.*  When false with `amd` option set `true`, templates will be returned directly from the AMD wrapper.\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### partialsUseNamespace\nType: `Boolean`  \nDefault: `false`\n\nWhen set to `true`, partials will be registered in the `namespace` in addition to templates.\n\n#### wrapped\nType: `Boolean`  \nDefault: `true`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### node\nType: `Boolean`  \nDefault: `false`\n\nEnable the compiled file to be required on node.js by preppending and appending proper declarations. You can use the file safely on the front-end.\n\nFor this option to work you need to define the `namespace` option.\n\n#### amd\nType: `Boolean`  \nDefault: `false`\n\nWraps the output file with an AMD define function and returns the compiled template namespace unless namespace has been explicitly set to false in which case the template function will be returned directly.\n\n```js\ndefine(function() {\n    //...//\n    return this['[template namespace]'];\n});\n```\n\n#### commonjs\nType: `Boolean`  \nDefault: `false`\n\nWraps the output file in a CommonJS module function, exporting the compiled templates. It will also add templates to the template namespace, unless `namespace` is explicitly set to `false`.\n\n```js\nmodule.exports = function(Handlebars) {\n    //...//\n    Handlebars.template(…);\n    return this['[template namespace]'];\n};\n```\n\nWhen requiring the module in a CommonJS environment, pass in your `Handlebars` object.\n\n```js\nvar Handlebars = require('handlebars');\nvar templates = require('./templates')(Handlebars);\n```\n\n#### processContent\nType: `function`\n\nThis option accepts a function which takes two arguments (the template file content, and the filepath) and returns a string which will be used as the source for the precompiled template object.  The example below removes leading and trailing spaces to shorten templates.\n\n```js\noptions: {\n  processContent: function(content, filepath) {\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\n    return content;\n  }\n}\n```\n\n#### processAST\nType: `function`\n\nThis option accepts a function which takes one argument (the parsed Abstract Syntax Tree) and returns a modified version which will be used as the source for the precompiled template object.  The example below removes any partial and replaces it with the text `foo`.\n\n```js\noptions: {\n  processAST: function(ast) {\n    ast.statements.forEach(function(statement, i) {\n      if (statement.type === 'partial') {\n        ast.statements[i] = { type: 'content', string: 'foo' };\n      }\n    });\n    return ast;\n  }\n}\n```\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filePath) {\n    return filePath.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: `function`\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`  \nDefault: `/^_/`\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n#### partialsPathRegex\nType: `Regexp`  \nDefault: `/./`\n\nThis option accepts a regex that defines the path to a directory of Handlebars partials files. The example below shows how to mark every file in a specific directory as a partial.\n\n``` javascript\noptions: {\n  partialRegex: /.*/,\n  partialsPathRegex: /\\/partials\\//\n}\n```\n\n#### compilerOptions\nType `Object`  \nDefault: `{}`\n\nThis option allows you to specify a hash of options which will be passed directly to the Handlebars compiler.\n\n``` javascript\noptions: {\n  compilerOptions: {\n    knownHelpers: {\n      \"my-helper\": true,\n      \"another-helper\": true\n    },\n    knownHelpersOnly: true\n  }\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-11-07   v0.5.12   Pass file path into `processContent`.\n * 2013-09-24   v0.5.11   Fix for broken partial pre-compilation.\n * 2013-07-14   v0.5.10   Add `commonjs` option.\n * 2013-05-30   v0.5.9   Allow passing `compilerOptions` to Handlebars compiler.\n * 2013-03-14   v0.5.8   Update handlebars dep to ~1.0.10\n * 2013-03-11   v0.5.7   Fix regression with 'wrapped' option.\n * 2013-03-07   v0.5.6   Add new option, processAST\n * 2013-02-27   v0.5.5   Add new options partialsUseNamespace, partialRegex, partialsPathRegex\n * 2013-02-15   v0.5.4   First official release for Grunt 0.4.0.\n * 2013-02-08   v0.5.4rc7   When `namespace` is false and `amd` is true, return handlebars templates directly from AMD wrapper.\n * 2013-02-01   v0.5.3rc7   Add `node` option to produce dual node.js / front-end compiled file.\n * 2013-01-29   v0.5.2rc7   Define handlebars as a dependency for AMD option.\n * 2013-01-28   v0.5.1rc7   Add AMD compilation option. Add processContent option. Do not generate templates into a namespaces when namespace option is false.\n * 2013-01-23   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-09   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-21   v0.3.3   Reset for each target\n * 2012-10-12   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-03   v0.3.1   Bugfix default processPartialName.\n * 2012-09-23   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-16   v0.2.3   Support for nested namespaces.\n * 2012-09-12   v0.2.2   Escape single quotes in filenames.\n * 2012-09-10   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Thu Nov 07 2013 12:24:41.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.5.12","dist":{"shasum":"fdaf969bbca32cb20083d58ea860209f92a358c7","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.5.12.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.6.0":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.6.0","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.1.2","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"~0.6.0","grunt-contrib-nodeunit":"~0.1.2","grunt-contrib-clean":"~0.4.0","grunt-contrib-internal":"~0.4.6"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com"},{"name":"Chris Talkington","url":"http://christalkington.com"},{"name":"David Mosher","url":"http://blog.davemo.com"},{"name":"Larry Davis","url":"http://lazd.net/"},{"name":"Pete Hawkins","url":"http://phawk.co.uk"},{"name":"Alexander Kong","url":"http://github.com/WebBlow"},{"name":"Yusuke Kawasaki","url":"https://github.com/kawanet"},{"name":"Thanasis Polychronakis","url":"http://thanpol.as"},{"name":"Ryan Leckey","url":"https://github.com/mehcode"},{"name":"Phil Dokas","url":"http://jetless.org"},{"name":"Jeremy Morrell","url":"https://github.com/jmorrell"},{"name":"Christian Maughan Tegnér","url":"https://github.com/CMTegner"},{"name":"Spike Brehm","url":"https://github.com/spikebrehm"}],"readme":"# grunt-contrib-handlebars v0.6.0 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\n```\n\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.3](https://github.com/gruntjs/grunt-contrib-handlebars/tree/grunt-0.3-stable).*\n\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n### Options\n\n#### separator\nType: `String`  \nDefault: `linefeed + linefeed`\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String` `false`  \nDefault: `'JST'`\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces or false for no namespace wrapping.*  When false with `amd` option set `true`, templates will be returned directly from the AMD wrapper.\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### partialsUseNamespace\nType: `Boolean`  \nDefault: `false`\n\nWhen set to `true`, partials will be registered in the `namespace` in addition to templates.\n\n#### wrapped\nType: `Boolean`  \nDefault: `true`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### node\nType: `Boolean`  \nDefault: `false`\n\nEnable the compiled file to be required on node.js by preppending and appending proper declarations. You can use the file safely on the front-end.\n\nFor this option to work you need to define the `namespace` option.\n\n#### amd\nType: `Boolean`  \nDefault: `false`\n\nWraps the output file with an AMD define function and returns the compiled template namespace unless namespace has been explicitly set to false in which case the template function will be returned directly.\n\n```js\ndefine(function() {\n    //...//\n    return this['[template namespace]'];\n});\n```\n\n#### commonjs\nType: `Boolean`  \nDefault: `false`\n\nWraps the output file in a CommonJS module function, exporting the compiled templates. It will also add templates to the template namespace, unless `namespace` is explicitly set to `false`.\n\n```js\nmodule.exports = function(Handlebars) {\n    //...//\n    Handlebars.template(…);\n    return this['[template namespace]'];\n};\n```\n\nWhen requiring the module in a CommonJS environment, pass in your `Handlebars` object.\n\n```js\nvar Handlebars = require('handlebars');\nvar templates = require('./templates')(Handlebars);\n```\n\n#### processContent\nType: `function`\n\nThis option accepts a function which takes two arguments (the template file content, and the filepath) and returns a string which will be used as the source for the precompiled template object.  The example below removes leading and trailing spaces to shorten templates.\n\n```js\noptions: {\n  processContent: function(content, filepath) {\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\n    return content;\n  }\n}\n```\n\n#### processAST\nType: `function`\n\nThis option accepts a function which takes one argument (the parsed Abstract Syntax Tree) and returns a modified version which will be used as the source for the precompiled template object.  The example below removes any partial and replaces it with the text `foo`.\n\n```js\noptions: {\n  processAST: function(ast) {\n    ast.statements.forEach(function(statement, i) {\n      if (statement.type === 'partial') {\n        ast.statements[i] = { type: 'content', string: 'foo' };\n      }\n    });\n    return ast;\n  }\n}\n```\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filePath) {\n    return filePath.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: `function`\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`  \nDefault: `/^_/`\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n#### partialsPathRegex\nType: `Regexp`  \nDefault: `/./`\n\nThis option accepts a regex that defines the path to a directory of Handlebars partials files. The example below shows how to mark every file in a specific directory as a partial.\n\n``` javascript\noptions: {\n  partialRegex: /.*/,\n  partialsPathRegex: /\\/partials\\//\n}\n```\n\n#### compilerOptions\nType `Object`  \nDefault: `{}`\n\nThis option allows you to specify a hash of options which will be passed directly to the Handlebars compiler.\n\n``` javascript\noptions: {\n  compilerOptions: {\n    knownHelpers: {\n      \"my-helper\": true,\n      \"another-helper\": true\n    },\n    knownHelpersOnly: true\n  }\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-11-11   v0.6.0   Update handlebars dep to ~1.1.2\n * 2013-11-07   v0.5.12   Pass file path into `processContent`.\n * 2013-09-24   v0.5.11   Fix for broken partial pre-compilation.\n * 2013-07-14   v0.5.10   Add `commonjs` option.\n * 2013-05-30   v0.5.9   Allow passing `compilerOptions` to Handlebars compiler.\n * 2013-03-14   v0.5.8   Update handlebars dep to ~1.0.10\n * 2013-03-11   v0.5.7   Fix regression with 'wrapped' option.\n * 2013-03-07   v0.5.6   Add new option, processAST\n * 2013-02-27   v0.5.5   Add new options partialsUseNamespace, partialRegex, partialsPathRegex\n * 2013-02-15   v0.5.4   First official release for Grunt 0.4.0.\n * 2013-02-08   v0.5.4rc7   When `namespace` is false and `amd` is true, return handlebars templates directly from AMD wrapper.\n * 2013-02-01   v0.5.3rc7   Add `node` option to produce dual node.js / front-end compiled file.\n * 2013-01-29   v0.5.2rc7   Define handlebars as a dependency for AMD option.\n * 2013-01-28   v0.5.1rc7   Add AMD compilation option. Add processContent option. Do not generate templates into a namespaces when namespace option is false.\n * 2013-01-23   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-09   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-21   v0.3.3   Reset for each target\n * 2012-10-12   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-03   v0.3.1   Bugfix default processPartialName.\n * 2012-09-23   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-16   v0.2.3   Support for nested namespaces.\n * 2012-09-12   v0.2.2   Escape single quotes in filenames.\n * 2012-09-10   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Mon Nov 11 2013 12:54:56.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.6.0","dist":{"shasum":"1e5b5ba31b5964dc92d3026e863b1c49664ecb91","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.6.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.5.0-rc7":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.5.0-rc7","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.8","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"0.1.1rc6","grunt-contrib-nodeunit":"0.1.2rc6","grunt-contrib-clean":"0.4.0rc6","grunt-contrib-internal":"*","grunt":"0.4.0rc7"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"},{"name":"Chris Talkington","url":"http://christalkington.com/"},{"name":"David Mosher","url":"http://blog.davemo.com/"},{"name":"Larry Davis","url":"http://lazd.net/"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\n_Version `0.4.x` of this plugin is compatible with Grunt `0.4.x`. Version `0.3.x` of this plugin is compatible with Grunt `0.3.x`._\n\n### Options\n\n#### separator\nType: `String`\nDefault: linefeed + linefeed\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String`\nDefault: 'JST'\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces.*\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### wrapped\nType: `Boolean`\nDefault: `false`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filename) {\n    return filename.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: ```function```\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`\nDefault: /^_/\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-01-22   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-08   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-20   v0.3.3   Reset for each target\n * 2012-10-11   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-02   v0.3.1   Bugfix default processPartialName.\n * 2012-09-22   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-15   v0.2.3   Support for nested namespaces.\n * 2012-09-11   v0.2.2   Escape single quotes in filenames.\n * 2012-09-09   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Wed Jan 23 2013 11:13:19.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.5.0-rc7","dist":{"shasum":"8d2e65ffd4f7afae30b289dbd6fd325a4c2b8cd1","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.5.0rc7.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"}],"directories":{}},"0.5.1-rc7":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.5.1-rc7","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.8","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"0.1.1rc6","grunt-contrib-nodeunit":"0.1.2rc6","grunt-contrib-clean":"0.4.0rc6","grunt-contrib-internal":"*","grunt":"0.4.0rc7"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com/"},{"name":"Chris Talkington","url":"http://christalkington.com/"},{"name":"David Mosher","url":"http://blog.davemo.com/"},{"name":"Larry Davis","url":"http://lazd.net/"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\n_Version `0.4.x` of this plugin is compatible with Grunt `0.4.x`. Version `0.3.x` of this plugin is compatible with Grunt `0.3.x`._\n\n### Options\n\n#### separator\nType: `String`\nDefault: linefeed + linefeed\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String`\nDefault: 'JST'\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces or false for no namespace wrapping.*\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### wrapped\nType: `Boolean`\nDefault: `false`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### processContent\nType: `function`\n\nThis option accepts a function which takes one argument (the template file content) and returns a string which will be used as the source for the precompiled template object.  The example below removes leading and trailing spaces to shorten templates.\n\n```js\noptions: {\n  processContent: function(content) {\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\n    return content;\n  }\n}\n```\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filename) {\n    return filename.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: ```function```\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`\nDefault: /^_/\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-01-27   v0.5.1rc7   Add processContent option Do not generate templates into a namespaces when namespace option is false.\n * 2013-01-22   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-08   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-20   v0.3.3   Reset for each target\n * 2012-10-11   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-02   v0.3.1   Bugfix default processPartialName.\n * 2012-09-22   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-15   v0.2.3   Support for nested namespaces.\n * 2012-09-11   v0.2.2   Escape single quotes in filenames.\n * 2012-09-09   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Mon Jan 28 2013 09:24:34.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.5.1-rc7","dist":{"shasum":"e12a4de486edd7c21a6358a7a5537d6d7ffc8d03","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.5.1rc7.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.5.2-rc7":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.5.2-rc7","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.8","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"0.1.1rc6","grunt-contrib-nodeunit":"0.1.2rc6","grunt-contrib-clean":"0.4.0rc6","grunt-contrib-internal":"*","grunt":"0.4.0rc7"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com"},{"name":"Chris Talkington","url":"http://christalkington.com"},{"name":"David Mosher","url":"http://blog.davemo.com"},{"name":"Larry Davis","url":"http://lazd.net/"},{"name":"Pete Hawkins","url":"http://phawk.co.uk"},{"name":"Alexander Kong","url":"http://github.com/WebBlow"},{"name":"Yusuke Kawasaki","url":"https://github.com/kawanet"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\n_Version `0.4.x` of this plugin is compatible with Grunt `0.4.x`. Version `0.3.x` of this plugin is compatible with Grunt `0.3.x`._\n\n### Options\n\n#### separator\nType: `String`\nDefault: linefeed + linefeed\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String`\nDefault: 'JST'\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces or false for no namespace wrapping.*\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### wrapped\nType: `Boolean`\nDefault: `false`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### amd\nType: `Boolean`\ndefault: `false`\n\nWraps the output file with an AMD define function and returns the compiled template.\n\n```js\ndefine(function() {\n    //...//\n    returns this['[template namespace]'];\n});\n```\n\n#### processContent\nType: `function`\n\nThis option accepts a function which takes one argument (the template file content) and returns a string which will be used as the source for the precompiled template object.  The example below removes leading and trailing spaces to shorten templates.\n\n```js\noptions: {\n  processContent: function(content) {\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\n    return content;\n  }\n}\n```\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filename) {\n    return filename.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: ```function```\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`\nDefault: /^_/\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-01-28   v0.5.2rc7   Define handlebars as a dependency for AMD option.\n * 2013-01-27   v0.5.1rc7   Add AMD compilation option. Add processContent option. Do not generate templates into a namespaces when namespace option is false.\n * 2013-01-22   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-08   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-20   v0.3.3   Reset for each target\n * 2012-10-11   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-02   v0.3.1   Bugfix default processPartialName.\n * 2012-09-22   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-15   v0.2.3   Support for nested namespaces.\n * 2012-09-11   v0.2.2   Escape single quotes in filenames.\n * 2012-09-09   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Tue Jan 29 2013 14:07:32.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.5.2-rc7","dist":{"shasum":"0b5c506e90e0100d634b7834b8d63fb3a18c4844","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.5.2rc7.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.5.3-rc7":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.5.3-rc7","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.8","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"0.1.1rc6","grunt-contrib-nodeunit":"0.1.2rc6","grunt-contrib-clean":"0.4.0rc6","grunt-contrib-internal":"*","grunt":"0.4.0rc7"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com"},{"name":"Chris Talkington","url":"http://christalkington.com"},{"name":"David Mosher","url":"http://blog.davemo.com"},{"name":"Larry Davis","url":"http://lazd.net/"},{"name":"Pete Hawkins","url":"http://phawk.co.uk"},{"name":"Alexander Kong","url":"http://github.com/WebBlow"},{"name":"Yusuke Kawasaki","url":"https://github.com/kawanet"},{"name":"Thanasis Polychronakis","url":"http://thanpol.as"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\n_Version `0.4.x` of this plugin is compatible with Grunt `0.4.x`. Version `0.3.x` of this plugin is compatible with Grunt `0.3.x`._\n\n### Options\n\n#### separator\nType: `String`\nDefault: linefeed + linefeed\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String`\nDefault: 'JST'\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces or false for no namespace wrapping.*\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### wrapped\nType: `Boolean`\nDefault: `false`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### node\nType: `Boolean`\nDefault: `false`\n\nEnable the compiled file to be required on node.js by preppending and appending proper declarations. You can use the file safely on the front-end.\n\nFor this option to work you need to define the `namespace` option.\n\n#### amd\nType: `Boolean`\ndefault: `false`\n\nWraps the output file with an AMD define function and returns the compiled template.\n\n```js\ndefine(function() {\n    //...//\n    returns this['[template namespace]'];\n});\n```\n\n#### processContent\nType: `function`\n\nThis option accepts a function which takes one argument (the template file content) and returns a string which will be used as the source for the precompiled template object.  The example below removes leading and trailing spaces to shorten templates.\n\n```js\noptions: {\n  processContent: function(content) {\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\n    return content;\n  }\n}\n```\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filename) {\n    return filename.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: ```function```\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`\nDefault: /^_/\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-01-31   v0.5.3rc7   Add `node` option to produce dual node.js / front-end compiled file.\n * 2013-01-28   v0.5.2rc7   Define handlebars as a dependency for AMD option.\n * 2013-01-27   v0.5.1rc7   Add AMD compilation option. Add processContent option. Do not generate templates into a namespaces when namespace option is false.\n * 2013-01-22   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-08   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-20   v0.3.3   Reset for each target\n * 2012-10-11   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-02   v0.3.1   Bugfix default processPartialName.\n * 2012-09-22   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-15   v0.2.3   Support for nested namespaces.\n * 2012-09-11   v0.2.2   Escape single quotes in filenames.\n * 2012-09-09   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Fri Feb 01 2013 13:53:56.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.5.3-rc7","dist":{"shasum":"1e8988910a77636227e22f922f9dce4294378ab8","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.5.3rc7.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}},"0.5.4-rc7":{"name":"grunt-contrib-handlebars","description":"Precompile Handlebars templates to JST file.","version":"0.5.4-rc7","homepage":"https://github.com/gruntjs/grunt-contrib-handlebars","author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"bugs":{"url":"https://github.com/gruntjs/grunt-contrib-handlebars/issues"},"licenses":[{"type":"MIT","url":"https://github.com/gruntjs/grunt-contrib-handlebars/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"dependencies":{"handlebars":"~1.0.8","grunt-lib-contrib":"~0.5.1"},"devDependencies":{"grunt-contrib-jshint":"0.1.1rc6","grunt-contrib-nodeunit":"0.1.2rc6","grunt-contrib-clean":"0.4.0rc6","grunt-contrib-internal":"*","grunt":"0.4.0rc7"},"keywords":["gruntplugin"],"contributors":[{"name":"Tim Branyen","url":"http://tbranyen.com"},{"name":"Tyler Kellen","url":"http://goingslowly.com"},{"name":"Chris Talkington","url":"http://christalkington.com"},{"name":"David Mosher","url":"http://blog.davemo.com"},{"name":"Larry Davis","url":"http://lazd.net/"},{"name":"Pete Hawkins","url":"http://phawk.co.uk"},{"name":"Alexander Kong","url":"http://github.com/WebBlow"},{"name":"Yusuke Kawasaki","url":"https://github.com/kawanet"},{"name":"Thanasis Polychronakis","url":"http://thanpol.as"},{"name":"Ryan Leckey","url":"https://github.com/mehcode"}],"readme":"# grunt-contrib-handlebars [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-contrib-handlebars.png?branch=master)](http://travis-ci.org/gruntjs/grunt-contrib-handlebars)\n\n> Precompile Handlebars templates to JST file.\n\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-handlebars --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: http://gruntjs.com/getting-started\n\n\n## Handlebars task\n_Run this task with the `grunt handlebars` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n\n_Version `0.4.x` of this plugin is compatible with Grunt `0.4.x`. Version `0.3.x` of this plugin is compatible with Grunt `0.3.x`._\n\n### Options\n\n#### separator\nType: `String`\nDefault: linefeed + linefeed\n\nConcatenated files will be joined on this string.\n\n#### namespace\nType: `String` `false`\nDefault: 'JST'\n\nThe namespace in which the precompiled templates will be assigned.  *Use dot notation (e.g. App.Templates) for nested namespaces or false for no namespace wrapping.*  When false with `amd` option set `true`, templates will be returned directly from the AMD wrapper.\n\nExample:\n```js\noptions: {\n  namespace: 'MyApp.Templates'\n}\n```\n\n#### wrapped\nType: `Boolean`\nDefault: `false`\n\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function.\n\n#### node\nType: `Boolean`\nDefault: `false`\n\nEnable the compiled file to be required on node.js by preppending and appending proper declarations. You can use the file safely on the front-end.\n\nFor this option to work you need to define the `namespace` option.\n\n#### amd\nType: `Boolean`\ndefault: `false`\n\nWraps the output file with an AMD define function and returns the compiled template namespace unless namespace has been explicitly set to false in which case the template function will be returned directly.\n\n```js\ndefine(function() {\n    //...//\n    returns this['[template namespace]'];\n});\n```\n\n#### processContent\nType: `function`\n\nThis option accepts a function which takes one argument (the template file content) and returns a string which will be used as the source for the precompiled template object.  The example below removes leading and trailing spaces to shorten templates.\n\n```js\noptions: {\n  processContent: function(content) {\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\n    return content;\n  }\n}\n```\n\n#### processName\nType: `function`\n\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\n\n```js\noptions: {\n  processName: function(filename) {\n    return filename.toUpperCase();\n  }\n}\n```\n\n#### processPartialName\nType: ```function```\n\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\n\n```js\noptions: {\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\n    var pieces = filePath.split(\"/\");\n    return pieces[pieces.length - 1]; // output: _header.hbs\n  }\n}\n````\n\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\n\n#### partialRegex\nType: `Regexp`\nDefault: /^_/\n\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files.\n\n``` javascript\n// assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\noptions: {\n  partialRegex: /^par_/\n}\n```\n\n### Usage Examples\n\n```js\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"JST\"\n    },\n    files: {\n      \"path/to/result.js\": \"path/to/source.hbs\",\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\n    }\n  }\n}\n```\n\n\n## Release History\n\n * 2013-01-31   v0.5.4rc7   When `namespace` is false and `amd` is true, return handlebars templates directly from AMD wrapper.\n * 2013-01-31   v0.5.3rc7   Add `node` option to produce dual node.js / front-end compiled file.\n * 2013-01-28   v0.5.2rc7   Define handlebars as a dependency for AMD option.\n * 2013-01-27   v0.5.1rc7   Add AMD compilation option. Add processContent option. Do not generate templates into a namespaces when namespace option is false.\n * 2013-01-22   v0.5.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Default wrapped option to true.\n * 2013-01-08   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\n * 2012-11-20   v0.3.3   Reset for each target\n * 2012-10-11   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\n * 2012-10-02   v0.3.1   Bugfix default processPartialName.\n * 2012-09-22   v0.3.0   Options no longer accepted from global config key.\n * 2012-09-15   v0.2.3   Support for nested namespaces.\n * 2012-09-11   v0.2.2   Escape single quotes in filenames.\n * 2012-09-09   v0.2.0   Refactored from grunt-contrib into individual repo.\n\n---\n\nTask submitted by [Tim Branyen](http://tbranyen.com)\n\n*This file was generated on Fri Feb 08 2013 10:35:22.*\n","readmeFilename":"README.md","_id":"grunt-contrib-handlebars@0.5.4-rc7","dist":{"shasum":"ea6cfd6c5b2ee9786271e58210fa192c9ddc2e32","tarball":"http://registry.npmjs.org/grunt-contrib-handlebars/-/grunt-contrib-handlebars-0.5.4rc7.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tkellen","email":"tyler@sleekcode.net"},"maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"directories":{}}},"readme":"# grunt-contrib-handlebars\r\n> Precompile Handlebars templates to JST file (part of the [grunt-contrib](https://github.com/gruntjs/grunt-contrib) collection).  Submitted by [Tim Branyen](/tbranyen).\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-contrib-handlebars`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\r\n```\r\n\r\n[grunt]: https://github.com/cowboy/grunt\r\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\r\n\r\n### Overview\r\n\r\nInside your `grunt.js` file, add a section named `handlebars`. This section specifies the files to compile and the options used with [handlebars](http://handlebarsjs.com/).\r\n\r\n##### files ```object```\r\n\r\nThis defines what files this task will process and should contain key:value pairs.\r\n\r\nThe key (destination) should be an unique filepath (supports [grunt.template](https://github.com/cowboy/grunt/blob/master/docs/api_template.md)) and the value (source) should be a filepath or an array of filepaths (supports [minimatch](https://github.com/isaacs/minimatch)).\r\n\r\nNote: Values are precompiled to the namespaced JST array in the order passed.\r\n\r\n##### options ```object```\r\n\r\nThis controls how this task operates and should contain key:value pairs, see options below.\r\n\r\n#### Options\r\n\r\n##### namespace ```string```\r\n\r\nThe namespace in which the resulting JST templates are assigned to.\r\n\r\n##### wrapped ```boolean```\r\n\r\nDetermine if preprocessed template functions will be wrapped in Handlebars.template function (default is false).\r\n\r\n##### processName ```function```\r\n\r\nThis option accepts a function which takes one argument (the template filepath) and returns a string which will be used as the key for the precompiled template object.  The example below stores all templates on the default JST namespace in capital letters.\r\n\r\n``` javascript\r\noptions: {\r\n  processName: function(filename) {\r\n    return filename.toUpperCase();\r\n  }\r\n}\r\n```\r\n\r\n##### processPartialName ```function```\r\n\r\nThis option accepts a function which takes one argument (the partial filepath) and returns a string which will be used as the key for the precompiled partial object when it is registered in Handlebars.partials. The example below stores all partials using only the actual filename instead of the full path.\r\n\r\n``` javascript\r\noptions: {\r\n  processPartialName: function(filePath) { // input:  templates/_header.hbs\r\n    var pieces = filePath.split(\"/\");\r\n    return pieces[pieces.length - 1];      // output: _header.hbs\r\n  }\r\n}\r\n````\r\n\r\nNote: If processPartialName is not provided as an option the default assumes that partials will be stored by stripping trailing underscore characters and filename extensions. For example, the path *templates/_header.hbs* will become *header* and can be referenced in other templates as *{{> header}}*.\r\n\r\n##### partialRegex ```regex```\r\n\r\nThis option accepts a regex that defines the prefix character that is used to identify Handlebars partial files. (The default is _).\r\n\r\n``` javascript\r\noptions: {\r\n  partialRegex: /^par_/ // assumes partial files would be prefixed with \"par_\" ie: \"par_header.hbs\"\r\n}\r\n```\r\n\r\n#### Config Example\r\n\r\n``` javascript\r\nhandlebars: {\r\n  compile: {\r\n    options: {\r\n      namespace: \"JST\"\r\n    },\r\n    files: {\r\n      \"path/to/result.js\": \"path/to/source.hbs\",\r\n      \"path/to/another.js\": [\"path/to/sources/*.hbs\", \"path/to/more/*.hbs\"]\r\n    }\r\n  }\r\n}\r\n```","maintainers":[{"name":"tkellen","email":"tyler@sleekcode.net"},{"name":"cowboy","email":"cowboy@rj3.net"},{"name":"shama","email":"kyle@dontkry.com"}],"time":{"0.2.0":"2012-09-10T22:26:40.598Z","0.2.1":"2012-09-11T11:53:29.626Z","0.2.2":"2012-09-12T16:01:57.929Z","0.2.3":"2012-09-16T14:28:53.269Z","0.2.4":"2012-09-17T13:42:27.220Z","0.3.0":"2012-09-24T04:50:14.108Z","0.3.1":"2012-10-03T10:19:33.770Z","0.3.2":"2012-10-12T13:48:40.656Z","0.3.3":"2012-11-21T18:18:50.664Z","0.3.4":"2013-02-01T18:46:46.036Z","0.3.5":"2013-02-09T21:03:14.914Z","0.5.4":"2013-02-18T17:24:51.982Z","0.5.5":"2013-02-27T14:37:56.408Z","0.5.6":"2013-03-07T12:56:53.104Z","0.5.7":"2013-03-11T14:51:21.144Z","0.5.8":"2013-03-14T14:51:00.759Z","0.5.9":"2013-05-30T14:00:17.954Z","0.5.10":"2013-07-15T04:18:23.550Z","0.5.11":"2013-09-25T03:25:36.409Z","0.5.12":"2013-11-07T17:25:43.925Z","0.6.0":"2013-11-11T17:56:51.840Z","0.5.0-rc7":"2013-01-23T16:36:32.944Z","0.5.1-rc7":"2013-01-28T14:23:37.077Z","0.5.2-rc7":"2013-01-30T02:07:46.069Z","0.5.3-rc7":"2013-02-01T18:52:54.402Z","0.5.4-rc7":"2013-02-08T16:40:28.705Z"},"author":{"name":"Grunt Team","url":"http://gruntjs.com/"},"repository":{"type":"git","url":"git://github.com/gruntjs/grunt-contrib-handlebars.git"},"users":{"joeybaker":true},"_attachments":{"grunt-contrib-handlebars-0.6.0.tgz":{"content_type":"application/octet-stream","revpos":71,"digest":"md5-1CIQqFfEbTsNyNXCrA/f9A==","length":12177,"stub":true},"grunt-contrib-handlebars-0.5.12.tgz":{"content_type":"application/octet-stream","revpos":69,"digest":"md5-HOcjC6i6pOJV+hICbvn0qQ==","length":12167,"stub":true},"grunt-contrib-handlebars-0.5.11.tgz":{"content_type":"application/octet-stream","revpos":67,"digest":"md5-lyzkd4hPiYsU9Hr/Pg2rwg==","length":12175,"stub":true},"grunt-contrib-handlebars-0.5.10.tgz":{"content_type":"application/octet-stream","revpos":65,"digest":"md5-3/Tpnm0pIwVpRx9dwoPuzw==","length":12108,"stub":true},"grunt-contrib-handlebars-0.5.9.tgz":{"content_type":"application/octet-stream","revpos":63,"digest":"md5-s9WiPJK1+o2SLu4P2Nj5+A==","length":11230,"stub":true},"grunt-contrib-handlebars-0.5.8.tgz":{"content_type":"application/octet-stream","revpos":60,"digest":"md5-wlSsMw5LJcZy3RvN5rK/8A==","length":10364,"stub":true},"grunt-contrib-handlebars-0.5.7.tgz":{"content_type":"application/octet-stream","revpos":59,"digest":"md5-cEBxw35xjDlYRQvCZVvbjw==","length":10326,"stub":true},"grunt-contrib-handlebars-0.5.6.tgz":{"content_type":"application/octet-stream","revpos":57,"digest":"md5-PIqyqXTKic8HtqlW7YALLQ==","length":10266,"stub":true},"grunt-contrib-handlebars-0.5.5.tgz":{"content_type":"application/octet-stream","revpos":55,"digest":"md5-RagflJKDiRa19VWUwqMz6w==","length":9819,"stub":true},"grunt-contrib-handlebars-0.5.4.tgz":{"content_type":"application/octet-stream","revpos":53,"digest":"md5-FUl6D6sjTw12LRGVydYsrA==","length":8516,"stub":true},"grunt-contrib-handlebars-0.3.5.tgz":{"content_type":"application/octet-stream","revpos":47,"digest":"md5-UIaMfLldpCEzwOFKvC5Epw==","length":6769,"stub":true},"grunt-contrib-handlebars-0.5.4rc7.tgz":{"content_type":"application/octet-stream","revpos":45,"digest":"md5-tyv4fT/PqloWVfsUQoiEMg==","length":8354,"stub":true},"grunt-contrib-handlebars-0.5.3rc7.tgz":{"content_type":"application/octet-stream","revpos":43,"digest":"md5-tSWqM8zLupt6ZzzJAmitkg==","length":8020,"stub":true},"grunt-contrib-handlebars-0.3.4.tgz":{"content_type":"application/octet-stream","revpos":41,"digest":"md5-bwn2OtoPU2aZJFb1ohrfNQ==","length":6379,"stub":true},"grunt-contrib-handlebars-0.5.2rc7.tgz":{"content_type":"application/octet-stream","revpos":39,"digest":"md5-E73U/qvgAerZKrbCBXSE3g==","length":7555,"stub":true},"grunt-contrib-handlebars-0.5.1rc7.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-1ZXvplyV6cTvTJtVRNzhKw==","length":7063,"stub":true},"grunt-contrib-handlebars-0.5.0rc7.tgz":{"content_type":"application/octet-stream","revpos":30,"digest":"md5-51l7JzNAf80nwVZaxyIdcg==","length":6431,"stub":true},"grunt-contrib-handlebars-0.3.3.tgz":{"content_type":"application/octet-stream","revpos":24,"digest":"md5-VlJp3VT4tLOGn6wev2J+pg==","length":5946,"stub":true},"grunt-contrib-handlebars-0.3.2.tgz":{"content_type":"application/octet-stream","revpos":22,"digest":"md5-l6Wt5MqQYErvH1rFPSSwcA==","length":5896,"stub":true},"grunt-contrib-handlebars-0.3.1.tgz":{"content_type":"application/octet-stream","revpos":20,"digest":"md5-R3WtTMw67srPmiTBTtztyQ==","length":5638,"stub":true},"grunt-contrib-handlebars-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":18,"digest":"md5-BND6tA3LsAUS2o49dWoIsg==","length":5601,"stub":true},"grunt-contrib-handlebars-0.2.4.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-K0wHCABPtoe63BD1UzspyA==","length":5466,"stub":true},"grunt-contrib-handlebars-0.2.3.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-ojfaTb1KsmVbLSyTJl+aew==","length":5478,"stub":true},"grunt-contrib-handlebars-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-5oSqA8RZRlLVcLTbIXSQyA==","length":5072,"stub":true},"grunt-contrib-handlebars-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-2pDKiJcdEucr4hAxNuNOkA==","length":4825,"stub":true},"grunt-contrib-handlebars-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-cBv0fbgWBM0Ee/mJ1g9jtg==","length":4827,"stub":true}},"_etag":"\"3WGQDA1ALAK0M41H0CYU2Y34C\""}