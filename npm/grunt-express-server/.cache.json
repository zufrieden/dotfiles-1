{"_id":"grunt-express-server","_rev":"27-8abdc64ee1cf8259f1663b62d6cfd6e7","name":"grunt-express-server","description":"Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde","dist-tags":{"latest":"0.4.9"},"versions":{"0.1.0":{"name":"grunt-express-server","description":"Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde","version":"0.1.0","homepage":"https://github.com/ericclemmons/grunt-express-server","author":{"name":"Eric Clemmons","email":"eric@smarterspam.com"},"repository":{"type":"git","url":"git://github.com/ericclemmons/grunt-express-server.git"},"bugs":{"url":"https://github.com/ericclemmons/grunt-express-server/issues"},"licenses":[{"type":"MIT","url":"https://github.com/ericclemmons/grunt-express-server/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"devDependencies":{"grunt-contrib-jshint":"~0.1.1","grunt-contrib-clean":"~0.4.0","grunt-contrib-nodeunit":"~0.1.2","grunt":"~0.4.0"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin","express","server"],"readme":"# grunt-express-server\n\n> Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The \"server\" task\n\n### Setup\n\nIn your project's Gruntfile, simply add a `script` property to your existing `server` object.\n\n```js\ngrunt.initConfig({\n  server: {\n    script: 'path/to/server.js'\n  }\n})\n```\n\n### Usage\n\nAssuming you're using [grunt-contrib-livereload][https://github.com/gruntjs/grunt-contrib-livereload],\nI recommend using the followingin your project's Gruntfile:\n\n```js\ngrunt.initConfig({\n  watch: {\n    server: {\n      files:  '<%= dirs.server + files.all %>',\n      tasks:  [ 'jshint', 'express-server', 'livereload' ]\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express-server', 'livereload', 'watch' ])\n```\n\nThis will let you override `grunt server` with a LiveReload-able Express Server.\nFinally, you can make changes to your API and watch the JSON change in your browser!\n\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n### v0.1.0\n\n- Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n","readmeFilename":"README.md","_id":"grunt-express-server@0.1.0","dist":{"shasum":"f5b8efecc9ecde2bb27a56cb410504b385f8260f","tarball":"http://registry.npmjs.org/grunt-express-server/-/grunt-express-server-0.1.0.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"ericclemmons","email":"eric@smarterspam.com"},"maintainers":[{"name":"ericclemmons","email":"eric@smarterspam.com"}],"directories":{}},"0.2.0":{"name":"grunt-express-server","description":"Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde","version":"0.2.0","homepage":"https://github.com/ericclemmons/grunt-express-server","author":{"name":"Eric Clemmons","email":"eric@smarterspam.com"},"repository":{"type":"git","url":"git://github.com/ericclemmons/grunt-express-server.git"},"bugs":{"url":"https://github.com/ericclemmons/grunt-express-server/issues"},"licenses":[{"type":"MIT","url":"https://github.com/ericclemmons/grunt-express-server/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"devDependencies":{"grunt-contrib-jshint":"~0.1.1","grunt-contrib-clean":"~0.4.0","grunt-contrib-nodeunit":"~0.1.2","grunt":"~0.4.0"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin","express","server"],"readme":"# grunt-express-server\n\n> Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The \"server\" task\n\n### Setup\n\nIn your project's Gruntfile, simply add a `script` property to your existing `server` object.\n\n```js\ngrunt.initConfig({\n  express: 'path/to/server.js'\n})\n```\n\n### Usage\n\n#### With [grunt-contrib-livereload](https://github.com/gruntjs/grunt-contrib-livereload)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ 'path/to/files/to/watch/**.js' ],\n      tasks:  [ 'express', 'livereload' ]\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express', 'livereload', 'watch' ])\n```\n\nThis will let you override `grunt server` with a LiveReload-able Express Server.\nFinally, you can make changes to your API and watch the JSON change in your browser!\n\n#### With [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ '**/*.js' ],\n      tasks:  [ 'express' ],\n      options: {\n        nospawn: true //Without this option specified express won't be reloaded\n      }\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express', 'watch' ])\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n### v0.2.0\n\n- Change `express-server` task to `express`\n- Config is set via `express: '...'` instead of `server: { script: '...' } `\n\n### v0.1.0\n\n- Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n","readmeFilename":"README.md","_id":"grunt-express-server@0.2.0","dist":{"shasum":"0dfdff23bde0d9aa2045286347a2d83315279b39","tarball":"http://registry.npmjs.org/grunt-express-server/-/grunt-express-server-0.2.0.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"ericclemmons","email":"eric@smarterspam.com"},"maintainers":[{"name":"ericclemmons","email":"eric@smarterspam.com"}],"directories":{}},"0.3.1":{"name":"grunt-express-server","description":"Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde","version":"0.3.1","homepage":"https://github.com/ericclemmons/grunt-express-server","author":{"name":"Eric Clemmons","email":"eric@smarterspam.com"},"repository":{"type":"git","url":"git://github.com/ericclemmons/grunt-express-server.git"},"bugs":{"url":"https://github.com/ericclemmons/grunt-express-server/issues"},"licenses":[{"type":"MIT","url":"https://github.com/ericclemmons/grunt-express-server/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"./node_modules/.bin/grunt"},"devDependencies":{"express":"~3.2.4","grunt":"~0.4.0","grunt-cli":"~0.1.6","grunt-contrib-jshint":"~0.1.1","grunt-contrib-clean":"~0.4.0","grunt-contrib-nodeunit":"~0.1.2"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin","express","server"],"readme":"# grunt-express-server [![Build Status](https://travis-ci.org/ericclemmons/grunt-express-server.png?branch=master)](https://travis-ci.org/ericclemmons/grunt-express-server)\n\n> Simple grunt task for running an Express server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The `express` task\n\n### Setup\n\nIn your project's Gruntfile, you can create one or multiple servers:\n\n```js\ngrunt.initConfig({\n  express: {\n    options: {\n      // Override defaults here\n    },\n    dev: {\n      options: {\n        script: 'path/to/dev/server.js'\n      }\n    },\n    prod: {\n      options: {\n        script: 'path/to/prod/server.js'\n      }\n    }\n    test: {\n      options: {\n        script: 'path/to/test/server.js'\n      }\n    }\n  }\n});\n```\n\nYou can override the default `options` either in the root of the `express` config\nor within each individual server task.\n\n### Default `options`\n\n```js\n  express: {\n    options: {\n      // Will turn into: `node path/to/server.js ARG1 ARG2 ... ARGN`\n      args: [ ],\n\n      // Setting to `false` will effectively just run `node path/to/server.js`\n      background: true,\n\n      // Called if spawning the server fails\n      error: function(err, result, code) {},\n\n      // Called when the spawned server throws errors\n      fallback: function() {},\n\n      // Override node env's PORT\n      port: 3000\n    }\n  }\n```\n\n### Usage\n\n#### Starting the server\n\nIf you have a server defined named `dev`, you can start the server by running `expess:dev`.\n\n\n#### Stopping the server\n\nSimilarly, if you start the `dev` server with `express:dev`, you can stop the server\nwith `express:dev:stop`.\n\n#### With [grunt-contrib-livereload](https://github.com/gruntjs/grunt-contrib-livereload)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ 'path/to/files/to/watch/**.js' ],\n      tasks:  [ 'express:dev', 'livereload' ]\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express:dev', 'livereload', 'watch' ])\n```\n\nThis will let you override `grunt server` with a LiveReload-able Express Server.\nFinally, you can make changes to your API and watch the JSON change in your browser!\n\n#### With [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ '**/*.js' ],\n      tasks:  [ 'express:dev' ],\n      options: {\n        nospawn: true //Without this option specified express won't be reloaded\n      }\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express:dev', 'watch' ])\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n### v0.3.1\n\n- Try to force notification that `express` task has finished as much as possible\n\n### v0.3.0\n\n- `express` is now a multitask with customizable options, better error handling and `:stop` task\n\n### v0.2.0\n\n- Change `express-server` task to `express`\n- Config is set via `express: '...'` instead of `server: { script: '...' } `\n\n### v0.1.0\n\n- Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n","readmeFilename":"README.md","_id":"grunt-express-server@0.3.1","dist":{"shasum":"028c7bd1215ca599e363b5dfb9b810245da43c3e","tarball":"http://registry.npmjs.org/grunt-express-server/-/grunt-express-server-0.3.1.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"ericclemmons","email":"eric@smarterspam.com"},"maintainers":[{"name":"ericclemmons","email":"eric@smarterspam.com"}],"directories":{}},"0.4.0":{"name":"grunt-express-server","description":"Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde","version":"0.4.0","homepage":"https://github.com/ericclemmons/grunt-express-server","author":{"name":"Eric Clemmons","email":"eric@smarterspam.com"},"repository":{"type":"git","url":"git://github.com/ericclemmons/grunt-express-server.git"},"bugs":{"url":"https://github.com/ericclemmons/grunt-express-server/issues"},"licenses":[{"type":"MIT","url":"https://github.com/ericclemmons/grunt-express-server/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"./node_modules/.bin/grunt"},"devDependencies":{"express":"~3.2.4","grunt":"~0.4.0","grunt-cli":"~0.1.6","grunt-contrib-jshint":"~0.1.1","grunt-contrib-clean":"~0.4.0","grunt-contrib-nodeunit":"~0.1.2"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin","express","server"],"readme":"# grunt-express-server [![Build Status](https://travis-ci.org/ericclemmons/grunt-express-server.png?branch=master)](https://travis-ci.org/ericclemmons/grunt-express-server)\n\n> Simple grunt task for running an Express server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The `express` task\n\n### Setup\n\nIn your project's Gruntfile, you can create one or multiple servers:\n\n```js\ngrunt.initConfig({\n  express: {\n    options: {\n      // Override defaults here\n    },\n    dev: {\n      options: {\n        script: 'path/to/dev/server.js'\n      }\n    },\n    prod: {\n      options: {\n        script: 'path/to/prod/server.js'\n      }\n    }\n    test: {\n      options: {\n        script: 'path/to/test/server.js'\n      }\n    }\n  }\n});\n```\n\nYou can override the default `options` either in the root of the `express` config\nor within each individual server task.\n\n### Default `options`\n\n```js\n  express: {\n    options: {\n      // Will turn into: `node path/to/server.js ARG1 ARG2 ... ARGN`\n      args: [ ],\n\n      // Setting to `false` will effectively just run `node path/to/server.js`\n      background: true,\n\n      // Called if spawning the server fails\n      error: function(err, result, code) {},\n\n      // Called when the spawned server throws errors\n      fallback: function() {},\n\n      // Override node env's PORT\n      port: 3000,\n\n      // Consider the server to be \"running\" after an explicit delay (in milliseconds)\n      // (e.g. when server has no initial output)\n      delay: 0,\n\n      // Regular expression that matches server output to indicate it is \"running\"\n      output: \".+\"\n    }\n  }\n```\n\n### Usage\n\nBy default, unless `delay` or `output` has been customized,\n**the server is considered \"running\" once any output is logged to the console**,\nupon which control is passed back to grunt.\n\nTypically, this is normally:\n\n> Express server listening on port 3000\n\nIf you log output *before* the server is running, either set `delay` or `output` to indicate\nwhen the server has officially started.\n\n#### Starting the server\n\nIf you have a server defined named `dev`, you can start the server by running `expess:dev`.\n\n#### Stopping the server\n\nSimilarly, if you start the `dev` server with `express:dev`, you can stop the server\nwith `express:dev:stop`.\n\n#### With [grunt-contrib-livereload](https://github.com/gruntjs/grunt-contrib-livereload)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ 'path/to/files/to/watch/**.js' ],\n      tasks:  [ 'express:dev', 'livereload' ]\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express:dev', 'livereload', 'watch' ])\n```\n\nThis will let you override `grunt server` with a LiveReload-able Express Server.\nFinally, you can make changes to your API and watch the JSON change in your browser!\n\n#### With [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ '**/*.js' ],\n      tasks:  [ 'express:dev' ],\n      options: {\n        nospawn: true //Without this option specified express won't be reloaded\n      }\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express:dev', 'watch' ])\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n### v0.4.0\n\n- Add `delay` option that, when set, passes control back to grunt after timeout\n- Add `output` regular expression option that, when set, waits for matching message before passing control back to grunt\n\n### v0.3.1\n\n- Try to force notification that `express` task has finished as much as possible\n\n### v0.3.0\n\n- `express` is now a multitask with customizable options, better error handling and `:stop` task\n\n### v0.2.0\n\n- Change `express-server` task to `express`\n- Config is set via `express: '...'` instead of `server: { script: '...' } `\n\n### v0.1.0\n\n- Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n","readmeFilename":"README.md","_id":"grunt-express-server@0.4.0","dist":{"shasum":"07f1dfd23235503671413a258aca200966d431cc","tarball":"http://registry.npmjs.org/grunt-express-server/-/grunt-express-server-0.4.0.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"ericclemmons","email":"eric@smarterspam.com"},"maintainers":[{"name":"ericclemmons","email":"eric@smarterspam.com"}],"directories":{}},"0.4.1":{"name":"grunt-express-server","description":"Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde","version":"0.4.1","homepage":"https://github.com/ericclemmons/grunt-express-server","author":{"name":"Eric Clemmons","email":"eric@smarterspam.com"},"repository":{"type":"git","url":"git://github.com/ericclemmons/grunt-express-server.git"},"bugs":{"url":"https://github.com/ericclemmons/grunt-express-server/issues"},"licenses":[{"type":"MIT","url":"https://github.com/ericclemmons/grunt-express-server/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"./node_modules/.bin/grunt"},"devDependencies":{"express":"~3.2.4","grunt":"~0.4.0","grunt-cli":"~0.1.6","grunt-contrib-jshint":"~0.1.1","grunt-contrib-clean":"~0.4.0","grunt-contrib-nodeunit":"~0.1.2"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin","express","server"],"readme":"# grunt-express-server [![Build Status](https://travis-ci.org/ericclemmons/grunt-express-server.png?branch=master)](https://travis-ci.org/ericclemmons/grunt-express-server)\n\n> Simple grunt task for running an Express server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The `express` task\n\n### Setup\n\nIn your project's Gruntfile, you can create one or multiple servers:\n\n```js\ngrunt.initConfig({\n  express: {\n    options: {\n      // Override defaults here\n    },\n    dev: {\n      options: {\n        script: 'path/to/dev/server.js'\n      }\n    },\n    prod: {\n      options: {\n        script: 'path/to/prod/server.js',\n        node_env: 'production'\n      }\n    }\n    test: {\n      options: {\n        script: 'path/to/test/server.js'\n      }\n    }\n  }\n});\n```\n\nYou can override the default `options` either in the root of the `express` config\nor within each individual server task.\n\n### Default `options`\n\n```js\n  express: {\n    options: {\n      // Will turn into: `node path/to/server.js ARG1 ARG2 ... ARGN`\n      args: [ ],\n\n      // Setting to `false` will effectively just run `node path/to/server.js`\n      background: true,\n\n      // Called if spawning the server fails\n      error: function(err, result, code) {},\n\n      // Called when the spawned server throws errors\n      fallback: function() {},\n\n      // Override node env's PORT\n      port: 3000,\n\n      // Override node env's NODE_ENV\n      node_env: undefined,\n\n      // Consider the server to be \"running\" after an explicit delay (in milliseconds)\n      // (e.g. when server has no initial output)\n      delay: 0,\n\n      // Regular expression that matches server output to indicate it is \"running\"\n      output: \".+\"\n    }\n  }\n```\n\n### Usage\n\nBy default, unless `delay` or `output` has been customized,\n**the server is considered \"running\" once any output is logged to the console**,\nupon which control is passed back to grunt.\n\nTypically, this is normally:\n\n> Express server listening on port 3000\n\nIf you log output *before* the server is running, either set `delay` or `output` to indicate\nwhen the server has officially started.\n\n#### Starting the server\n\nIf you have a server defined named `dev`, you can start the server by running `express:dev`.\n\n#### Stopping the server\n\nSimilarly, if you start the `dev` server with `express:dev`, you can stop the server\nwith `express:dev:stop`.\n\n#### With [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ '**/*.js' ],\n      tasks:  [ 'express:dev' ],\n      options: {\n        nospawn: true //Without this option specified express won't be reloaded\n      }\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express:dev', 'watch' ])\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n### v0.4.1\n\n- Add `node_env` option that sets `NODE_ENV` when running the server & restores original env upon closing, thanks to @jgable!\n\n### v0.4.0\n\n- Add `delay` option that, when set, passes control back to grunt after timeout\n- Add `output` regular expression option that, when set, waits for matching message before passing control back to grunt\n\n### v0.3.1\n\n- Try to force notification that `express` task has finished as much as possible\n\n### v0.3.0\n\n- `express` is now a multitask with customizable options, better error handling and `:stop` task\n\n### v0.2.0\n\n- Change `express-server` task to `express`\n- Config is set via `express: '...'` instead of `server: { script: '...' } `\n\n### v0.1.0\n\n- Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n","readmeFilename":"README.md","_id":"grunt-express-server@0.4.1","dist":{"shasum":"91fbec8b997addaea5f95fb65be0c3a4c3c3e916","tarball":"http://registry.npmjs.org/grunt-express-server/-/grunt-express-server-0.4.1.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"ericclemmons","email":"eric@smarterspam.com"},"maintainers":[{"name":"ericclemmons","email":"eric@smarterspam.com"}],"directories":{}},"0.4.2":{"name":"grunt-express-server","description":"Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde","version":"0.4.2","homepage":"https://github.com/ericclemmons/grunt-express-server","author":{"name":"Eric Clemmons","email":"eric@smarterspam.com"},"repository":{"type":"git","url":"git://github.com/ericclemmons/grunt-express-server.git"},"bugs":{"url":"https://github.com/ericclemmons/grunt-express-server/issues"},"licenses":[{"type":"MIT","url":"https://github.com/ericclemmons/grunt-express-server/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"./node_modules/.bin/grunt"},"devDependencies":{"express":"~3.2.4","grunt":"~0.4.0","grunt-cli":"~0.1.6","grunt-contrib-jshint":"~0.1.1","grunt-contrib-clean":"~0.4.0","grunt-contrib-nodeunit":"~0.1.2"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin","express","server"],"readme":"# grunt-express-server [![Build Status](https://travis-ci.org/ericclemmons/grunt-express-server.png?branch=master)](https://travis-ci.org/ericclemmons/grunt-express-server)\n\n> Simple grunt task for running an Express server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The `express` task\n\n### Setup\n\nIn your project's Gruntfile, you can create one or multiple servers:\n\n```js\ngrunt.initConfig({\n  express: {\n    options: {\n      // Override defaults here\n    },\n    dev: {\n      options: {\n        script: 'path/to/dev/server.js'\n      }\n    },\n    prod: {\n      options: {\n        script: 'path/to/prod/server.js',\n        node_env: 'production'\n      }\n    }\n    test: {\n      options: {\n        script: 'path/to/test/server.js'\n      }\n    }\n  }\n});\n```\n\nYou can override the default `options` either in the root of the `express` config\nor within each individual server task.\n\n### Default `options`\n\n```js\n  express: {\n    options: {\n      // Will turn into: `node path/to/server.js ARG1 ARG2 ... ARGN`\n      args: [ ],\n\n      // Setting to `false` will effectively just run `node path/to/server.js`\n      background: true,\n\n      // Called if spawning the server fails\n      error: function(err, result, code) {},\n\n      // Called when the spawned server throws errors\n      fallback: function() {},\n\n      // Override node env's PORT\n      port: 3000,\n\n      // Override node env's NODE_ENV\n      node_env: undefined,\n\n      // Consider the server to be \"running\" after an explicit delay (in milliseconds)\n      // (e.g. when server has no initial output)\n      delay: 0,\n\n      // Regular expression that matches server output to indicate it is \"running\"\n      output: \".+\",\n\n      // Set --debug\n      debug: false\n    }\n  }\n```\n\n### Usage\n\nBy default, unless `delay` or `output` has been customized,\n**the server is considered \"running\" once any output is logged to the console**,\nupon which control is passed back to grunt.\n\nTypically, this is normally:\n\n> Express server listening on port 3000\n\nIf you log output *before* the server is running, either set `delay` or `output` to indicate\nwhen the server has officially started.\n\n#### Starting the server\n\nIf you have a server defined named `dev`, you can start the server by running `express:dev`.\n\n#### Stopping the server\n\nSimilarly, if you start the `dev` server with `express:dev`, you can stop the server\nwith `express:dev:stop`.\n\n#### With [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ '**/*.js' ],\n      tasks:  [ 'express:dev' ],\n      options: {\n        nospawn: true //Without this option specified express won't be reloaded\n      }\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express:dev', 'watch' ])\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n### v0.4.2\n\n- Add `debug` option that gets enables Node's debugger, ideally for use with [node-inspector](https://github.com/node-inspector/node-inspector)\n\n### v0.4.1\n\n- Add `node_env` option that sets `NODE_ENV` when running the server & restores original env upon closing, thanks to @jgable!\n\n### v0.4.0\n\n- Add `delay` option that, when set, passes control back to grunt after timeout\n- Add `output` regular expression option that, when set, waits for matching message before passing control back to grunt\n\n### v0.3.1\n\n- Try to force notification that `express` task has finished as much as possible\n\n### v0.3.0\n\n- `express` is now a multitask with customizable options, better error handling and `:stop` task\n\n### v0.2.0\n\n- Change `express-server` task to `express`\n- Config is set via `express: '...'` instead of `server: { script: '...' } `\n\n### v0.1.0\n\n- Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n","readmeFilename":"README.md","_id":"grunt-express-server@0.4.2","dist":{"shasum":"9ab04c52d253590eafecc9dc76848e4d8eacef57","tarball":"http://registry.npmjs.org/grunt-express-server/-/grunt-express-server-0.4.2.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"ericclemmons","email":"eric@smarterspam.com"},"maintainers":[{"name":"ericclemmons","email":"eric@smarterspam.com"}],"directories":{}},"0.4.3":{"name":"grunt-express-server","description":"Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde","version":"0.4.3","homepage":"https://github.com/ericclemmons/grunt-express-server","author":{"name":"Eric Clemmons","email":"eric@smarterspam.com"},"repository":{"type":"git","url":"git://github.com/ericclemmons/grunt-express-server.git"},"bugs":{"url":"https://github.com/ericclemmons/grunt-express-server/issues"},"licenses":[{"type":"MIT","url":"https://github.com/ericclemmons/grunt-express-server/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"./node_modules/.bin/grunt"},"devDependencies":{"coffee-script":"1.6.3","express":"~3.2.4","grunt":"~0.4.0","grunt-cli":"~0.1.6","grunt-contrib-jshint":"~0.1.1","grunt-contrib-clean":"~0.4.0","grunt-contrib-nodeunit":"~0.1.2"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin","express","server"],"readme":"# grunt-express-server [![Build Status](https://travis-ci.org/ericclemmons/grunt-express-server.png?branch=master)](https://travis-ci.org/ericclemmons/grunt-express-server)\n\n> Simple grunt task for running an Express server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The `express` task\n\n### Setup\n\nIn your project's Gruntfile, you can create one or multiple servers:\n\n```js\ngrunt.initConfig({\n  express: {\n    options: {\n      // Override defaults here\n    },\n    dev: {\n      options: {\n        script: 'path/to/dev/server.js'\n      }\n    },\n    prod: {\n      options: {\n        script: 'path/to/prod/server.js',\n        node_env: 'production'\n      }\n    }\n    test: {\n      options: {\n        script: 'path/to/test/server.js'\n      }\n    }\n  }\n});\n```\n\nYou can override the default `options` either in the root of the `express` config\nor within each individual server task.\n\n### Default `options`\n\n```js\n  express: {\n    options: {\n      // Override the command used to start the server.\n      // (e.g. 'coffee' instead of the default 'node' to enable CoffeeScript support)\n      cmd: process.argv[0],\n\n      // Will turn into: `node path/to/server.js ARG1 ARG2 ... ARGN`\n      args: [ ],\n\n      // Setting to `false` will effectively just run `node path/to/server.js`\n      background: true,\n\n      // Called if spawning the server fails\n      error: function(err, result, code) {},\n\n      // Called when the spawned server throws errors\n      fallback: function() {},\n\n      // Override node env's PORT\n      port: 3000,\n\n      // Override node env's NODE_ENV\n      node_env: undefined,\n\n      // Consider the server to be \"running\" after an explicit delay (in milliseconds)\n      // (e.g. when server has no initial output)\n      delay: 0,\n\n      // Regular expression that matches server output to indicate it is \"running\"\n      output: \".+\",\n\n      // Set --debug\n      debug: false\n    }\n  }\n```\n\n### Usage\n\nBy default, unless `delay` or `output` has been customized,\n**the server is considered \"running\" once any output is logged to the console**,\nupon which control is passed back to grunt.\n\nTypically, this is normally:\n\n> Express server listening on port 3000\n\nIf you log output *before* the server is running, either set `delay` or `output` to indicate\nwhen the server has officially started.\n\n#### Starting the server\n\nIf you have a server defined named `dev`, you can start the server by running `express:dev`.\n\n#### Stopping the server\n\nSimilarly, if you start the `dev` server with `express:dev`, you can stop the server\nwith `express:dev:stop`.\n\n#### With [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ '**/*.js' ],\n      tasks:  [ 'express:dev' ],\n      options: {\n        nospawn: true //Without this option specified express won't be reloaded\n      }\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express:dev', 'watch' ])\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n### v0.4.3\n\n- Add `cmd` option that defaults to Node, but can be set to `coffee` for Coffeescript support, thanks to @JonET ([#15](https://github.com/ericclemmons/grunt-express-server/pull/15))\n\n### v0.4.2\n\n- Add `debug` option that gets enables Node's debugger, ideally for use with [node-inspector](https://github.com/node-inspector/node-inspector)\n\n### v0.4.1\n\n- Add `node_env` option that sets `NODE_ENV` when running the server & restores original env upon closing, thanks to @jgable!\n\n### v0.4.0\n\n- Add `delay` option that, when set, passes control back to grunt after timeout\n- Add `output` regular expression option that, when set, waits for matching message before passing control back to grunt\n\n### v0.3.1\n\n- Try to force notification that `express` task has finished as much as possible\n\n### v0.3.0\n\n- `express` is now a multitask with customizable options, better error handling and `:stop` task\n\n### v0.2.0\n\n- Change `express-server` task to `express`\n- Config is set via `express: '...'` instead of `server: { script: '...' } `\n\n### v0.1.0\n\n- Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n","readmeFilename":"README.md","_id":"grunt-express-server@0.4.3","dist":{"shasum":"024f5003da5c092457187fed352b9981acbe2604","tarball":"http://registry.npmjs.org/grunt-express-server/-/grunt-express-server-0.4.3.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"ericclemmons","email":"eric@smarterspam.com"},"maintainers":[{"name":"ericclemmons","email":"eric@smarterspam.com"}],"directories":{}},"0.4.4":{"name":"grunt-express-server","description":"Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde","version":"0.4.4","homepage":"https://github.com/ericclemmons/grunt-express-server","author":{"name":"Eric Clemmons","email":"eric@smarterspam.com"},"repository":{"type":"git","url":"git://github.com/ericclemmons/grunt-express-server.git"},"bugs":{"url":"https://github.com/ericclemmons/grunt-express-server/issues"},"licenses":[{"type":"MIT","url":"https://github.com/ericclemmons/grunt-express-server/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"./node_modules/.bin/grunt"},"devDependencies":{"coffee-script":"1.6.3","express":"~3.2.4","grunt":"~0.4.0","grunt-cli":"~0.1.6","grunt-contrib-jshint":"~0.1.1","grunt-contrib-clean":"~0.4.0","grunt-contrib-nodeunit":"~0.1.2"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin","express","server"],"readme":"# grunt-express-server [![Build Status](https://travis-ci.org/ericclemmons/grunt-express-server.png?branch=master)](https://travis-ci.org/ericclemmons/grunt-express-server)\n\n> Simple grunt task for running an Express server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The `express` task\n\n### Setup\n\nIn your project's Gruntfile, you can create one or multiple servers:\n\n```js\ngrunt.initConfig({\n  express: {\n    options: {\n      // Override defaults here\n    },\n    dev: {\n      options: {\n        script: 'path/to/dev/server.js'\n      }\n    },\n    prod: {\n      options: {\n        script: 'path/to/prod/server.js',\n        node_env: 'production'\n      }\n    },\n    test: {\n      options: {\n        script: 'path/to/test/server.js'\n      }\n    }\n  }\n});\n```\n\nYou can override the default `options` either in the root of the `express` config\nor within each individual server task.\n\n### Default `options`\n\n```js\n  express: {\n    options: {\n      // Override the command used to start the server.\n      // (e.g. 'coffee' instead of the default 'node' to enable CoffeeScript support)\n      cmd: process.argv[0],\n\n      // Will turn into: `node path/to/server.js ARG1 ARG2 ... ARGN`\n      args: [ ],\n\n      // Setting to `false` will effectively just run `node path/to/server.js`\n      background: true,\n\n      // Called if spawning the server fails\n      error: function(err, result, code) {},\n\n      // Called when the spawned server throws errors\n      fallback: function() {},\n\n      // Override node env's PORT\n      port: 3000,\n\n      // Override node env's NODE_ENV\n      node_env: undefined,\n\n      // Consider the server to be \"running\" after an explicit delay (in milliseconds)\n      // (e.g. when server has no initial output)\n      delay: 0,\n\n      // Regular expression that matches server output to indicate it is \"running\"\n      output: \".+\",\n\n      // Set --debug\n      debug: false\n    }\n  }\n```\n\n### Usage\n\nBy default, unless `delay` or `output` has been customized,\n**the server is considered \"running\" once any output is logged to the console**,\nupon which control is passed back to grunt.\n\nTypically, this is normally:\n\n> Express server listening on port 3000\n\nIf you log output *before* the server is running, either set `delay` or `output` to indicate\nwhen the server has officially started.\n\n#### Starting the server\n\nIf you have a server defined named `dev`, you can start the server by running `express:dev`.\n\n#### Stopping the server\n\nSimilarly, if you start the `dev` server with `express:dev`, you can stop the server\nwith `express:dev:stop`.\n\n#### With [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ '**/*.js' ],\n      tasks:  [ 'express:dev' ],\n      options: {\n        nospawn: true //Without this option specified express won't be reloaded\n      }\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express:dev', 'watch' ])\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n- v0.4.4 - Fix for using `grunt-env` to change environments, thanks to @FredrikAppelros ([#20](https://github.com/ericclemmons/grunt-express-server/pull/20))\n- v0.4.3 - Add `cmd` option that defaults to Node, but can be set to `coffee` for Coffeescript support, thanks to @JonET ([#15](https://github.com/ericclemmons/grunt-express-server/pull/15))\n- v0.4.2 - Add `debug` option that gets enables Node's debugger, ideally for use with [node-inspector](https://github.com/node-inspector/node-inspector)\n- v0.4.1 - Add `node_env` option that sets `NODE_ENV` when running the server & restores original env upon closing, thanks to @jgable!\n- v0.4.0\n  - Add `delay` option that, when set, passes control back to grunt after timeout\n  - Add `output` regular expression option that, when set, waits for matching message before passing control back to grunt\n- v0.3.1 - Try to force notification that `express` task has finished as much as possible\n- v0.3.0 - `express` is now a multitask with customizable options, better error handling and `:stop` task\n- v0.2.0\n  - Change `express-server` task to `express`\n  - Config is set via `express: '...'` instead of `server: { script: '...' } `\n- v0.1.0 - Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n","readmeFilename":"README.md","_id":"grunt-express-server@0.4.4","dist":{"shasum":"8c65fdf86af709160419da1949d665994153b540","tarball":"http://registry.npmjs.org/grunt-express-server/-/grunt-express-server-0.4.4.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"ericclemmons","email":"eric@smarterspam.com"},"maintainers":[{"name":"ericclemmons","email":"eric@smarterspam.com"}],"directories":{}},"0.4.5":{"name":"grunt-express-server","description":"Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde","version":"0.4.5","homepage":"https://github.com/ericclemmons/grunt-express-server","author":{"name":"Eric Clemmons","email":"eric@smarterspam.com"},"repository":{"type":"git","url":"git://github.com/ericclemmons/grunt-express-server.git"},"bugs":{"url":"https://github.com/ericclemmons/grunt-express-server/issues"},"licenses":[{"type":"MIT","url":"https://github.com/ericclemmons/grunt-express-server/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"./node_modules/.bin/grunt"},"devDependencies":{"coffee-script":"1.6.3","express":"~3.2.4","grunt":"~0.4.0","grunt-cli":"~0.1.6","grunt-contrib-jshint":"~0.1.1","grunt-contrib-clean":"~0.4.0","grunt-contrib-nodeunit":"~0.1.2"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin","express","server"],"readme":"# grunt-express-server [![Build Status](https://travis-ci.org/ericclemmons/grunt-express-server.png?branch=master)](https://travis-ci.org/ericclemmons/grunt-express-server)\n\n> Simple grunt task for running an Express server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The `express` task\n\n### Setup\n\nIn your project's Gruntfile, you can create one or multiple servers:\n\n```js\ngrunt.initConfig({\n  express: {\n    options: {\n      // Override defaults here\n    },\n    dev: {\n      options: {\n        script: 'path/to/dev/server.js'\n      }\n    },\n    prod: {\n      options: {\n        script: 'path/to/prod/server.js',\n        node_env: 'production'\n      }\n    },\n    test: {\n      options: {\n        script: 'path/to/test/server.js'\n      }\n    }\n  }\n});\n```\n\nYou can override the default `options` either in the root of the `express` config\nor within each individual server task.\n\n### Default `options`\n\n```js\n  express: {\n    options: {\n      // Override the command used to start the server.\n      // (e.g. 'coffee' instead of the default 'node' to enable CoffeeScript support)\n      cmd: process.argv[0],\n\n      // Will turn into: `node path/to/server.js ARG1 ARG2 ... ARGN`\n      args: [ ],\n\n      // Setting to `false` will effectively just run `node path/to/server.js`\n      background: true,\n\n      // Called if spawning the server fails\n      error: function(err, result, code) {},\n\n      // Called when the spawned server throws errors\n      fallback: function() {},\n\n      // Override node env's PORT\n      port: 3000,\n\n      // Override node env's NODE_ENV\n      node_env: undefined,\n\n      // Consider the server to be \"running\" after an explicit delay (in milliseconds)\n      // (e.g. when server has no initial output)\n      delay: 0,\n\n      // Regular expression that matches server output to indicate it is \"running\"\n      output: \".+\",\n\n      // Set --debug\n      debug: false\n    }\n  }\n```\n\n### Usage\n\nBy default, unless `delay` or `output` has been customized,\n**the server is considered \"running\" once any output is logged to the console**,\nupon which control is passed back to grunt.\n\nTypically, this is normally:\n\n> Express server listening on port 3000\n\nIf you log output *before* the server is running, either set `delay` or `output` to indicate\nwhen the server has officially started.\n\n#### Starting the server\n\nIf you have a server defined named `dev`, you can start the server by running `express:dev`.\n\n#### Stopping the server\n\nSimilarly, if you start the `dev` server with `express:dev`, you can stop the server\nwith `express:dev:stop`.\n\n#### With [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ '**/*.js' ],\n      tasks:  [ 'express:dev' ],\n      options: {\n        nospawn: true //Without this option specified express won't be reloaded\n      }\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express:dev', 'watch' ])\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n- v0.4.5 – Support multiple servers running at once ([#23](https://github.com/ericclemmons/grunt-express-server/pull/23))\n- v0.4.4 - Fix for using `grunt-env` to change environments, thanks to @FredrikAppelros ([#20](https://github.com/ericclemmons/grunt-express-server/pull/20))\n- v0.4.3 - Add `cmd` option that defaults to Node, but can be set to `coffee` for Coffeescript support, thanks to @JonET ([#15](https://github.com/ericclemmons/grunt-express-server/pull/15))\n- v0.4.2 - Add `debug` option that gets enables Node's debugger, ideally for use with [node-inspector](https://github.com/node-inspector/node-inspector)\n- v0.4.1 - Add `node_env` option that sets `NODE_ENV` when running the server & restores original env upon closing, thanks to @jgable!\n- v0.4.0\n  - Add `delay` option that, when set, passes control back to grunt after timeout\n  - Add `output` regular expression option that, when set, waits for matching message before passing control back to grunt\n- v0.3.1 - Try to force notification that `express` task has finished as much as possible\n- v0.3.0 - `express` is now a multitask with customizable options, better error handling and `:stop` task\n- v0.2.0\n  - Change `express-server` task to `express`\n  - Config is set via `express: '...'` instead of `server: { script: '...' } `\n- v0.1.0 - Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n","readmeFilename":"README.md","_id":"grunt-express-server@0.4.5","dist":{"shasum":"3979b986b0897e59c9675da1b97be392e9951a55","tarball":"http://registry.npmjs.org/grunt-express-server/-/grunt-express-server-0.4.5.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"ericclemmons","email":"eric@smarterspam.com"},"maintainers":[{"name":"ericclemmons","email":"eric@smarterspam.com"}],"directories":{}},"0.4.6":{"name":"grunt-express-server","description":"Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde","version":"0.4.6","homepage":"https://github.com/ericclemmons/grunt-express-server","author":{"name":"Eric Clemmons","email":"eric@smarterspam.com"},"repository":{"type":"git","url":"git://github.com/ericclemmons/grunt-express-server.git"},"bugs":{"url":"https://github.com/ericclemmons/grunt-express-server/issues"},"licenses":[{"type":"MIT","url":"https://github.com/ericclemmons/grunt-express-server/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"./node_modules/.bin/grunt"},"devDependencies":{"coffee-script":"1.6.3","express":"~3.4.5","grunt":"~0.4.0","grunt-cli":"~0.1.6","grunt-contrib-clean":"~0.5.0","grunt-contrib-jshint":"~0.7.2","grunt-contrib-nodeunit":"~0.2.2","grunt-contrib-watch":"~0.5.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin","express","server"],"readme":"# grunt-express-server\n\n[![Build Status](https://travis-ci.org/ericclemmons/grunt-express-server.png?branch=master)](https://travis-ci.org/ericclemmons/grunt-express-server)\n[![Dependencies](https://david-dm.org/ericclemmons/grunt-express-server.png)](https://david-dm.org/ericclemmons/grunt-express-server)\n[![devDependencies](https://david-dm.org/ericclemmons/grunt-express-server/dev-status.png)](https://david-dm.org/ericclemmons/grunt-express-server#info=devDependencies&view=table)\n\n> Simple grunt task for running an Express server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The `express` task\n\n### Setup\n\nIn your project's Gruntfile, you can create one or multiple servers:\n\n```js\ngrunt.initConfig({\n  express: {\n    options: {\n      // Override defaults here\n    },\n    dev: {\n      options: {\n        script: 'path/to/dev/server.js'\n      }\n    },\n    prod: {\n      options: {\n        script: 'path/to/prod/server.js',\n        node_env: 'production'\n      }\n    },\n    test: {\n      options: {\n        script: 'path/to/test/server.js'\n      }\n    }\n  }\n});\n```\n\nYou can override the default `options` either in the root of the `express` config\nor within each individual server task.\n\n### Default `options`\n\n```js\n  express: {\n    options: {\n      // Override the command used to start the server.\n      // (e.g. 'coffee' instead of the default 'node' to enable CoffeeScript support)\n      cmd: process.argv[0],\n\n      // Will turn into: `node path/to/server.js ARG1 ARG2 ... ARGN`\n      args: [ ],\n\n      // Setting to `false` will effectively just run `node path/to/server.js`\n      background: true,\n\n      // Called if spawning the server fails\n      error: function(err, result, code) {},\n\n      // Called when the spawned server throws errors\n      fallback: function() {},\n\n      // Override node env's PORT\n      port: 3000,\n\n      // Override node env's NODE_ENV\n      node_env: undefined,\n\n      // Consider the server to be \"running\" after an explicit delay (in milliseconds)\n      // (e.g. when server has no initial output)\n      delay: 0,\n\n      // Regular expression that matches server output to indicate it is \"running\"\n      output: \".+\",\n\n      // Set --debug\n      debug: false\n    }\n  }\n```\n\n### Usage\n\nBy default, unless `delay` or `output` has been customized,\n**the server is considered \"running\" once any output is logged to the console**,\nupon which control is passed back to grunt.\n\nTypically, this is normally:\n\n> Express server listening on port 3000\n\nIf you log output *before* the server is running, either set `delay` or `output` to indicate\nwhen the server has officially started.\n\n#### Starting the server\n\nIf you have a server defined named `dev`, you can start the server by running `express:dev`.\n\n#### Stopping the server\n\nSimilarly, if you start the `dev` server with `express:dev`, you can stop the server\nwith `express:dev:stop`.\n\n#### With [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ '**/*.js' ],\n      tasks:  [ 'express:dev' ],\n      options: {\n        spawn: false // Without this option specified express won't be reloaded\n      }\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express:dev', 'watch' ])\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n- v0.4.6 – Store running servers on `process._servers[target]` ([#22](https://github.com/ericclemmons/grunt-express-server/issues/22))\n- v0.4.5 – Support multiple servers running at once ([#23](https://github.com/ericclemmons/grunt-express-server/pull/23))\n- v0.4.4 - Fix for using `grunt-env` to change environments, thanks to @FredrikAppelros ([#20](https://github.com/ericclemmons/grunt-express-server/pull/20))\n- v0.4.3 - Add `cmd` option that defaults to Node, but can be set to `coffee` for Coffeescript support, thanks to @JonET ([#15](https://github.com/ericclemmons/grunt-express-server/pull/15))\n- v0.4.2 - Add `debug` option that gets enables Node's debugger, ideally for use with [node-inspector](https://github.com/node-inspector/node-inspector)\n- v0.4.1 - Add `node_env` option that sets `NODE_ENV` when running the server & restores original env upon closing, thanks to @jgable!\n- v0.4.0\n  - Add `delay` option that, when set, passes control back to grunt after timeout\n  - Add `output` regular expression option that, when set, waits for matching message before passing control back to grunt\n- v0.3.1 - Try to force notification that `express` task has finished as much as possible\n- v0.3.0 - `express` is now a multitask with customizable options, better error handling and `:stop` task\n- v0.2.0\n  - Change `express-server` task to `express`\n  - Config is set via `express: '...'` instead of `server: { script: '...' } `\n- v0.1.0 - Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/ericclemmons/grunt-express-server/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n","readmeFilename":"README.md","_id":"grunt-express-server@0.4.6","dist":{"shasum":"836a9814c865ffbda081d27e93ddebb042961850","tarball":"http://registry.npmjs.org/grunt-express-server/-/grunt-express-server-0.4.6.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"ericclemmons","email":"eric@smarterspam.com"},"maintainers":[{"name":"ericclemmons","email":"eric@smarterspam.com"}],"directories":{}},"0.4.7":{"name":"grunt-express-server","description":"Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde","version":"0.4.7","homepage":"https://github.com/ericclemmons/grunt-express-server","author":{"name":"Eric Clemmons","email":"eric@smarterspam.com"},"repository":{"type":"git","url":"git://github.com/ericclemmons/grunt-express-server.git"},"bugs":{"url":"https://github.com/ericclemmons/grunt-express-server/issues"},"licenses":[{"type":"MIT","url":"https://github.com/ericclemmons/grunt-express-server/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"./node_modules/.bin/grunt"},"devDependencies":{"coffee-script":"1.6.3","express":"~3.4.5","grunt":"~0.4.0","grunt-cli":"~0.1.6","grunt-contrib-clean":"~0.5.0","grunt-contrib-jshint":"~0.7.2","grunt-contrib-nodeunit":"~0.2.2","grunt-contrib-watch":"~0.5.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin","express","server"],"readme":"# grunt-express-server\n\n[![Build Status](https://travis-ci.org/ericclemmons/grunt-express-server.png?branch=master)](https://travis-ci.org/ericclemmons/grunt-express-server)\n[![Dependencies](https://david-dm.org/ericclemmons/grunt-express-server.png)](https://david-dm.org/ericclemmons/grunt-express-server)\n[![devDependencies](https://david-dm.org/ericclemmons/grunt-express-server/dev-status.png)](https://david-dm.org/ericclemmons/grunt-express-server#info=devDependencies&view=table)\n\n> Simple grunt task for running an Express server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The `express` task\n\n### Setup\n\nIn your project's Gruntfile, you can create one or multiple servers:\n\n```js\ngrunt.initConfig({\n  express: {\n    options: {\n      // Override defaults here\n    },\n    dev: {\n      options: {\n        script: 'path/to/dev/server.js'\n      }\n    },\n    prod: {\n      options: {\n        script: 'path/to/prod/server.js',\n        node_env: 'production'\n      }\n    },\n    test: {\n      options: {\n        script: 'path/to/test/server.js'\n      }\n    }\n  }\n});\n```\n\nYou can override the default `options` either in the root of the `express` config\nor within each individual server task.\n\n### Default `options`\n\n```js\n  express: {\n    options: {\n      // Override the command used to start the server.\n      // (e.g. 'coffee' instead of the default 'node' to enable CoffeeScript support)\n      cmd: process.argv[0],\n\n      // Will turn into: `node path/to/server.js ARG1 ARG2 ... ARGN`\n      args: [ ],\n\n      // Setting to `false` will effectively just run `node path/to/server.js`\n      background: true,\n\n      // Called when the spawned server throws errors\n      fallback: function() {},\n\n      // Override node env's PORT\n      port: 3000,\n\n      // Override node env's NODE_ENV\n      node_env: undefined,\n\n      // Consider the server to be \"running\" after an explicit delay (in milliseconds)\n      // (e.g. when server has no initial output)\n      delay: 0,\n\n      // Regular expression that matches server output to indicate it is \"running\"\n      output: \".+\",\n\n      // Set --debug\n      debug: false\n    }\n  }\n```\n\n### Usage\n\nBy default, unless `delay` or `output` has been customized,\n**the server is considered \"running\" once any output is logged to the console**,\nupon which control is passed back to grunt.\n\nTypically, this is normally:\n\n> Express server listening on port 3000\n\nIf you log output *before* the server is running, either set `delay` or `output` to indicate\nwhen the server has officially started.\n\n#### Starting the server\n\nIf you have a server defined named `dev`, you can start the server by running `express:dev`.\n\n#### Stopping the server\n\nSimilarly, if you start the `dev` server with `express:dev`, you can stop the server\nwith `express:dev:stop`.\n\n#### With [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ '**/*.js' ],\n      tasks:  [ 'express:dev' ],\n      options: {\n        spawn: false // Without this option specified express won't be reloaded\n      }\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express:dev', 'watch' ])\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n- v0.4.7 – Remove broken `error` option ([#27](https://github.com/ericclemmons/grunt-express-server/issues/27))\n- v0.4.6 – Store running servers on `process._servers[target]` ([#22](https://github.com/ericclemmons/grunt-express-server/issues/22))\n- v0.4.5 – Support multiple servers running at once ([#23](https://github.com/ericclemmons/grunt-express-server/pull/23))\n- v0.4.4 - Fix for using `grunt-env` to change environments, thanks to @FredrikAppelros ([#20](https://github.com/ericclemmons/grunt-express-server/pull/20))\n- v0.4.3 - Add `cmd` option that defaults to Node, but can be set to `coffee` for Coffeescript support, thanks to @JonET ([#15](https://github.com/ericclemmons/grunt-express-server/pull/15))\n- v0.4.2 - Add `debug` option that gets enables Node's debugger, ideally for use with [node-inspector](https://github.com/node-inspector/node-inspector)\n- v0.4.1 - Add `node_env` option that sets `NODE_ENV` when running the server & restores original env upon closing, thanks to @jgable!\n- v0.4.0\n  - Add `delay` option that, when set, passes control back to grunt after timeout\n  - Add `output` regular expression option that, when set, waits for matching message before passing control back to grunt\n- v0.3.1 - Try to force notification that `express` task has finished as much as possible\n- v0.3.0 - `express` is now a multitask with customizable options, better error handling and `:stop` task\n- v0.2.0\n  - Change `express-server` task to `express`\n  - Config is set via `express: '...'` instead of `server: { script: '...' } `\n- v0.1.0 - Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/ericclemmons/grunt-express-server/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n","readmeFilename":"README.md","_id":"grunt-express-server@0.4.7","dist":{"shasum":"56d1a7ade74ed8eae277e986238e664d88738384","tarball":"http://registry.npmjs.org/grunt-express-server/-/grunt-express-server-0.4.7.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"ericclemmons","email":"eric@smarterspam.com"},"maintainers":[{"name":"ericclemmons","email":"eric@smarterspam.com"}],"directories":{}},"0.4.8":{"name":"grunt-express-server","description":"Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde","version":"0.4.8","homepage":"https://github.com/ericclemmons/grunt-express-server","author":{"name":"Eric Clemmons","email":"eric@smarterspam.com"},"repository":{"type":"git","url":"git://github.com/ericclemmons/grunt-express-server.git"},"bugs":{"url":"https://github.com/ericclemmons/grunt-express-server/issues"},"licenses":[{"type":"MIT","url":"https://github.com/ericclemmons/grunt-express-server/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"./node_modules/.bin/grunt"},"devDependencies":{"coffee-script":"1.6.3","express":"~3.4.5","grunt":"~0.4.0","grunt-cli":"~0.1.6","grunt-contrib-clean":"~0.5.0","grunt-contrib-jshint":"~0.7.2","grunt-contrib-nodeunit":"~0.2.2","grunt-contrib-watch":"~0.5.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin","express","server"],"readme":"# grunt-express-server\n\n[![Build Status](https://travis-ci.org/ericclemmons/grunt-express-server.png?branch=master)](https://travis-ci.org/ericclemmons/grunt-express-server)\n[![Dependencies](https://david-dm.org/ericclemmons/grunt-express-server.png)](https://david-dm.org/ericclemmons/grunt-express-server)\n[![devDependencies](https://david-dm.org/ericclemmons/grunt-express-server/dev-status.png)](https://david-dm.org/ericclemmons/grunt-express-server#info=devDependencies&view=table)\n\n> Simple grunt task for running an Express server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The `express` task\n\n### Setup\n\nIn your project's Gruntfile, you can create one or multiple servers:\n\n```js\ngrunt.initConfig({\n  express: {\n    options: {\n      // Override defaults here\n    },\n    dev: {\n      options: {\n        script: 'path/to/dev/server.js'\n      }\n    },\n    prod: {\n      options: {\n        script: 'path/to/prod/server.js',\n        node_env: 'production'\n      }\n    },\n    test: {\n      options: {\n        script: 'path/to/test/server.js'\n      }\n    }\n  }\n});\n```\n\nYou can override the default `options` either in the root of the `express` config\nor within each individual server task.\n\n### Default `options`\n\n```js\n  express: {\n    options: {\n      // Override the command used to start the server.\n      // (e.g. 'coffee' instead of the default 'node' to enable CoffeeScript support)\n      cmd: process.argv[0],\n\n      // Will turn into: `node path/to/server.js ARG1 ARG2 ... ARGN`\n      args: [ ],\n\n      // Setting to `false` will effectively just run `node path/to/server.js`\n      background: true,\n\n      // Called when the spawned server throws errors\n      fallback: function() {},\n\n      // Override node env's PORT\n      port: 3000,\n\n      // Override node env's NODE_ENV\n      node_env: undefined,\n\n      // Consider the server to be \"running\" after an explicit delay (in milliseconds)\n      // (e.g. when server has no initial output)\n      delay: 0,\n\n      // Regular expression that matches server output to indicate it is \"running\"\n      output: \".+\",\n\n      // Set --debug\n      debug: false\n    }\n  }\n```\n\n### Usage\n\nBy default, unless `delay` or `output` has been customized,\n**the server is considered \"running\" once any output is logged to the console**,\nupon which control is passed back to grunt.\n\nTypically, this is normally:\n\n> Express server listening on port 3000\n\nIf you log output *before* the server is running, either set `delay` or `output` to indicate\nwhen the server has officially started.\n\n#### Starting the server\n\nIf you have a server defined named `dev`, you can start the server by running `express:dev`.\n\n#### Stopping the server\n\nSimilarly, if you start the `dev` server with `express:dev`, you can stop the server\nwith `express:dev:stop`.\n\n#### With [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ '**/*.js' ],\n      tasks:  [ 'express:dev' ],\n      options: {\n        spawn: false // Without this option specified express won't be reloaded\n      }\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express:dev', 'watch' ])\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n- v0.4.8 – Fix issue with start/restarting multiple instances ([#29](https://github.com/ericclemmons/grunt-express-server/pull/29))\n- v0.4.7 – Remove broken `error` option ([#27](https://github.com/ericclemmons/grunt-express-server/issues/27))\n- v0.4.6 – Store running servers on `process._servers[target]` ([#22](https://github.com/ericclemmons/grunt-express-server/issues/22))\n- v0.4.5 – Support multiple servers running at once ([#23](https://github.com/ericclemmons/grunt-express-server/pull/23))\n- v0.4.4 - Fix for using `grunt-env` to change environments, thanks to @FredrikAppelros ([#20](https://github.com/ericclemmons/grunt-express-server/pull/20))\n- v0.4.3 - Add `cmd` option that defaults to Node, but can be set to `coffee` for Coffeescript support, thanks to @JonET ([#15](https://github.com/ericclemmons/grunt-express-server/pull/15))\n- v0.4.2 - Add `debug` option that gets enables Node's debugger, ideally for use with [node-inspector](https://github.com/node-inspector/node-inspector)\n- v0.4.1 - Add `node_env` option that sets `NODE_ENV` when running the server & restores original env upon closing, thanks to @jgable!\n- v0.4.0\n  - Add `delay` option that, when set, passes control back to grunt after timeout\n  - Add `output` regular expression option that, when set, waits for matching message before passing control back to grunt\n- v0.3.1 - Try to force notification that `express` task has finished as much as possible\n- v0.3.0 - `express` is now a multitask with customizable options, better error handling and `:stop` task\n- v0.2.0\n  - Change `express-server` task to `express`\n  - Config is set via `express: '...'` instead of `server: { script: '...' } `\n- v0.1.0 - Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/ericclemmons/grunt-express-server/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n","readmeFilename":"README.md","_id":"grunt-express-server@0.4.8","dist":{"shasum":"a4ffb7675041191143b517a48ba6b66eed0196ec","tarball":"http://registry.npmjs.org/grunt-express-server/-/grunt-express-server-0.4.8.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"ericclemmons","email":"eric@smarterspam.com"},"maintainers":[{"name":"ericclemmons","email":"eric@smarterspam.com"}],"directories":{}},"0.4.9":{"name":"grunt-express-server","description":"Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde","version":"0.4.9","homepage":"https://github.com/ericclemmons/grunt-express-server","author":{"name":"Eric Clemmons","email":"eric@smarterspam.com"},"repository":{"type":"git","url":"git://github.com/ericclemmons/grunt-express-server.git"},"bugs":{"url":"https://github.com/ericclemmons/grunt-express-server/issues"},"licenses":[{"type":"MIT","url":"https://github.com/ericclemmons/grunt-express-server/blob/master/LICENSE-MIT"}],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"scripts":{"test":"./node_modules/.bin/grunt"},"devDependencies":{"coffee-script":"1.6.3","express":"~3.4.5","grunt":"~0.4.0","grunt-cli":"~0.1.6","grunt-contrib-clean":"~0.5.0","grunt-contrib-jshint":"~0.7.2","grunt-contrib-nodeunit":"~0.2.2","grunt-contrib-watch":"~0.5.3"},"peerDependencies":{"grunt":"~0.4.0"},"keywords":["gruntplugin","express","server"],"readme":"# grunt-express-server\n\n[![Build Status](https://travis-ci.org/ericclemmons/grunt-express-server.png?branch=master)](https://travis-ci.org/ericclemmons/grunt-express-server)\n[![Dependencies](https://david-dm.org/ericclemmons/grunt-express-server.png)](https://david-dm.org/ericclemmons/grunt-express-server)\n[![devDependencies](https://david-dm.org/ericclemmons/grunt-express-server/dev-status.png)](https://david-dm.org/ericclemmons/grunt-express-server#info=devDependencies&view=table)\n\n> Simple grunt task for running an Express server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The `express` task\n\n### Setup\n\nIn your project's Gruntfile, you can create one or multiple servers:\n\n```js\ngrunt.initConfig({\n  express: {\n    options: {\n      // Override defaults here\n    },\n    dev: {\n      options: {\n        script: 'path/to/dev/server.js'\n      }\n    },\n    prod: {\n      options: {\n        script: 'path/to/prod/server.js',\n        node_env: 'production'\n      }\n    },\n    test: {\n      options: {\n        script: 'path/to/test/server.js'\n      }\n    }\n  }\n});\n```\n\nYou can override the default `options` either in the root of the `express` config\nor within each individual server task.\n\n### Default `options`\n\n```js\n  express: {\n    options: {\n      // Override the command used to start the server.\n      // (e.g. 'coffee' instead of the default 'node' to enable CoffeeScript support)\n      cmd: process.argv[0],\n\n      // Will turn into: `node path/to/server.js ARG1 ARG2 ... ARGN`\n      args: [ ],\n\n      // Setting to `false` will effectively just run `node path/to/server.js`\n      background: true,\n\n      // Called when the spawned server throws errors\n      fallback: function() {},\n\n      // Override node env's PORT\n      port: 3000,\n\n      // Override node env's NODE_ENV\n      node_env: undefined,\n\n      // Consider the server to be \"running\" after an explicit delay (in milliseconds)\n      // (e.g. when server has no initial output)\n      delay: 0,\n\n      // Regular expression that matches server output to indicate it is \"running\"\n      output: \".+\",\n\n      // Set --debug\n      debug: false\n    }\n  }\n```\n\n### Usage\n\nBy default, unless `delay` or `output` has been customized,\n**the server is considered \"running\" once any output is logged to the console**,\nupon which control is passed back to grunt.\n\nTypically, this is normally:\n\n> Express server listening on port 3000\n\nIf you log output *before* the server is running, either set `delay` or `output` to indicate\nwhen the server has officially started.\n\n#### Starting the server\n\nIf you have a server defined named `dev`, you can start the server by running `express:dev`.\n\n#### Stopping the server\n\nSimilarly, if you start the `dev` server with `express:dev`, you can stop the server\nwith `express:dev:stop`.\n\n#### With [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ '**/*.js' ],\n      tasks:  [ 'express:dev' ],\n      options: {\n        spawn: false // Without this option specified express won't be reloaded\n      }\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express:dev', 'watch' ])\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n- v0.4.9 – Revert v0.4.8 until [#30](https://github.com/ericclemmons/grunt-express-server/issues/30#issuecomment-29931192) is resolved\n- v0.4.8 – Fix issue with start/restarting multiple instances ([#29](https://github.com/ericclemmons/grunt-express-server/pull/29))\n- v0.4.7 – Remove broken `error` option ([#27](https://github.com/ericclemmons/grunt-express-server/issues/27))\n- v0.4.6 – Store running servers on `process._servers[target]` ([#22](https://github.com/ericclemmons/grunt-express-server/issues/22))\n- v0.4.5 – Support multiple servers running at once ([#23](https://github.com/ericclemmons/grunt-express-server/pull/23))\n- v0.4.4 - Fix for using `grunt-env` to change environments, thanks to @FredrikAppelros ([#20](https://github.com/ericclemmons/grunt-express-server/pull/20))\n- v0.4.3 - Add `cmd` option that defaults to Node, but can be set to `coffee` for Coffeescript support, thanks to @JonET ([#15](https://github.com/ericclemmons/grunt-express-server/pull/15))\n- v0.4.2 - Add `debug` option that gets enables Node's debugger, ideally for use with [node-inspector](https://github.com/node-inspector/node-inspector)\n- v0.4.1 - Add `node_env` option that sets `NODE_ENV` when running the server & restores original env upon closing, thanks to @jgable!\n- v0.4.0\n  - Add `delay` option that, when set, passes control back to grunt after timeout\n  - Add `output` regular expression option that, when set, waits for matching message before passing control back to grunt\n- v0.3.1 - Try to force notification that `express` task has finished as much as possible\n- v0.3.0 - `express` is now a multitask with customizable options, better error handling and `:stop` task\n- v0.2.0\n  - Change `express-server` task to `express`\n  - Config is set via `express: '...'` instead of `server: { script: '...' } `\n- v0.1.0 - Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/ericclemmons/grunt-express-server/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n","readmeFilename":"README.md","_id":"grunt-express-server@0.4.9","dist":{"shasum":"67b35e3ce8bcdc8f1012e9c8ced2c2308759dd8d","tarball":"http://registry.npmjs.org/grunt-express-server/-/grunt-express-server-0.4.9.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"ericclemmons","email":"eric@smarterspam.com"},"maintainers":[{"name":"ericclemmons","email":"eric@smarterspam.com"}],"directories":{}}},"readme":"# grunt-express-server\n\n> Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The \"server\" task\n\n### Setup\n\nIn your project's Gruntfile, simply add a `script` property to your existing `server` object.\n\n```js\ngrunt.initConfig({\n  server: {\n    script: 'path/to/server.js'\n  }\n})\n```\n\n### Usage\n\nAssuming you're using [grunt-contrib-livereload][https://github.com/gruntjs/grunt-contrib-livereload],\nI recommend using the followingin your project's Gruntfile:\n\n```js\ngrunt.initConfig({\n  watch: {\n    server: {\n      files:  '<%= dirs.server + files.all %>',\n      tasks:  [ 'jshint', 'express-server', 'livereload' ]\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express-server', 'livereload', 'watch' ])\n```\n\nThis will let you override `grunt server` with a LiveReload-able Express Server.\nFinally, you can make changes to your API and watch the JSON change in your browser!\n\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n### v0.1.0\n\n- Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n","maintainers":[{"name":"ericclemmons","email":"eric@smarterspam.com"}],"time":{"0.1.0":"2013-02-24T21:46:55.490Z","0.2.0":"2013-05-09T20:29:00.837Z","0.3.1":"2013-05-10T04:50:12.259Z","0.4.0":"2013-06-02T18:07:23.426Z","0.4.1":"2013-07-02T01:07:43.769Z","0.4.2":"2013-07-31T14:19:18.512Z","0.4.3":"2013-08-26T13:34:22.686Z","0.4.4":"2013-10-03T16:00:40.194Z","0.4.5":"2013-10-18T03:05:15.398Z","0.4.6":"2013-12-01T20:42:24.461Z","0.4.7":"2013-12-01T21:26:32.766Z","0.4.8":"2013-12-05T14:58:50.011Z","0.4.9":"2013-12-05T19:53:36.071Z"},"author":{"name":"Eric Clemmons","email":"eric@smarterspam.com"},"repository":{"type":"git","url":"git://github.com/ericclemmons/grunt-express-server.git"},"_attachments":{"grunt-express-server-0.4.9.tgz":{"content_type":"application/octet-stream","revpos":26,"digest":"md5-m0mDD4bsDqVbTyt2+D3GjQ==","length":7510,"stub":true},"grunt-express-server-0.4.8.tgz":{"content_type":"application/octet-stream","revpos":24,"digest":"md5-JqyyUvMqRhqBWGxg8j0rEw==","length":7548,"stub":true},"grunt-express-server-0.4.7.tgz":{"content_type":"application/octet-stream","revpos":22,"digest":"md5-I7Pg0Gy6rdcMk29lTNVI2A==","length":7424,"stub":true},"grunt-express-server-0.4.6.tgz":{"content_type":"application/octet-stream","revpos":20,"digest":"md5-r3L21owjdBpk8dzB48QcFQ==","length":7454,"stub":true},"grunt-express-server-0.4.5.tgz":{"content_type":"application/octet-stream","revpos":18,"digest":"md5-ORiZJHNjHRlh4T0TpRozpw==","length":7185,"stub":true},"grunt-express-server-0.4.4.tgz":{"content_type":"application/octet-stream","revpos":16,"digest":"md5-mzWl9GeoSQwQJ3aK6OCiPA==","length":7045,"stub":true},"grunt-express-server-0.4.3.tgz":{"content_type":"application/octet-stream","revpos":14,"digest":"md5-SKtatiWeAk9VtEo/31x2sg==","length":6899,"stub":true},"grunt-express-server-0.4.2.tgz":{"content_type":"application/octet-stream","revpos":12,"digest":"md5-4K/aZP5Wg0H723IDHkiqCg==","length":6444,"stub":true},"grunt-express-server-0.4.1.tgz":{"content_type":"application/octet-stream","revpos":10,"digest":"md5-42eMJ6WxRqLRHqdnX4oNTA==","length":6197,"stub":true},"grunt-express-server-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-Y5Vp+29q/iPETYjBj/i/qA==","length":5943,"stub":true},"grunt-express-server-0.3.1.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-XOehxsBdCDnXnADVmzhfkw==","length":5129,"stub":true},"grunt-express-server-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-kZvpQVihYF9X7i3Q6JpLEg==","length":3180,"stub":true},"grunt-express-server-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-Rg/PSlXL8nk7R/dlsHyPqw==","length":3089,"stub":true}},"_etag":"\"EIYVZBRY2CBJT4NJ4AKE227LL\""}