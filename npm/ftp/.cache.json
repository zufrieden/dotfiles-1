{"_id":"ftp","_rev":"52-289040d99da23865c0d1e849f197e6d8","name":"ftp","description":"An FTP client module for node.js","dist-tags":{"latest":"0.3.6"},"versions":{"0.1.0":{"name":"ftp","version":"0.1.0","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./ftp","engines":{"node":">=0.4.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/mscdex/node-ftp.git"},"_id":"ftp@0.1.0","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.5","directories":{},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"2966666b4cf967efffd85acf2ab42fe5e10bdb35","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.1.0.tgz"}},"0.1.1":{"name":"ftp","version":"0.1.1","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./ftp","engines":{"node":">=0.4.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/mscdex/node-ftp.git"},"_id":"ftp@0.1.1","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.6","directories":{},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"3349d08a87363187fefacd4a658b2b0963603a48","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.1.1.tgz"}},"0.1.2":{"name":"ftp","version":"0.1.2","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./ftp","engines":{"node":">=0.4.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/mscdex/node-ftp.git"},"_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"_id":"ftp@0.1.2","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"1fb520b0375dad7e62c70b28b0b2393a7dbf95c9","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.1.2.tgz"},"scripts":{},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.4.0 or newer\n\nInstall\n============\n\nnpm install ftp\n\nExamples\n========\n\n* Get a directory listing of the current working directory:\n\n        var FTPClient = require('./ftp'), util = require('util'), conn;\n        function formatDate(d) {\n          return (d.year < 10 ? '0' : '') + d.year + '-' + (d.month < 10 ? '0' : '')\n                 + d.month + '-' + (d.date < 10 ? '0' : '') + d.date;\n        }\n        conn = new FTPClient({ host: '127.0.0.1' });\n        conn.on('connect', function() {\n          conn.auth(function(e) {\n            if (e)\n              throw e;\n            conn.list(function(e, iter) {\n              if (e)\n                throw e;\n              var begin = false;\n              iter.on('entry', function(entry) {\n                if (!begin) {\n                  begin = true;\n                  console.log('<start of directory list>');\n                }\n                if (entry.type === 'l')\n                  entry.type = 'LINK';\n                else if (entry.type === '-')\n                  entry.type = 'FILE';\n                else if (entry.type === 'd')\n                  entry.type = 'DIR.';\n                console.log(' ' + entry.type + ' ' + entry.size + ' '\n                              + formatDate(entry.date) + ' ' + entry.name);\n              });\n              iter.on('raw', function(s) {\n                console.log('<raw entry>: ' + s);\n              });\n              iter.on('end', function() {\n                console.log('<end of directory list>');\n              });\n              iter.on('error', function(e) {\n                console.log('ERROR during list(): ' + util.inspect(e));\n                conn.end();\n              });\n              iter.on('success', function() {\n                conn.end();\n              });\n            });\n          });\n        });\n        conn.connect();\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n        // Assume we have the same connection 'conn' from before and are currently\n        // authenticated ...\n        var fs = require('fs');\n        conn.get('foo.txt', function(e, stream) {\n          if (e)\n            throw e;\n          stream.on('success', function() {\n            conn.end();\n          });\n          stream.on('error', function(e) {\n            console.log('ERROR during get(): ' + util.inspect(e));\n            conn.end();\n          });\n          stream.pipe(fs.createWriteStream('localfoo.txt'));\n        });\n\n* Upload local file 'foo.txt' to the server:\n\n        // Assume we have the same connection 'conn' from before and are currently\n        // authenticated ...\n        var fs = require('fs');\n        conn.put(fs.createReadStream('foo.txt'), 'remotefoo.txt', function(e) {\n          if (e)\n            throw e;\n          conn.end();\n        });\n\n\nAPI\n===\n\n_Events_\n--------\n\n* **connect**() - Fires when a connection to the server has been successfully established.\n\n* **timeout**() - Fires if the connection timed out while attempting to connect to the server.\n\n* **close**(Boolean:hasError) - Fires when the connection is completely closed (similar to net.Socket's close event). The specified Boolean indicates whether the connection was terminated due to a transmission error or not.\n\n* **end**() - Fires when the connection has ended.\n\n* **error**(Error:err) - Fires when an exception/error occurs (similar to net.Socket's error event). The given Error object represents the error raised.\n\n\n_Methods_\n---------\n\n**\\* Note 1: If a particular action results in an FTP-specific error, the error object supplied to the callback or 'error' event will contain 'code' and 'text' properties that contain the relevant FTP response code and the associated error text respectively.**\n\n**\\* Note 2: Methods that return a Boolean success value will immediately return false if the action couldn't be carried out for reasons including: no server connection or the relevant command is not available on that particular server.**\n\n### Standard\n\nThese are actions defined by the \"original\" FTP RFC (959) and are generally supported by all FTP servers.\n\n* **(constructor)**([Object:config]) - Creates and returns a new instance of the FTP module using the specified configuration object. Valid properties of the passed in object are:\n    * **String:host** - The hostname or IP address of the FTP server. **Default:** \"127.0.0.1\"\n    * **Integer:port** - The port of the FTP server. **Default:** 21\n    * **Function:debug** - Accepts a string and gets called for debug messages **Default:** (no debug output)\n    * **Integer:connTimeout** - The number of milliseconds to wait for a connection to be established. **Default:** 15000\n\n* **connect**([Number:port],[String:host]) - _(void)_ - Attempts to connect to the FTP server. If the port and host are specified here, they override and overwrite those set in the constructor.\n\n* **end**() - _(void)_ - Closes the connection to the server.\n\n* **auth**([String:username], [String:password], Function:callback) - _Boolean:success_ - Authenticates with the server (leave out username and password to log in as anonymous). The callback has these parameters: the error (undefined if none).\n\n* **list**([String:path], Function:callback) - _Boolean:success_ - Retrieves the directory listing of the specified path. If path is not supplied, the current working directory is used. The callback has these parameters: the error (undefined if none) and an EventEmitter. The EventEmitter emits the following events:\n\n    * **entry**(Object:entryInfo) - Fires for each file or subdirectory. entryInfo contains the following possible properties:\n        * **String:name** - The name of the entry.\n        * **String:type** - A single character denoting the entry type: 'd' for directory, '-' for file, or 'l' for symlink (UNIX only).\n        * **String:size** - The size of the entry in bytes.\n        * **Object:date** - The last modified date of the entry.\n            * **Integer:month** - (1 through 12)\n            * **Integer:date** - (1 through 31)\n            * **Integer:year** - (1, 2, or 4-digits)\n        * **[Object:time]** - The last modified time of the entry.\n            * **Integer:hour** - (0 through 23)\n            * **Integer:minute** - (0 through 59)\n        * **Object:rights** - (UNIX only) - The various permissions for this entry.\n            * **String:user** - Contains any combination of 'r', 'w', 'x', or an empty string.\n            * **String:group** - Contains any combination of 'r', 'w', 'x', or an empty string.\n            * **String:other** - Contains any combination of 'r', 'w', 'x', or an empty string.\n        * **String:owner** - (UNIX only) - The user name or ID that this entry belongs to.\n        * **String:group** - (UNIX only) - The group name or ID that this entry belongs to.\n        * **[String:target]** - (UNIX only) - For symlink entries, this is the symlink's target.\n\n    * **raw**(String:rawListing) - Fires when a directory listing couldn't be parsed and provides you with the raw directory listing line.\n\n    * **end**() - Fires when the server has finished sending the directory listing, which may or may not be due to error.\n\n    * **success**() - Fires when the server says it successfully sent the entire directory listing.\n\n    * **error**(Error:err) - Fires when an error was encountered while obtaining the directory listing.\n\n* **pwd**(Function:callback) - _Boolean:success_ - Retrieves the current working directory. The callback has these parameters: the error (undefined if none) and a string containing the current working directory.\n\n* **cwd**(String:newPath, Function:callback) - _Boolean:success_ - Changes the current working directory to newPath. The callback has these parameters: the error (undefined if none).\n\n* **get**(String:filename, Function:callback) - _Boolean:success_ - Retrieves a file from the server. The callback has these parameters: the error (undefined if none) and a ReadableStream. The ReadableStream will emit 'success' if the file was successfully transferred.\n\n* **put**(ReadableStream:inStream, String:filename, Function:callback) - _Boolean:success_ - Sends a file to the server. The callback has these parameters: the error (undefined if none).\n\n* **append**(ReadableStream:inStream, String:filename, Function:callback) - _Boolean:success_ - Same as **put**, except if the file already exists, it will be appended to instead of overwritten.\n\n* **mkdir**(String:dirname, Function:callback) - _Boolean:success_ - Creates a new directory on the server. The callback has these parameters: the error (undefined if none) and a string containing the path of the newly created directory.\n\n* **rmdir**(String:dirname, Function:callback) - _Boolean:success_ - Removes a directory on the server. The callback has these parameters: the error (undefined if none).\n\n* **delete**(String:entryName, Function:callback) - _Boolean:success_ - Deletes a file on the server. The callback has these parameters: the error (undefined if none).\n\n* **rename**(String:oldFilename, String:newFilename, Function:callback) - _Boolean:success_ - Renames a file on the server. The callback has these parameters: the error (undefined if none).\n\n* **system**(Function:callback) - _Boolean:success_ - Retrieves information about the server's operating system. The callback has these parameters: the error (undefined if none) and a string containing the text returned by the server.\n\n* **status**(Function:callback) - _Boolean:success_ - Retrieves human-readable information about the server's status. The callback has these parameters: the error (undefined if none) and a string containing the text returned by the server.\n\n\n### Extended\n\nThese are actions defined by later RFCs that may not be supported by all FTP servers.\n\n* **size**(String:filename, Function:callback) - _Boolean:success_ - Retrieves the size of the specified file. The callback has these parameters: the error (undefined if none) and a string containing the size of the file in bytes.\n\n* **lastMod**(String:filename, Function:callback) - _Boolean:success_ - Retrieves the date and time the specified file was last modified. The callback has these parameters: the error (undefined if none) and an object:\n\n    * **Object:modTime**\n        * **Integer:month** - (1 through 12)\n        * **Integer:date** - (1 through 31)\n        * **Integer:year** - (4-digit)\n        * **Integer:hour** - (0 through 23)\n        * **Integer:minute** - (0 through 59)\n        * **Float:second** - (0 through 60 -- with 60 being used only at a leap second)\n\n* **restart**(String/Integer:byteOffset, Function:callback) - _Boolean:success_ - Sets the file byte offset for the next file transfer action (get/put/append). The callback has these parameters: the error (undefined if none).\n","maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.1.3":{"name":"ftp","version":"0.1.3","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./ftp","engines":{"node":">=0.4.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.4.0 or newer\n\nInstall\n============\n\nnpm install ftp\n\nExamples\n========\n\n* Get a pretty-printed directory listing of the current (remote) working directory:\n\n        var FTPClient = require('./ftp'), util = require('util'), conn;\n        function formatDate(d) {\n          return (d.year < 10 ? '0' : '') + d.year + '-' + (d.month < 10 ? '0' : '')\n                 + d.month + '-' + (d.date < 10 ? '0' : '') + d.date;\n        }\n        conn = new FTPClient({ host: '127.0.0.1' });\n        conn.on('connect', function() {\n          conn.auth(function(e) {\n            if (e)\n              throw e;\n            conn.list(function(e, iter) {\n              if (e)\n                throw e;\n              var begin = false;\n              iter.on('entry', function(entry) {\n                if (!begin) {\n                  begin = true;\n                  console.log('<start of directory list>');\n                }\n                if (entry.type === 'l')\n                  entry.type = 'LINK';\n                else if (entry.type === '-')\n                  entry.type = 'FILE';\n                else if (entry.type === 'd')\n                  entry.type = 'DIR.';\n                console.log(' ' + entry.type + ' ' + entry.size + ' '\n                              + formatDate(entry.date) + ' ' + entry.name);\n              });\n              iter.on('raw', function(s) {\n                console.log('<raw entry>: ' + s);\n              });\n              iter.on('end', function() {\n                console.log('<end of directory list>');\n              });\n              iter.on('error', function(e) {\n                console.log('ERROR during list(): ' + util.inspect(e));\n                conn.end();\n              });\n              iter.on('success', function() {\n                conn.end();\n              });\n            });\n          });\n        });\n        conn.connect();\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n        // Assume we have the same connection 'conn' from before and are currently\n        // authenticated ...\n        var fs = require('fs');\n        conn.get('foo.txt', function(e, stream) {\n          if (e)\n            throw e;\n          stream.on('success', function() {\n            conn.end();\n          });\n          stream.on('error', function(e) {\n            console.log('ERROR during get(): ' + util.inspect(e));\n            conn.end();\n          });\n          stream.pipe(fs.createWriteStream('localfoo.txt'));\n        });\n\n* Upload local file 'foo.txt' to the server:\n\n        // Assume we have the same connection 'conn' from before and are currently\n        // authenticated ...\n        var fs = require('fs');\n        conn.put(fs.createReadStream('foo.txt'), 'remotefoo.txt', function(e) {\n          if (e)\n            throw e;\n          conn.end();\n        });\n\n\nAPI\n===\n\n_Events_\n--------\n\n* **connect**() - Fires when a connection to the server has been successfully established.\n\n* **timeout**() - Fires if the connection timed out while attempting to connect to the server.\n\n* **close**(Boolean:hasError) - Fires when the connection is completely closed (similar to net.Socket's close event). The specified Boolean indicates whether the connection was terminated due to a transmission error or not.\n\n* **end**() - Fires when the connection has ended.\n\n* **error**(Error:err) - Fires when an exception/error occurs (similar to net.Socket's error event). The given Error object represents the error raised.\n\n\n_Methods_\n---------\n\n**\\* Note 1: If a particular action results in an FTP-specific error, the error object supplied to the callback or 'error' event will contain 'code' and 'text' properties that contain the relevant FTP response code and the associated error text respectively.**\n\n**\\* Note 2: Methods that return a Boolean success value will immediately return false if the action couldn't be carried out for reasons including: no server connection or the relevant command is not available on that particular server.**\n\n### Standard\n\nThese are actions defined by the \"original\" FTP RFC (959) and are generally supported by all FTP servers.\n\n* **(constructor)**([Object:config]) - Creates and returns a new instance of the FTP module using the specified configuration object. Valid properties of the passed in object are:\n    * **String:host** - The hostname or IP address of the FTP server. **Default:** \"127.0.0.1\"\n    * **Integer:port** - The port of the FTP server. **Default:** 21\n    * **Function:debug** - Accepts a string and gets called for debug messages **Default:** (no debug output)\n    * **Integer:connTimeout** - The number of milliseconds to wait for a connection to be established. **Default:** 15000\n\n* **connect**([Number:port],[String:host]) - _(void)_ - Attempts to connect to the FTP server. If the port and host are specified here, they override and overwrite those set in the constructor.\n\n* **end**() - _(void)_ - Closes the connection to the server.\n\n* **auth**([String:username], [String:password], Function:callback) - _Boolean:success_ - Authenticates with the server (leave out username and password to log in as anonymous). The callback has these parameters: the error (undefined if none).\n\n* **list**([String:path], Function:callback) - _Boolean:success_ - Retrieves the directory listing of the specified path. If path is not supplied, the current working directory is used. The callback has these parameters: the error (undefined if none) and an EventEmitter. The EventEmitter emits the following events:\n\n    * **entry**(Object:entryInfo) - Fires for each file or subdirectory. entryInfo contains the following possible properties:\n        * **String:name** - The name of the entry.\n        * **String:type** - A single character denoting the entry type: 'd' for directory, '-' for file, or 'l' for symlink (UNIX only).\n        * **String:size** - The size of the entry in bytes.\n        * **Object:date** - The last modified date of the entry.\n            * **Integer:month** - (1 through 12)\n            * **Integer:date** - (1 through 31)\n            * **Integer:year** - (1, 2, or 4-digits)\n        * **[Object:time]** - The last modified time of the entry.\n            * **Integer:hour** - (0 through 23)\n            * **Integer:minute** - (0 through 59)\n        * **Object:rights** - (UNIX only) - The various permissions for this entry.\n            * **String:user** - Contains any combination of 'r', 'w', 'x', or an empty string.\n            * **String:group** - Contains any combination of 'r', 'w', 'x', or an empty string.\n            * **String:other** - Contains any combination of 'r', 'w', 'x', or an empty string.\n        * **String:owner** - (UNIX only) - The user name or ID that this entry belongs to.\n        * **String:group** - (UNIX only) - The group name or ID that this entry belongs to.\n        * **[String:target]** - (UNIX only) - For symlink entries, this is the symlink's target.\n\n    * **raw**(String:rawListing) - Fires when a directory listing couldn't be parsed and provides you with the raw directory listing line.\n\n    * **end**() - Fires when the server has finished sending the directory listing, which may or may not be due to error.\n\n    * **success**() - Fires when the server says it successfully sent the entire directory listing.\n\n    * **error**(Error:err) - Fires when an error was encountered while obtaining the directory listing.\n\n* **pwd**(Function:callback) - _Boolean:success_ - Retrieves the current working directory. The callback has these parameters: the error (undefined if none) and a string containing the current working directory.\n\n* **cwd**(String:newPath, Function:callback) - _Boolean:success_ - Changes the current working directory to newPath. The callback has these parameters: the error (undefined if none).\n\n* **get**(String:filename, Function:callback) - _Boolean:success_ - Retrieves a file from the server. The callback has these parameters: the error (undefined if none) and a ReadableStream. The ReadableStream will emit 'success' if the file was successfully transferred.\n\n* **put**(ReadableStream:inStream, String:filename, Function:callback) - _Boolean:success_ - Sends a file to the server. The callback has these parameters: the error (undefined if none).\n\n* **append**(ReadableStream:inStream, String:filename, Function:callback) - _Boolean:success_ - Same as **put**, except if the file already exists, it will be appended to instead of overwritten.\n\n* **mkdir**(String:dirname, Function:callback) - _Boolean:success_ - Creates a new directory on the server. The callback has these parameters: the error (undefined if none) and a string containing the path of the newly created directory.\n\n* **rmdir**(String:dirname, Function:callback) - _Boolean:success_ - Removes a directory on the server. The callback has these parameters: the error (undefined if none).\n\n* **delete**(String:entryName, Function:callback) - _Boolean:success_ - Deletes a file on the server. The callback has these parameters: the error (undefined if none).\n\n* **rename**(String:oldFilename, String:newFilename, Function:callback) - _Boolean:success_ - Renames a file on the server. The callback has these parameters: the error (undefined if none).\n\n* **system**(Function:callback) - _Boolean:success_ - Retrieves information about the server's operating system. The callback has these parameters: the error (undefined if none) and a string containing the text returned by the server.\n\n* **status**(Function:callback) - _Boolean:success_ - Retrieves human-readable information about the server's status. The callback has these parameters: the error (undefined if none) and a string containing the text returned by the server.\n\n\n### Extended\n\nThese are actions defined by later RFCs that may not be supported by all FTP servers.\n\n* **size**(String:filename, Function:callback) - _Boolean:success_ - Retrieves the size of the specified file. The callback has these parameters: the error (undefined if none) and a string containing the size of the file in bytes.\n\n* **lastMod**(String:filename, Function:callback) - _Boolean:success_ - Retrieves the date and time the specified file was last modified. The callback has these parameters: the error (undefined if none) and an object:\n\n    * **Object:modTime**\n        * **Integer:month** - (1 through 12)\n        * **Integer:date** - (1 through 31)\n        * **Integer:year** - (4-digit)\n        * **Integer:hour** - (0 through 23)\n        * **Integer:minute** - (0 through 59)\n        * **Float:second** - (0 through 60 -- with 60 being used only at a leap second)\n\n* **restart**(String/Integer:byteOffset, Function:callback) - _Boolean:success_ - Sets the file byte offset for the next file transfer action (get/put/append). The callback has these parameters: the error (undefined if none).\n","_id":"ftp@0.1.3","dist":{"shasum":"f9c956693e620d8330cfedd965c5b6420179baa2","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.1.3.tgz"},"scripts":{},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.1.4":{"name":"ftp","version":"0.1.4","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./ftp","engines":{"node":">=0.4.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.4.0 or newer\n\nInstall\n============\n\nnpm install ftp\n\nExamples\n========\n\n* Get a pretty-printed directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  // connect to localhost:21\n  var conn = new FTPClient();\n  conn.on('connect', function() {\n    // authenticate as anonymous\n    conn.auth(function(e) {\n      if (e)\n        throw e;\n      conn.list(function(e, entries) {\n        if (e)\n          throw e;\n        console.log('<start of directory list>');\n        for (var i=0,len=entries.length; i<len; ++i) {\n          if (typeof entries[i] === 'string')\n            console.log('<raw entry>: ' + entries[i]);\n          else {\n            if (entries[i].type === 'l')\n              entries[i].type = 'LINK';\n            else if (entries[i].type === '-')\n              entries[i].type = 'FILE';\n            else if (entries[i].type === 'd')\n              entries[i].type = 'DIR';\n            console.log(' ' + entries[i].type + ' ' + entries[i].size\n                        + ' ' + entries[i].date + ' ' + entries[i].name);\n          }\n        }\n        console.log('<end of directory list>');\n        conn.end();\n      });\n    });\n  });\n  conn.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  // Assume we have the same connection 'conn' from before and are currently\n  // authenticated ...\n  var fs = require('fs');\n  conn.get('foo.txt', function(e, stream) {\n    if (e)\n      throw e;\n    stream.on('success', function() {\n      conn.end();\n    });\n    stream.on('error', function(e) {\n      console.log('ERROR during get(): ' + e);\n      conn.end();\n    });\n    stream.pipe(fs.createWriteStream('localfoo.txt'));\n  });\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  // Assume we have the same connection 'conn' from before and are currently\n  // authenticated ...\n  var fs = require('fs');\n  conn.put(fs.createReadStream('foo.txt'), 'remotefoo.txt', function(e) {\n    if (e)\n      throw e;\n    conn.end();\n  });\n```\n\nAPI\n===\n\n_Events_\n--------\n\n* **connect**() - Fires when a connection to the server has been successfully established.\n\n* **timeout**() - Fires if the connection timed out while attempting to connect to the server.\n\n* **close**(<_boolean_>hasError) - Fires when the connection is completely closed (similar to net.Socket's close event). The specified boolean indicates whether the connection was terminated due to a transmission error or not.\n\n* **end**() - Fires when the connection has ended.\n\n* **error**(<_Error_>err) - Fires when an exception/error occurs (similar to net.Socket's error event). The given Error object represents the error raised.\n\n\n_Methods_\n---------\n\n**\\* Note 1: If a particular action results in an FTP-specific error, the error object supplied to the callback or 'error' event will contain 'code' and 'text' properties that contain the relevant FTP response code and the associated error text respectively.**\n\n**\\* Note 2: Methods that return a boolean success value will immediately return false if the action couldn't be carried out for reasons including: no server connection or the relevant command is not available on that particular server.**\n\n### Standard\n\nThese are actions defined by the \"original\" FTP RFC (959) and are generally supported by all FTP servers.\n\n* **(constructor)**([<_object_>config]) - Creates and returns a new instance of the FTP module using the specified configuration object. Valid properties of the passed in object are:\n    * <_string_>host - The hostname or IP address of the FTP server. **Default:** \"localhost\"\n    * <_integer_>port - The port of the FTP server. **Default:** 21\n    * <_integer_>connTimeout - The number of milliseconds to wait for a connection to be established. **Default:** 15000\n    * <_function_>debug - Accepts a string and gets called for debug messages **Default:** (no debug output)\n\n* **connect**(<_integer_>port,][<_string_>host]) - _(void)_ - Attempts to connect to the FTP server. If the port and host are specified here, they override and overwrite those set in the constructor.\n\n* **end**() - _(void)_ - Closes the connection to the server.\n\n* **auth**([<_string_>username, <_string_>password,] <_function_>callback) - <_boolean_>success - Authenticates with the server (leave out username and password to log in as anonymous). The callback has these parameters: the error (undefined if none).\n\n* **list**([<_string_>path,] [<_boolean_>streamList,] <_function_>callback) - <_boolean_>success_ - Retrieves the directory listing of the specified path. path defaults to the current working directory. If streamList is set to true, an EventEmitter will be passed to the callback, otherwise an array of objects (format shown below) and raw strings will be passed in to the callback. The callback has these parameters: the error (undefined if none) and a list source. If streaming the list, the following events are emitted on the list source:\n\n    * **entry**(<_object_>entryInfo) - Emitted for each file or subdirectory. entryInfo contains the following possible properties:\n        * <_string_>name - The name of the entry.\n        * <_string_>type - A single character denoting the entry type: 'd' for directory, '-' for file, or 'l' for symlink (UNIX only).\n        * <_string_>size - The size of the entry in bytes.\n        * <_Date_>date - The last modified date of the entry.\n        * <_object_>rights - **(*NIX only)** - The various permissions for this entry.\n            * <_string_>user - An empty string or any combination of 'r', 'w', 'x'.\n            * <_string_>group - An empty string or any combination of 'r', 'w', 'x'.\n            * <_string_>other - An empty string or any combination of 'r', 'w', 'x'.\n        * <_string_>owner - **(*NIX only)** - The user name or ID that this entry belongs to.\n        * <_string_>group - **(*NIX only)** - The group name or ID that this entry belongs to.\n        * <_string_>target - **(*NIX only)** - For symlink entries, this is the symlink's target.\n\n    * **raw**(<_string_>rawListing) - Emitted when a directory listing couldn't be parsed and provides you with the raw directory listing from the server.\n\n    * **end**() - Emitted when the server has finished sending the directory listing, which may or may not be due to error.\n\n    * **success**() - Emitted when the server says it successfully sent the entire directory listing.\n\n    * **error**(<_Error_>err) - Emitted when an error was encountered while obtaining the directory listing.\n\n* **pwd**(<_function_>callback) - <_boolean_>success - Retrieves the current working directory. The callback has these parameters: the error (undefined if none) and a string containing the current working directory.\n\n* **cwd**(<_string_>newPath, <_function_>callback) - <_boolean_>success - Changes the current working directory to newPath. The callback has these parameters: the error (undefined if none).\n\n* **cdup**(<_function_>callback) - <_boolean_>success - Changes the working directory to the parent of the current directory. The callback has these parameters: the error (undefined if none).\n\n* **get**(<_string_>filename, <_function_>callback) - <_boolean_>success - Retrieves a file from the server. The callback has these parameters: the error (undefined if none) and a ReadableStream. The ReadableStream will emit 'success' if the file was successfully transferred.\n\n* **put**(<_ReadableStream_>inStream, <_string_>filename, <_function_>callback) - <_boolean_>success - Sends a file to the server. The callback has these parameters: the error (undefined if none).\n\n* **append**(<_ReadableStream_>inStream, <_string_>filename, <_function_>callback) - <_boolean_>success - Same as **put**, except if the file already exists, it will be appended to instead of overwritten.\n\n* **mkdir**(<_string_>dirname, <_function_>callback) - <_boolean_>success - Creates a new directory on the server. The callback has these parameters: the error (undefined if none) and a string containing the path of the newly created directory.\n\n* **rmdir**(<_string_>dirname, <_function_>callback) - <_boolean_>success - Removes a directory on the server. The callback has these parameters: the error (undefined if none).\n\n* **delete**(<_string_>entryName, <_function_>callback) - <_boolean_>success - Deletes a file on the server. The callback has these parameters: the error (undefined if none).\n\n* **rename**(<_string_>oldFilename, <_string_>newFilename, <_function_>callback) - <_boolean_>success - Renames a file on the server. The callback has these parameters: the error (undefined if none).\n\n* **system**(<_function_>callback) - <_boolean_>success - Retrieves information about the server's operating system. The callback has these parameters: the error (undefined if none) and a string containing the text returned by the server.\n\n* **status**(<_function_>callback) - <_boolean_>success - Retrieves human-readable information about the server's status. The callback has these parameters: the error (undefined if none) and a string containing the text returned by the server.\n\n\n### Extended\n\nThese are actions defined by later RFCs that may not be supported by all FTP servers.\n\n* **size**(<_string_>filename, <_function_>callback) - <_boolean_>success - Retrieves the size of the specified file. The callback has these parameters: the error (undefined if none) and a string containing the size of the file in bytes.\n\n* **lastMod**(<_string_>filename, <_function_>callback) - <_boolean_>success - Retrieves the date and time the specified file was last modified. The callback has these parameters: the error (undefined if none) and a _Date_ instance representing the last modified date.\n\n* **restart**(<_mixed_>byteOffset, <_function_>callback) - <_boolean_>success - Sets the file byte offset for the next file transfer action (get/put/append). byteOffset can be an _integer_ or _string_. The callback has these parameters: the error (undefined if none).\n","_id":"ftp@0.1.4","dist":{"shasum":"a5a2fb31fbcba943bd4f60842a2245d6dc3b029e","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.1.4.tgz"},"scripts":{},"_npmVersion":"1.1.59","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.1.5":{"name":"ftp","version":"0.1.5","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./ftp","engines":{"node":">=0.4.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.4.0 or newer\n\nInstall\n============\n\nnpm install ftp\n\nExamples\n========\n\n* Get a pretty-printed directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  // connect to localhost:21\n  var conn = new FTPClient();\n  conn.on('connect', function() {\n    // authenticate as anonymous\n    conn.auth(function(e) {\n      if (e)\n        throw e;\n      conn.list(function(e, entries) {\n        if (e)\n          throw e;\n        console.log('<start of directory list>');\n        for (var i=0,len=entries.length; i<len; ++i) {\n          if (typeof entries[i] === 'string')\n            console.log('<raw entry>: ' + entries[i]);\n          else {\n            if (entries[i].type === 'l')\n              entries[i].type = 'LINK';\n            else if (entries[i].type === '-')\n              entries[i].type = 'FILE';\n            else if (entries[i].type === 'd')\n              entries[i].type = 'DIR';\n            console.log(' ' + entries[i].type + ' ' + entries[i].size\n                        + ' ' + entries[i].date + ' ' + entries[i].name);\n          }\n        }\n        console.log('<end of directory list>');\n        conn.end();\n      });\n    });\n  });\n  conn.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  // Assume we have the same connection 'conn' from before and are currently\n  // authenticated ...\n  var fs = require('fs');\n  conn.get('foo.txt', function(e, stream) {\n    if (e)\n      throw e;\n    stream.on('success', function() {\n      conn.end();\n    });\n    stream.on('error', function(e) {\n      console.log('ERROR during get(): ' + e);\n      conn.end();\n    });\n    stream.pipe(fs.createWriteStream('localfoo.txt'));\n  });\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  // Assume we have the same connection 'conn' from before and are currently\n  // authenticated ...\n  var fs = require('fs');\n  conn.put(fs.createReadStream('foo.txt'), 'remotefoo.txt', function(e) {\n    if (e)\n      throw e;\n    conn.end();\n  });\n```\n\nAPI\n===\n\n_Events_\n--------\n\n* **connect**() - Fires when a connection to the server has been successfully established.\n\n* **timeout**() - Fires if the connection timed out while attempting to connect to the server.\n\n* **close**(<_boolean_>hasError) - Fires when the connection is completely closed (similar to net.Socket's close event). The specified boolean indicates whether the connection was terminated due to a transmission error or not.\n\n* **end**() - Fires when the connection has ended.\n\n* **error**(<_Error_>err) - Fires when an exception/error occurs (similar to net.Socket's error event). The given Error object represents the error raised.\n\n\n_Methods_\n---------\n\n**\\* Note 1: If a particular action results in an FTP-specific error, the error object supplied to the callback or 'error' event will contain 'code' and 'text' properties that contain the relevant FTP response code and the associated error text respectively.**\n\n**\\* Note 2: Methods that return a boolean success value will immediately return false if the action couldn't be carried out for reasons including: no server connection or the relevant command is not available on that particular server.**\n\n### Standard\n\nThese are actions defined by the \"original\" FTP RFC (959) and are generally supported by all FTP servers.\n\n* **(constructor)**([<_object_>config]) - Creates and returns a new instance of the FTP module using the specified configuration object. Valid properties of the passed in object are:\n    * <_string_>host - The hostname or IP address of the FTP server. **Default:** \"localhost\"\n    * <_integer_>port - The port of the FTP server. **Default:** 21\n    * <_integer_>connTimeout - The number of milliseconds to wait for a connection to be established. **Default:** 15000\n    * <_function_>debug - Accepts a string and gets called for debug messages **Default:** (no debug output)\n\n* **connect**(<_integer_>port,][<_string_>host]) - _(void)_ - Attempts to connect to the FTP server. If the port and host are specified here, they override and overwrite those set in the constructor.\n\n* **end**() - _(void)_ - Closes the connection to the server.\n\n* **auth**([<_string_>username, <_string_>password,] <_function_>callback) - <_boolean_>success - Authenticates with the server (leave out username and password to log in as anonymous). The callback has these parameters: the error (undefined if none).\n\n* **list**([<_string_>path,] [<_boolean_>streamList,] <_function_>callback) - <_boolean_>success_ - Retrieves the directory listing of the specified path. path defaults to the current working directory. If streamList is set to true, an EventEmitter will be passed to the callback, otherwise an array of objects (format shown below) and raw strings will be passed in to the callback. The callback has these parameters: the error (undefined if none) and a list source. If streaming the list, the following events are emitted on the list source:\n\n    * **entry**(<_object_>entryInfo) - Emitted for each file or subdirectory. entryInfo contains the following possible properties:\n        * <_string_>name - The name of the entry.\n        * <_string_>type - A single character denoting the entry type: 'd' for directory, '-' for file, or 'l' for symlink (UNIX only).\n        * <_string_>size - The size of the entry in bytes.\n        * <_Date_>date - The last modified date of the entry.\n        * <_object_>rights - **(*NIX only)** - The various permissions for this entry.\n            * <_string_>user - An empty string or any combination of 'r', 'w', 'x'.\n            * <_string_>group - An empty string or any combination of 'r', 'w', 'x'.\n            * <_string_>other - An empty string or any combination of 'r', 'w', 'x'.\n        * <_string_>owner - **(*NIX only)** - The user name or ID that this entry belongs to.\n        * <_string_>group - **(*NIX only)** - The group name or ID that this entry belongs to.\n        * <_string_>target - **(*NIX only)** - For symlink entries, this is the symlink's target.\n\n    * **raw**(<_string_>rawListing) - Emitted when a directory listing couldn't be parsed and provides you with the raw directory listing from the server.\n\n    * **end**() - Emitted when the server has finished sending the directory listing, which may or may not be due to error.\n\n    * **success**() - Emitted when the server says it successfully sent the entire directory listing.\n\n    * **error**(<_Error_>err) - Emitted when an error was encountered while obtaining the directory listing.\n\n* **pwd**(<_function_>callback) - <_boolean_>success - Retrieves the current working directory. The callback has these parameters: the error (undefined if none) and a string containing the current working directory.\n\n* **cwd**(<_string_>newPath, <_function_>callback) - <_boolean_>success - Changes the current working directory to newPath. The callback has these parameters: the error (undefined if none).\n\n* **cdup**(<_function_>callback) - <_boolean_>success - Changes the working directory to the parent of the current directory. The callback has these parameters: the error (undefined if none).\n\n* **get**(<_string_>filename, <_function_>callback) - <_boolean_>success - Retrieves a file from the server. The callback has these parameters: the error (undefined if none) and a ReadableStream. The ReadableStream will emit 'success' if the file was successfully transferred.\n\n* **put**(<_ReadableStream_>inStream, <_string_>filename, <_function_>callback) - <_boolean_>success - Sends a file to the server. The callback has these parameters: the error (undefined if none).\n\n* **append**(<_ReadableStream_>inStream, <_string_>filename, <_function_>callback) - <_boolean_>success - Same as **put**, except if the file already exists, it will be appended to instead of overwritten.\n\n* **mkdir**(<_string_>dirname, <_function_>callback) - <_boolean_>success - Creates a new directory on the server. The callback has these parameters: the error (undefined if none) and a string containing the path of the newly created directory.\n\n* **rmdir**(<_string_>dirname, <_function_>callback) - <_boolean_>success - Removes a directory on the server. The callback has these parameters: the error (undefined if none).\n\n* **delete**(<_string_>entryName, <_function_>callback) - <_boolean_>success - Deletes a file on the server. The callback has these parameters: the error (undefined if none).\n\n* **rename**(<_string_>oldFilename, <_string_>newFilename, <_function_>callback) - <_boolean_>success - Renames a file on the server. The callback has these parameters: the error (undefined if none).\n\n* **system**(<_function_>callback) - <_boolean_>success - Retrieves information about the server's operating system. The callback has these parameters: the error (undefined if none) and a string containing the text returned by the server.\n\n* **status**(<_function_>callback) - <_boolean_>success - Retrieves human-readable information about the server's status. The callback has these parameters: the error (undefined if none) and a string containing the text returned by the server.\n\n\n### Extended\n\nThese are actions defined by later RFCs that may not be supported by all FTP servers.\n\n* **size**(<_string_>filename, <_function_>callback) - <_boolean_>success - Retrieves the size of the specified file. The callback has these parameters: the error (undefined if none) and a string containing the size of the file in bytes.\n\n* **lastMod**(<_string_>filename, <_function_>callback) - <_boolean_>success - Retrieves the date and time the specified file was last modified. The callback has these parameters: the error (undefined if none) and a _Date_ instance representing the last modified date.\n\n* **restart**(<_mixed_>byteOffset, <_function_>callback) - <_boolean_>success - Sets the file byte offset for the next file transfer action (get/put/append). byteOffset can be an _integer_ or _string_. The callback has these parameters: the error (undefined if none).\n","_id":"ftp@0.1.5","dist":{"shasum":"05e51931672bbdeb9371729bb6d765e68410355e","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.1.5.tgz"},"scripts":{},"_npmVersion":"1.1.59","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.1.6":{"name":"ftp","version":"0.1.6","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./ftp","engines":{"node":">=0.4.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.4.0 or newer\n\nInstall\n============\n\nnpm install ftp\n\nExamples\n========\n\n* Get a pretty-printed directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  // connect to localhost:21\n  var conn = new FTPClient();\n  conn.on('connect', function() {\n    // authenticate as anonymous\n    conn.auth(function(e) {\n      if (e)\n        throw e;\n      conn.list(function(e, entries) {\n        if (e)\n          throw e;\n        console.log('<start of directory list>');\n        for (var i=0,len=entries.length; i<len; ++i) {\n          if (typeof entries[i] === 'string')\n            console.log('<raw entry>: ' + entries[i]);\n          else {\n            if (entries[i].type === 'l')\n              entries[i].type = 'LINK';\n            else if (entries[i].type === '-')\n              entries[i].type = 'FILE';\n            else if (entries[i].type === 'd')\n              entries[i].type = 'DIR';\n            console.log(' ' + entries[i].type + ' ' + entries[i].size\n                        + ' ' + entries[i].date + ' ' + entries[i].name);\n          }\n        }\n        console.log('<end of directory list>');\n        conn.end();\n      });\n    });\n  });\n  conn.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  // Assume we have the same connection 'conn' from before and are currently\n  // authenticated ...\n  var fs = require('fs');\n  conn.get('foo.txt', function(e, stream) {\n    if (e)\n      throw e;\n    stream.on('success', function() {\n      conn.end();\n    });\n    stream.on('error', function(e) {\n      console.log('ERROR during get(): ' + e);\n      conn.end();\n    });\n    stream.pipe(fs.createWriteStream('localfoo.txt'));\n  });\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  // Assume we have the same connection 'conn' from before and are currently\n  // authenticated ...\n  var fs = require('fs');\n  conn.put(fs.createReadStream('foo.txt'), 'remotefoo.txt', function(e) {\n    if (e)\n      throw e;\n    conn.end();\n  });\n```\n\nAPI\n===\n\n_Events_\n--------\n\n* **connect**() - Fires when a connection to the server has been successfully established.\n\n* **timeout**() - Fires if the connection timed out while attempting to connect to the server.\n\n* **close**(<_boolean_>hasError) - Fires when the connection is completely closed (similar to net.Socket's close event). The specified boolean indicates whether the connection was terminated due to a transmission error or not.\n\n* **end**() - Fires when the connection has ended.\n\n* **error**(<_Error_>err) - Fires when an exception/error occurs (similar to net.Socket's error event). The given Error object represents the error raised.\n\n\n_Methods_\n---------\n\n**\\* Note 1: If a particular action results in an FTP-specific error, the error object supplied to the callback or 'error' event will contain 'code' and 'text' properties that contain the relevant FTP response code and the associated error text respectively.**\n\n**\\* Note 2: Methods that return a boolean success value will immediately return false if the action couldn't be carried out for reasons including: no server connection or the relevant command is not available on that particular server.**\n\n### Standard\n\nThese are actions defined by the \"original\" FTP RFC (959) and are generally supported by all FTP servers.\n\n* **(constructor)**([<_object_>config]) - Creates and returns a new instance of the FTP module using the specified configuration object. Valid properties of the passed in object are:\n    * <_string_>host - The hostname or IP address of the FTP server. **Default:** \"localhost\"\n    * <_integer_>port - The port of the FTP server. **Default:** 21\n    * <_integer_>connTimeout - The number of milliseconds to wait for a connection to be established. **Default:** 15000\n    * <_function_>debug - Accepts a string and gets called for debug messages **Default:** (no debug output)\n\n* **connect**(<_integer_>port,][<_string_>host]) - _(void)_ - Attempts to connect to the FTP server. If the port and host are specified here, they override and overwrite those set in the constructor.\n\n* **end**() - _(void)_ - Closes the connection to the server.\n\n* **auth**([<_string_>username, <_string_>password,] <_function_>callback) - <_boolean_>success - Authenticates with the server (leave out username and password to log in as anonymous). The callback has these parameters: the error (undefined if none).\n\n* **list**([<_string_>path,] [<_boolean_>streamList,] <_function_>callback) - <_boolean_>success_ - Retrieves the directory listing of the specified path. path defaults to the current working directory. If streamList is set to true, an EventEmitter will be passed to the callback, otherwise an array of objects (format shown below) and raw strings will be passed in to the callback. The callback has these parameters: the error (undefined if none) and a list source. If streaming the list, the following events are emitted on the list source:\n\n    * **entry**(<_object_>entryInfo) - Emitted for each file or subdirectory. entryInfo contains the following possible properties:\n        * <_string_>name - The name of the entry.\n        * <_string_>type - A single character denoting the entry type: 'd' for directory, '-' for file, or 'l' for symlink (UNIX only).\n        * <_string_>size - The size of the entry in bytes.\n        * <_Date_>date - The last modified date of the entry.\n        * <_object_>rights - **(*NIX only)** - The various permissions for this entry.\n            * <_string_>user - An empty string or any combination of 'r', 'w', 'x'.\n            * <_string_>group - An empty string or any combination of 'r', 'w', 'x'.\n            * <_string_>other - An empty string or any combination of 'r', 'w', 'x'.\n        * <_string_>owner - **(*NIX only)** - The user name or ID that this entry belongs to.\n        * <_string_>group - **(*NIX only)** - The group name or ID that this entry belongs to.\n        * <_string_>target - **(*NIX only)** - For symlink entries, this is the symlink's target.\n\n    * **raw**(<_string_>rawListing) - Emitted when a directory listing couldn't be parsed and provides you with the raw directory listing from the server.\n\n    * **end**() - Emitted when the server has finished sending the directory listing, which may or may not be due to error.\n\n    * **success**() - Emitted when the server says it successfully sent the entire directory listing.\n\n    * **error**(<_Error_>err) - Emitted when an error was encountered while obtaining the directory listing.\n\n* **pwd**(<_function_>callback) - <_boolean_>success - Retrieves the current working directory. The callback has these parameters: the error (undefined if none) and a string containing the current working directory.\n\n* **cwd**(<_string_>newPath, <_function_>callback) - <_boolean_>success - Changes the current working directory to newPath. The callback has these parameters: the error (undefined if none).\n\n* **cdup**(<_function_>callback) - <_boolean_>success - Changes the working directory to the parent of the current directory. The callback has these parameters: the error (undefined if none).\n\n* **get**(<_string_>filename, <_function_>callback) - <_boolean_>success - Retrieves a file from the server. The callback has these parameters: the error (undefined if none) and a ReadableStream. The ReadableStream will emit 'success' if the file was successfully transferred.\n\n* **put**(<_mixed_>input, <_string_>filename, <_function_>callback) - <_boolean_>success - Sends a file to the server. The `input` can be a ReadableStream or a single Buffer. The callback has these parameters: the error (undefined if none).\n\n* **append**(<_mixed_>input, <_string_>filename, <_function_>callback) - <_boolean_>success - Same as **put**, except if the file already exists, it will be appended to instead of overwritten.\n\n* **mkdir**(<_string_>dirname, <_function_>callback) - <_boolean_>success - Creates a new directory on the server. The callback has these parameters: the error (undefined if none) and a string containing the path of the newly created directory.\n\n* **rmdir**(<_string_>dirname, <_function_>callback) - <_boolean_>success - Removes a directory on the server. The callback has these parameters: the error (undefined if none).\n\n* **delete**(<_string_>entryName, <_function_>callback) - <_boolean_>success - Deletes a file on the server. The callback has these parameters: the error (undefined if none).\n\n* **rename**(<_string_>oldFilename, <_string_>newFilename, <_function_>callback) - <_boolean_>success - Renames a file on the server. The callback has these parameters: the error (undefined if none).\n\n* **system**(<_function_>callback) - <_boolean_>success - Retrieves information about the server's operating system. The callback has these parameters: the error (undefined if none) and a string containing the text returned by the server.\n\n* **status**(<_function_>callback) - <_boolean_>success - Retrieves human-readable information about the server's status. The callback has these parameters: the error (undefined if none) and a string containing the text returned by the server.\n\n\n### Extended\n\nThese are actions defined by later RFCs that may not be supported by all FTP servers.\n\n* **size**(<_string_>filename, <_function_>callback) - <_boolean_>success - Retrieves the size of the specified file. The callback has these parameters: the error (undefined if none) and a string containing the size of the file in bytes.\n\n* **lastMod**(<_string_>filename, <_function_>callback) - <_boolean_>success - Retrieves the date and time the specified file was last modified. The callback has these parameters: the error (undefined if none) and a _Date_ instance representing the last modified date.\n\n* **restart**(<_mixed_>byteOffset, <_function_>callback) - <_boolean_>success - Sets the file byte offset for the next file transfer action (get/put/append). byteOffset can be an _integer_ or _string_. The callback has these parameters: the error (undefined if none).\n","_id":"ftp@0.1.6","dist":{"shasum":"6244c55f7e24d36a8a1836758361b88fb53c560b","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.1.6.tgz"},"scripts":{},"_npmVersion":"1.1.59","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.1.7":{"name":"ftp","version":"0.1.7","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./ftp","engines":{"node":">=0.4.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.4.0 or newer\n\nInstall\n============\n\nnpm install ftp\n\nExamples\n========\n\n* Get a pretty-printed directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  // connect to localhost:21\n  var conn = new FTPClient();\n  conn.on('connect', function() {\n    // authenticate as anonymous\n    conn.auth(function(e) {\n      if (e)\n        throw e;\n      conn.list(function(e, entries) {\n        if (e)\n          throw e;\n        console.log('<start of directory list>');\n        for (var i=0,len=entries.length; i<len; ++i) {\n          if (typeof entries[i] === 'string')\n            console.log('<raw entry>: ' + entries[i]);\n          else {\n            if (entries[i].type === 'l')\n              entries[i].type = 'LINK';\n            else if (entries[i].type === '-')\n              entries[i].type = 'FILE';\n            else if (entries[i].type === 'd')\n              entries[i].type = 'DIR';\n            console.log(' ' + entries[i].type + ' ' + entries[i].size\n                        + ' ' + entries[i].date + ' ' + entries[i].name);\n          }\n        }\n        console.log('<end of directory list>');\n        conn.end();\n      });\n    });\n  });\n  conn.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  // Assume we have the same connection 'conn' from before and are currently\n  // authenticated ...\n  var fs = require('fs');\n  conn.get('foo.txt', function(e, stream) {\n    if (e)\n      throw e;\n    stream.on('success', function() {\n      conn.end();\n    });\n    stream.on('error', function(e) {\n      console.log('ERROR during get(): ' + e);\n      conn.end();\n    });\n    stream.pipe(fs.createWriteStream('localfoo.txt'));\n  });\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  // Assume we have the same connection 'conn' from before and are currently\n  // authenticated ...\n  var fs = require('fs');\n  conn.put(fs.createReadStream('foo.txt'), 'remotefoo.txt', function(e) {\n    if (e)\n      throw e;\n    conn.end();\n  });\n```\n\nAPI\n===\n\n_Events_\n--------\n\n* **connect**() - Fires when a connection to the server has been successfully established.\n\n* **timeout**() - Fires if the connection timed out while attempting to connect to the server.\n\n* **close**(<_boolean_>hasError) - Fires when the connection is completely closed (similar to net.Socket's close event). The specified boolean indicates whether the connection was terminated due to a transmission error or not.\n\n* **end**() - Fires when the connection has ended.\n\n* **error**(<_Error_>err) - Fires when an exception/error occurs (similar to net.Socket's error event). The given Error object represents the error raised.\n\n\n_Methods_\n---------\n\n**\\* Note 1: If a particular action results in an FTP-specific error, the error object supplied to the callback or 'error' event will contain 'code' and 'text' properties that contain the relevant FTP response code and the associated error text respectively.**\n\n**\\* Note 2: Methods that return a boolean success value will immediately return false if the action couldn't be carried out for reasons including: no server connection or the relevant command is not available on that particular server.**\n\n### Standard\n\nThese are actions defined by the \"original\" FTP RFC (959) and are generally supported by all FTP servers.\n\n* **(constructor)**([<_object_>config]) - Creates and returns a new instance of the FTP module using the specified configuration object. Valid properties of the passed in object are:\n    * <_string_>host - The hostname or IP address of the FTP server. **Default:** \"localhost\"\n    * <_integer_>port - The port of the FTP server. **Default:** 21\n    * <_integer_>connTimeout - The number of milliseconds to wait for a connection to be established. **Default:** 15000\n    * <_function_>debug - Accepts a string and gets called for debug messages **Default:** (no debug output)\n\n* **connect**(<_integer_>port,][<_string_>host]) - _(void)_ - Attempts to connect to the FTP server. If the port and host are specified here, they override and overwrite those set in the constructor.\n\n* **end**() - _(void)_ - Closes the connection to the server.\n\n* **auth**([<_string_>username, <_string_>password,] <_function_>callback) - <_boolean_>success - Authenticates with the server (leave out username and password to log in as anonymous). The callback has these parameters: the error (undefined if none).\n\n* **list**([<_string_>path,] [<_boolean_>streamList,] <_function_>callback) - <_boolean_>success_ - Retrieves the directory listing of the specified path. path defaults to the current working directory. If streamList is set to true, an EventEmitter will be passed to the callback, otherwise an array of objects (format shown below) and raw strings will be passed in to the callback. The callback has these parameters: the error (undefined if none) and a list source. If streaming the list, the following events are emitted on the list source:\n\n    * **entry**(<_object_>entryInfo) - Emitted for each file or subdirectory. entryInfo contains the following possible properties:\n        * <_string_>name - The name of the entry.\n        * <_string_>type - A single character denoting the entry type: 'd' for directory, '-' for file, or 'l' for symlink (UNIX only).\n        * <_string_>size - The size of the entry in bytes.\n        * <_Date_>date - The last modified date of the entry.\n        * <_object_>rights - **(*NIX only)** - The various permissions for this entry.\n            * <_string_>user - An empty string or any combination of 'r', 'w', 'x'.\n            * <_string_>group - An empty string or any combination of 'r', 'w', 'x'.\n            * <_string_>other - An empty string or any combination of 'r', 'w', 'x'.\n        * <_string_>owner - **(*NIX only)** - The user name or ID that this entry belongs to.\n        * <_string_>group - **(*NIX only)** - The group name or ID that this entry belongs to.\n        * <_string_>target - **(*NIX only)** - For symlink entries, this is the symlink's target.\n\n    * **raw**(<_string_>rawListing) - Emitted when a directory listing couldn't be parsed and provides you with the raw directory listing from the server.\n\n    * **end**() - Emitted when the server has finished sending the directory listing, which may or may not be due to error.\n\n    * **success**() - Emitted when the server says it successfully sent the entire directory listing.\n\n    * **error**(<_Error_>err) - Emitted when an error was encountered while obtaining the directory listing.\n\n* **pwd**(<_function_>callback) - <_boolean_>success - Retrieves the current working directory. The callback has these parameters: the error (undefined if none) and a string containing the current working directory.\n\n* **cwd**(<_string_>newPath, <_function_>callback) - <_boolean_>success - Changes the current working directory to newPath. The callback has these parameters: the error (undefined if none).\n\n* **cdup**(<_function_>callback) - <_boolean_>success - Changes the working directory to the parent of the current directory. The callback has these parameters: the error (undefined if none).\n\n* **get**(<_string_>filename, <_function_>callback) - <_boolean_>success - Retrieves a file from the server. The callback has these parameters: the error (undefined if none) and a ReadableStream. The ReadableStream will emit 'success' if the file was successfully transferred.\n\n* **put**(<_mixed_>input, <_string_>filename, <_function_>callback) - <_boolean_>success - Sends a file to the server. The `input` can be a ReadableStream or a single Buffer. The callback has these parameters: the error (undefined if none).\n\n* **append**(<_mixed_>input, <_string_>filename, <_function_>callback) - <_boolean_>success - Same as **put**, except if the file already exists, it will be appended to instead of overwritten.\n\n* **mkdir**(<_string_>dirname, <_function_>callback) - <_boolean_>success - Creates a new directory on the server. The callback has these parameters: the error (undefined if none) and a string containing the path of the newly created directory.\n\n* **rmdir**(<_string_>dirname, <_function_>callback) - <_boolean_>success - Removes a directory on the server. The callback has these parameters: the error (undefined if none).\n\n* **delete**(<_string_>entryName, <_function_>callback) - <_boolean_>success - Deletes a file on the server. The callback has these parameters: the error (undefined if none).\n\n* **rename**(<_string_>oldFilename, <_string_>newFilename, <_function_>callback) - <_boolean_>success - Renames a file on the server. The callback has these parameters: the error (undefined if none).\n\n* **system**(<_function_>callback) - <_boolean_>success - Retrieves information about the server's operating system. The callback has these parameters: the error (undefined if none) and a string containing the text returned by the server.\n\n* **status**(<_function_>callback) - <_boolean_>success - Retrieves human-readable information about the server's status. The callback has these parameters: the error (undefined if none) and a string containing the text returned by the server.\n\n\n### Extended\n\nThese are actions defined by later RFCs that may not be supported by all FTP servers.\n\n* **size**(<_string_>filename, <_function_>callback) - <_boolean_>success - Retrieves the size of the specified file. The callback has these parameters: the error (undefined if none) and a string containing the size of the file in bytes.\n\n* **lastMod**(<_string_>filename, <_function_>callback) - <_boolean_>success - Retrieves the date and time the specified file was last modified. The callback has these parameters: the error (undefined if none) and a _Date_ instance representing the last modified date.\n\n* **restart**(<_mixed_>byteOffset, <_function_>callback) - <_boolean_>success - Sets the file byte offset for the next file transfer action (get/put/append). byteOffset can be an _integer_ or _string_. The callback has these parameters: the error (undefined if none).\n","_id":"ftp@0.1.7","dist":{"shasum":"92fb24d5098dd1e6debe38b792c7d57b5c112cef","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.1.7.tgz"},"scripts":{},"_npmVersion":"1.1.61","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.2.0":{"name":"ftp","version":"0.2.0","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./ftp","engines":{"node":">=0.8.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.put(fs.createReadStream('foo.txt'), 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\nAPI\n===\n\nEvents\n------\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the main connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves a file, `path`, from the server. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >path, < _function_ >callback) - _(void)_ - Sends data to the server to be stored as `path`. `input` can be a ReadableStream or a single Buffer. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >path, < _function_ >callback) - _(void)_ - Same as **put()**, except if `path` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 1 parameter: < _Error_ >err.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves information about the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >info.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put/append) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","_id":"ftp@0.2.0","dist":{"shasum":"a6ccd136edbd44b26e904e4f76b6d6d2407b5d30","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.2.0.tgz"},"scripts":{},"_npmVersion":"1.1.69","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.2.5":{"name":"ftp","version":"0.2.5","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./lib/ftp","engines":{"node":">=0.8.0"},"dependencies":{"xregexp":"*"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n\nAPI\n===\n\nEvents\n------\n\n* **greeting**(< _string_ >msg) - Emitted after connection. `msg` is the text the server sent upon connection.\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * secure - _mixed_ - Set to true for both control and data connection encryption, 'control' for control connection encryption only, or 'implicit' for implicitly encrypted control connection (this mode is deprecated in modern times, but usually uses port 990) **Default:** false\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the control connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves a file, `path`, from the server. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Sends data to the server to be stored as `path`. `input` can be a ReadableStream, a Buffer, or a path to a local file. `useCompression` defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Same as **put()**, except if `destPath` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 1 parameter: < _Error_ >err.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >OS.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","_id":"ftp@0.2.5","dist":{"shasum":"21c9602f309cb52427478359b3b318a9e6d9cc81","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.2.5.tgz"},"scripts":{},"_npmVersion":"1.1.69","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.2.6":{"name":"ftp","version":"0.2.6","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./lib/ftp","engines":{"node":">=0.8.0"},"dependencies":{"xregexp":"2.0.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n\nAPI\n===\n\nEvents\n------\n\n* **greeting**(< _string_ >msg) - Emitted after connection. `msg` is the text the server sent upon connection.\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * secure - _mixed_ - Set to true for both control and data connection encryption, 'control' for control connection encryption only, or 'implicit' for implicitly encrypted control connection (this mode is deprecated in modern times, but usually uses port 990) **Default:** false\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the control connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves a file, `path`, from the server. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Sends data to the server to be stored as `path`. `input` can be a ReadableStream, a Buffer, or a path to a local file. `useCompression` defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Same as **put()**, except if `destPath` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 2 parameters: < _Error_ >err, < _string_ >currentDir.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, [< _boolean_ >recursive, ]< _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `recursive` is for enabling a 'mkdir -p' algorithm and defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >OS.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","_id":"ftp@0.2.6","dist":{"shasum":"1c8046ab1b11f28c510b414a7307ddf4839ebb33","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.2.6.tgz"},"scripts":{},"_npmVersion":"1.1.69","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.2.7":{"name":"ftp","version":"0.2.7","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./lib/ftp","engines":{"node":">=0.8.0"},"dependencies":{"xregexp":"2.0.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n\nAPI\n===\n\nEvents\n------\n\n* **greeting**(< _string_ >msg) - Emitted after connection. `msg` is the text the server sent upon connection.\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * secure - _mixed_ - Set to true for both control and data connection encryption, 'control' for control connection encryption only, or 'implicit' for implicitly encrypted control connection (this mode is deprecated in modern times, but usually uses port 990) **Default:** false\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the control connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves a file, `path`, from the server. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Sends data to the server to be stored as `path`. `input` can be a ReadableStream, a Buffer, or a path to a local file. `useCompression` defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Same as **put()**, except if `destPath` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 2 parameters: < _Error_ >err, < _string_ >currentDir. Note: `currentDir` is only given if the server replies with the path in the response text.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, [< _boolean_ >recursive, ]< _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `recursive` is for enabling a 'mkdir -p' algorithm and defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >OS.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","_id":"ftp@0.2.7","dist":{"shasum":"28e36c8c4fbe22c436b41db82c993be7b27c2a93","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.2.7.tgz"},"scripts":{},"_npmVersion":"1.1.69","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.2.8":{"name":"ftp","version":"0.2.8","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./lib/ftp","engines":{"node":">=0.8.0"},"dependencies":{"xregexp":"2.0.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n\nAPI\n===\n\nEvents\n------\n\n* **greeting**(< _string_ >msg) - Emitted after connection. `msg` is the text the server sent upon connection.\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * secure - _mixed_ - Set to true for both control and data connection encryption, 'control' for control connection encryption only, or 'implicit' for implicitly encrypted control connection (this mode is deprecated in modern times, but usually uses port 990) **Default:** false\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the control connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves a file, `path`, from the server. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Sends data to the server to be stored as `path`. `input` can be a ReadableStream, a Buffer, or a path to a local file. `useCompression` defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Same as **put()**, except if `destPath` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 2 parameters: < _Error_ >err, < _string_ >currentDir. Note: `currentDir` is only given if the server replies with the path in the response text.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, [< _boolean_ >recursive, ]< _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `recursive` is for enabling a 'mkdir -p' algorithm and defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >OS.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","_id":"ftp@0.2.8","dist":{"shasum":"4fdff37b95e4e4dce01267e245984c2c7071d7e2","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.2.8.tgz"},"scripts":{},"_npmVersion":"1.1.69","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.2.9":{"name":"ftp","version":"0.2.9","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./lib/ftp","engines":{"node":">=0.8.0"},"dependencies":{"xregexp":"2.0.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n\nAPI\n===\n\nEvents\n------\n\n* **greeting**(< _string_ >msg) - Emitted after connection. `msg` is the text the server sent upon connection.\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * secure - _mixed_ - Set to true for both control and data connection encryption, 'control' for control connection encryption only, or 'implicit' for implicitly encrypted control connection (this mode is deprecated in modern times, but usually uses port 990) **Default:** false\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the control connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves a file, `path`, from the server. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Sends data to the server to be stored as `path`. `input` can be a ReadableStream, a Buffer, or a path to a local file. `useCompression` defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Same as **put()**, except if `destPath` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 2 parameters: < _Error_ >err, < _string_ >currentDir. Note: `currentDir` is only given if the server replies with the path in the response text.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, [< _boolean_ >recursive, ]< _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `recursive` is for enabling a 'mkdir -p' algorithm and defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >OS.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","_id":"ftp@0.2.9","dist":{"shasum":"2817b50552ac45d44eab1eccd1f783a607661e07","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.2.9.tgz"},"_from":"https://github.com/mscdex/node-ftp/tarball/v0.2.9","_resolved":"https://github.com/mscdex/node-ftp/tarball/v0.2.9","scripts":{},"_npmVersion":"1.2.14","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.2.10":{"name":"ftp","version":"0.2.10","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./lib/ftp","engines":{"node":">=0.8.0"},"dependencies":{"xregexp":"2.0.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n\nAPI\n===\n\nEvents\n------\n\n* **greeting**(< _string_ >msg) - Emitted after connection. `msg` is the text the server sent upon connection.\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * secure - _mixed_ - Set to true for both control and data connection encryption, 'control' for control connection encryption only, or 'implicit' for implicitly encrypted control connection (this mode is deprecated in modern times, but usually uses port 990) **Default:** false\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the control connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves a file at `path` from the server. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Sends data to the server to be stored as `destPath`. `input` can be a ReadableStream, a Buffer, or a path to a local file. `useCompression` defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Same as **put()**, except if `destPath` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 2 parameters: < _Error_ >err, < _string_ >currentDir. Note: `currentDir` is only given if the server replies with the path in the response text.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, [< _boolean_ >recursive, ]< _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `recursive` is for enabling a 'mkdir -p' algorithm and defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >OS.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","_id":"ftp@0.2.10","dist":{"shasum":"c43f5f30d3bd253cbd84e2f9b4bf6c7ff34789a1","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.2.10.tgz"},"_from":"https://github.com/mscdex/node-ftp/tarball/v0.2.10","_resolved":"https://github.com/mscdex/node-ftp/tarball/v0.2.10","scripts":{},"_npmVersion":"1.2.14","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.2.11":{"name":"ftp","version":"0.2.11","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./lib/ftp","engines":{"node":">=0.8.0"},"dependencies":{"xregexp":"2.0.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n\nAPI\n===\n\nEvents\n------\n\n* **greeting**(< _string_ >msg) - Emitted after connection. `msg` is the text the server sent upon connection.\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * secure - _mixed_ - Set to true for both control and data connection encryption, 'control' for control connection encryption only, or 'implicit' for implicitly encrypted control connection (this mode is deprecated in modern times, but usually uses port 990) **Default:** false\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the control connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves a file at `path` from the server. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Sends data to the server to be stored as `destPath`. `input` can be a ReadableStream, a Buffer, or a path to a local file. `useCompression` defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Same as **put()**, except if `destPath` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 2 parameters: < _Error_ >err, < _string_ >currentDir. Note: `currentDir` is only given if the server replies with the path in the response text.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, [< _boolean_ >recursive, ]< _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `recursive` is for enabling a 'mkdir -p' algorithm and defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >OS.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","_id":"ftp@0.2.11","dist":{"shasum":"fece823ec2fa290fe45832ba540b2c722886ad05","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.2.11.tgz"},"_from":"https://github.com/mscdex/node-ftp/tarball/v0.2.11","_resolved":"https://github.com/mscdex/node-ftp/tarball/v0.2.11","scripts":{},"_npmVersion":"1.2.14","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.3.0":{"name":"ftp","version":"0.3.0","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./lib/ftp","engines":{"node":">=0.8.0"},"dependencies":{"xregexp":"2.0.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n\nAPI\n===\n\nEvents\n------\n\n* **greeting**(< _string_ >msg) - Emitted after connection. `msg` is the text the server sent upon connection.\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * secure - _mixed_ - Set to true for both control and data connection encryption, 'control' for control connection encryption only, or 'implicit' for implicitly encrypted control connection (this mode is deprecated in modern times, but usually uses port 990) **Default:** false\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the control connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server after any/all enqueued commands have been executed.\n\n* **destroy**() - _(void)_ - Closes the connection to the server immediately.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves a file at `path` from the server. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Sends data to the server to be stored as `destPath`. `input` can be a ReadableStream, a Buffer, or a path to a local file. `useCompression` defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Same as **put()**, except if `destPath` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 2 parameters: < _Error_ >err, < _string_ >currentDir. Note: `currentDir` is only given if the server replies with the path in the response text.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, [< _boolean_ >recursive, ]< _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `recursive` is for enabling a 'mkdir -p' algorithm and defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >OS.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","_id":"ftp@0.3.0","dist":{"shasum":"18071a9459056a75119d6c4d800877d86c98ab2a","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.3.0.tgz"},"_from":"https://github.com/mscdex/node-ftp/tarball/v0.3.0","_resolved":"https://github.com/mscdex/node-ftp/tarball/v0.3.0","scripts":{},"_npmVersion":"1.2.17","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.3.1":{"name":"ftp","version":"0.3.1","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./lib/ftp","engines":{"node":">=0.8.0"},"dependencies":{"xregexp":"2.0.0"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n\nAPI\n===\n\nEvents\n------\n\n* **greeting**(< _string_ >msg) - Emitted after connection. `msg` is the text the server sent upon connection.\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * secure - _mixed_ - Set to true for both control and data connection encryption, 'control' for control connection encryption only, or 'implicit' for implicitly encrypted control connection (this mode is deprecated in modern times, but usually uses port 990) **Default:** false\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the control connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server after any/all enqueued commands have been executed.\n\n* **destroy**() - _(void)_ - Closes the connection to the server immediately.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves a file at `path` from the server. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Sends data to the server to be stored as `destPath`. `input` can be a ReadableStream, a Buffer, or a path to a local file. `useCompression` defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Same as **put()**, except if `destPath` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 2 parameters: < _Error_ >err, < _string_ >currentDir. Note: `currentDir` is only given if the server replies with the path in the response text.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n* **ascii**(< _function_ >callback) - _(void)_ - Sets the transfer data type to ASCII. `callback` has 1 parameter: < _Error_ >err.\n\n* **binary**(< _function_ >callback) - _(void)_ - Sets the transfer data type to binary (default at time of connection). `callback` has 1 parameter: < _Error_ >err.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, [< _boolean_ >recursive, ]< _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `recursive` is for enabling a 'mkdir -p' algorithm and defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >OS.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","_id":"ftp@0.3.1","dist":{"shasum":"e5a61cdd2e61e713f8f9635287c291b65d03fc73","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.3.1.tgz"},"_from":"https://github.com/mscdex/node-ftp/tarball/v0.3.1","_resolved":"https://github.com/mscdex/node-ftp/tarball/v0.3.1","scripts":{},"_npmVersion":"1.2.18","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.3.2":{"name":"ftp","version":"0.3.2","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./lib/connection","engines":{"node":">=0.8.0"},"dependencies":{"xregexp":"2.0.0","readable-stream":"1.0.2"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n\nAPI\n===\n\nEvents\n------\n\n* **greeting**(< _string_ >msg) - Emitted after connection. `msg` is the text the server sent upon connection.\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * secure - _mixed_ - Set to true for both control and data connection encryption, 'control' for control connection encryption only, or 'implicit' for implicitly encrypted control connection (this mode is deprecated in modern times, but usually uses port 990) **Default:** false\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the control connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server after any/all enqueued commands have been executed.\n\n* **destroy**() - _(void)_ - Closes the connection to the server immediately.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves a file at `path` from the server. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Sends data to the server to be stored as `destPath`. `input` can be a ReadableStream, a Buffer, or a path to a local file. `useCompression` defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Same as **put()**, except if `destPath` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 2 parameters: < _Error_ >err, < _string_ >currentDir. Note: `currentDir` is only given if the server replies with the path in the response text.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n* **ascii**(< _function_ >callback) - _(void)_ - Sets the transfer data type to ASCII. `callback` has 1 parameter: < _Error_ >err.\n\n* **binary**(< _function_ >callback) - _(void)_ - Sets the transfer data type to binary (default at time of connection). `callback` has 1 parameter: < _Error_ >err.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, [< _boolean_ >recursive, ]< _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `recursive` is for enabling a 'mkdir -p' algorithm and defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >OS.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mscdex/node-ftp/issues"},"_id":"ftp@0.3.2","dist":{"shasum":"9f45cd7b34eab9fae668e811a0e2f9cbbc631735","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.3.2.tgz"},"_from":"https://github.com/mscdex/node-ftp/tarball/v0.3.2","_resolved":"https://github.com/mscdex/node-ftp/tarball/v0.3.2","scripts":{},"_npmVersion":"1.3.2","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.3.3":{"name":"ftp","version":"0.3.3","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./lib/connection","engines":{"node":">=0.8.0"},"dependencies":{"xregexp":"2.0.0","readable-stream":"1.0.2"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var FTPClient = require('ftp');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var FTPClient = require('ftp');\n  var fs = require('fs');\n\n  var c = new FTPClient();\n  c.on('ready', function() {\n    c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n\nAPI\n===\n\nEvents\n------\n\n* **greeting**(< _string_ >msg) - Emitted after connection. `msg` is the text the server sent upon connection.\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * secure - _mixed_ - Set to true for both control and data connection encryption, 'control' for control connection encryption only, or 'implicit' for implicitly encrypted control connection (this mode is deprecated in modern times, but usually uses port 990) **Default:** false\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the control connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server after any/all enqueued commands have been executed.\n\n* **destroy**() - _(void)_ - Closes the connection to the server immediately.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves a file at `path` from the server. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Sends data to the server to be stored as `destPath`. `input` can be a ReadableStream, a Buffer, or a path to a local file. `useCompression` defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Same as **put()**, except if `destPath` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 2 parameters: < _Error_ >err, < _string_ >currentDir. Note: `currentDir` is only given if the server replies with the path in the response text.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n* **ascii**(< _function_ >callback) - _(void)_ - Sets the transfer data type to ASCII. `callback` has 1 parameter: < _Error_ >err.\n\n* **binary**(< _function_ >callback) - _(void)_ - Sets the transfer data type to binary (default at time of connection). `callback` has 1 parameter: < _Error_ >err.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, [< _boolean_ >recursive, ]< _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `recursive` is for enabling a 'mkdir -p' algorithm and defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >OS.\n\n* **listSafe**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Similar to list(), except the directory is temporarily changed to `path` to retrieve the directory listing. This is useful for servers that do not handle characters like spaces and quotes in directory names well for the LIST command. This function is \"optional\" because it relies on pwd() being available.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mscdex/node-ftp/issues"},"_id":"ftp@0.3.3","dist":{"shasum":"907a8d7e76abb332dd9d0ca801c12e390570bd2a","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.3.3.tgz"},"_from":"https://github.com/mscdex/node-ftp/tarball/v0.3.3","_resolved":"https://github.com/mscdex/node-ftp/tarball/v0.3.3","scripts":{},"_npmVersion":"1.3.5","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.3.4":{"name":"ftp","version":"0.3.4","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./lib/connection","engines":{"node":">=0.8.0"},"dependencies":{"xregexp":"2.0.0","readable-stream":"1.0.2"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var Client = require('ftp');\n\n  var c = new Client();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var Client = require('ftp');\n  var fs = require('fs');\n\n  var c = new Client();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var Client = require('ftp');\n  var fs = require('fs');\n\n  var c = new Client();\n  c.on('ready', function() {\n    c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n\nAPI\n===\n\nEvents\n------\n\n* **greeting**(< _string_ >msg) - Emitted after connection. `msg` is the text the server sent upon connection.\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * secure - _mixed_ - Set to true for both control and data connection encryption, 'control' for control connection encryption only, or 'implicit' for implicitly encrypted control connection (this mode is deprecated in modern times, but usually uses port 990) **Default:** false\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the control connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server after any/all enqueued commands have been executed.\n\n* **destroy**() - _(void)_ - Closes the connection to the server immediately.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves a file at `path` from the server. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Sends data to the server to be stored as `destPath`. `input` can be a ReadableStream, a Buffer, or a path to a local file. `useCompression` defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Same as **put()**, except if `destPath` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 2 parameters: < _Error_ >err, < _string_ >currentDir. Note: `currentDir` is only given if the server replies with the path in the response text.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **site**(< _string_ >command, < _function_ >callback) - _(void)_ - Sends `command` (e.g. 'CHMOD 755 foo', 'QUOTA') using SITE. `callback` has 3 parameters: < _Error_ >err, < _string >responseText, < _integer_ >responseCode.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n* **ascii**(< _function_ >callback) - _(void)_ - Sets the transfer data type to ASCII. `callback` has 1 parameter: < _Error_ >err.\n\n* **binary**(< _function_ >callback) - _(void)_ - Sets the transfer data type to binary (default at time of connection). `callback` has 1 parameter: < _Error_ >err.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, [< _boolean_ >recursive, ]< _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `recursive` is for enabling a 'mkdir -p' algorithm and defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >OS.\n\n* **listSafe**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Similar to list(), except the directory is temporarily changed to `path` to retrieve the directory listing. This is useful for servers that do not handle characters like spaces and quotes in directory names well for the LIST command. This function is \"optional\" because it relies on pwd() being available.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mscdex/node-ftp/issues"},"_id":"ftp@0.3.4","dist":{"shasum":"180e4201a31174807bfb8e04058f8508cedaafe1","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.3.4.tgz"},"_from":"https://github.com/mscdex/node-ftp/tarball/v0.3.4","_resolved":"https://github.com/mscdex/node-ftp/tarball/v0.3.4","scripts":{},"_npmVersion":"1.3.5","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.3.5":{"name":"ftp","version":"0.3.5","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./lib/connection","engines":{"node":">=0.8.0"},"dependencies":{"xregexp":"2.0.0","readable-stream":"1.1.x"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var Client = require('ftp');\n\n  var c = new Client();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var Client = require('ftp');\n  var fs = require('fs');\n\n  var c = new Client();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var Client = require('ftp');\n  var fs = require('fs');\n\n  var c = new Client();\n  c.on('ready', function() {\n    c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n\nAPI\n===\n\nEvents\n------\n\n* **greeting**(< _string_ >msg) - Emitted after connection. `msg` is the text the server sent upon connection.\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * secure - _mixed_ - Set to true for both control and data connection encryption, 'control' for control connection encryption only, or 'implicit' for implicitly encrypted control connection (this mode is deprecated in modern times, but usually uses port 990) **Default:** false\n\n    * secureOptions - _object_ - Additional options to be passed to `tls.connect()`. **Default:** (none)\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the control connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server after any/all enqueued commands have been executed.\n\n* **destroy**() - _(void)_ - Closes the connection to the server immediately.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves a file at `path` from the server. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Sends data to the server to be stored as `destPath`. `input` can be a ReadableStream, a Buffer, or a path to a local file. `useCompression` defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Same as **put()**, except if `destPath` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 2 parameters: < _Error_ >err, < _string_ >currentDir. Note: `currentDir` is only given if the server replies with the path in the response text.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **site**(< _string_ >command, < _function_ >callback) - _(void)_ - Sends `command` (e.g. 'CHMOD 755 foo', 'QUOTA') using SITE. `callback` has 3 parameters: < _Error_ >err, < _string >responseText, < _integer_ >responseCode.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n* **ascii**(< _function_ >callback) - _(void)_ - Sets the transfer data type to ASCII. `callback` has 1 parameter: < _Error_ >err.\n\n* **binary**(< _function_ >callback) - _(void)_ - Sets the transfer data type to binary (default at time of connection). `callback` has 1 parameter: < _Error_ >err.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, [< _boolean_ >recursive, ]< _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `recursive` is for enabling a 'mkdir -p' algorithm and defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >OS.\n\n* **listSafe**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Similar to list(), except the directory is temporarily changed to `path` to retrieve the directory listing. This is useful for servers that do not handle characters like spaces and quotes in directory names well for the LIST command. This function is \"optional\" because it relies on pwd() being available.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mscdex/node-ftp/issues"},"_id":"ftp@0.3.5","dist":{"shasum":"dcf7bc99f423f1a75db728160ed4f6b745ccfdd3","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.3.5.tgz"},"_from":"https://github.com/mscdex/node-ftp/tarball/v0.3.5","_resolved":"https://github.com/mscdex/node-ftp/tarball/v0.3.5","scripts":{},"_npmVersion":"1.3.11","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}},"0.3.6":{"name":"ftp","version":"0.3.6","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"An FTP client module for node.js","main":"./lib/connection","engines":{"node":">=0.8.0"},"dependencies":{"xregexp":"2.0.0","readable-stream":"1.1.x"},"keywords":["ftp","client","transfer"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/node-ftp/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"readme":"Description\n===========\n\nnode-ftp is an FTP client module for [node.js](http://nodejs.org/) that provides an asynchronous interface for communicating with an FTP server.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n\n\nInstall\n=======\n\n    npm install ftp\n\n\nExamples\n========\n\n* Get a directory listing of the current (remote) working directory:\n\n```javascript\n  var Client = require('ftp');\n\n  var c = new Client();\n  c.on('ready', function() {\n    c.list(function(err, list) {\n      if (err) throw err;\n      console.dir(list);\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Download remote file 'foo.txt' and save it to the local file system:\n\n```javascript\n  var Client = require('ftp');\n  var fs = require('fs');\n\n  var c = new Client();\n  c.on('ready', function() {\n    c.get('foo.txt', function(err, stream) {\n      if (err) throw err;\n      stream.once('close', function() { c.end(); });\n      stream.pipe(fs.createWriteStream('foo.local-copy.txt'));\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n* Upload local file 'foo.txt' to the server:\n\n```javascript\n  var Client = require('ftp');\n  var fs = require('fs');\n\n  var c = new Client();\n  c.on('ready', function() {\n    c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n      if (err) throw err;\n      c.end();\n    });\n  });\n  // connect to localhost:21 as anonymous\n  c.connect();\n```\n\n\nAPI\n===\n\nEvents\n------\n\n* **greeting**(< _string_ >msg) - Emitted after connection. `msg` is the text the server sent upon connection.\n\n* **ready**() - Emitted when connection and authentication were sucessful.\n\n* **close**(< _boolean_ >hadErr) - Emitted when the connection has fully closed.\n\n* **end**() - Emitted when the connection has ended.\n\n* **error**(< _Error_ >err) - Emitted when an error occurs. In case of protocol-level errors, `err` contains a 'code' property that references the related 3-digit FTP response code.\n\n\nMethods\n-------\n\n**\\* Note: As with the 'error' event, any error objects passed to callbacks will have a 'code' property for protocol-level errors.**\n\n* **(constructor)**() - Creates and returns a new FTP client instance.\n\n* **connect**(< _object_ >config) - _(void)_ - Connects to an FTP server. Valid config properties:\n\n    * host - _string_ - The hostname or IP address of the FTP server. **Default:** 'localhost'\n\n    * port - _integer_ - The port of the FTP server. **Default:** 21\n\n    * secure - _mixed_ - Set to true for both control and data connection encryption, 'control' for control connection encryption only, or 'implicit' for implicitly encrypted control connection (this mode is deprecated in modern times, but usually uses port 990) **Default:** false\n\n    * secureOptions - _object_ - Additional options to be passed to `tls.connect()`. **Default:** (none)\n\n    * user - _string_ - Username for authentication. **Default:** 'anonymous'\n\n    * password - _string_ - Password for authentication. **Default:** 'anonymous@'\n\n    * connTimeout - _integer_ - How long (in milliseconds) to wait for the control connection to be established. **Default:** 10000\n\n    * pasvTimeout - _integer_ - How long (in milliseconds) to wait for a PASV data connection to be established. **Default:** 10000\n\n    * keepalive - _integer_ - How often (in milliseconds) to send a 'dummy' (NOOP) command to keep the connection alive. **Default:** 10000\n\n* **end**() - _(void)_ - Closes the connection to the server after any/all enqueued commands have been executed.\n\n* **destroy**() - _(void)_ - Closes the connection to the server immediately.\n\n### Required \"standard\" commands (RFC 959)\n\n* **list**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves the directory listing of `path`. `path` defaults to the current working directory. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _array_ >list. `list` is an array of objects with these properties:\n\n      * type - _string_ - A single character denoting the entry type: 'd' for directory, '-' for file (or 'l' for symlink on **\\*NIX only**).\n\n      * name - _string_ - The name of the entry.\n\n      * size - _string_ - The size of the entry in bytes.\n\n      * date - _Date_ - The last modified date of the entry.\n\n      * rights - _object_ - The various permissions for this entry **(*NIX only)**.\n\n          * user - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * group - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n\n          * other - _string_ - An empty string or any combination of 'r', 'w', 'x'.\n     \n      * owner - _string_ - The user name or ID that this entry belongs to **(*NIX only)**.\n\n      * group - _string_ - The group name or ID that this entry belongs to **(*NIX only)**.\n\n      * target - _string_ - For symlink entries, this is the symlink's target **(*NIX only)**.\n\n* **get**(< _string_ >path, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Retrieves a file at `path` from the server. `useCompression` defaults to false. `callback` has 2 parameters: < _Error_ >err, < _ReadableStream_ >fileStream.\n\n* **put**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Sends data to the server to be stored as `destPath`. `input` can be a ReadableStream, a Buffer, or a path to a local file. `useCompression` defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **append**(< _mixed_ >input, < _string_ >destPath, [< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Same as **put()**, except if `destPath` already exists, it will be appended to instead of overwritten.\n\n* **rename**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - _(void)_ - Renames `oldPath` to `newPath` on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **delete**(< _string_ >path, < _function_ >callback) - _(void)_ - Deletes a file, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cwd**(< _string_ >path, < _function_ >callback) - _(void)_ - Changes the current working directory to `path`. `callback` has 2 parameters: < _Error_ >err, < _string_ >currentDir. Note: `currentDir` is only given if the server replies with the path in the response text.\n\n* **abort**(< _function_ >callback) - _(void)_ - Aborts the current data transfer (e.g. from get(), put(), or list()). `callback` has 1 parameter: < _Error_ >err.\n\n* **site**(< _string_ >command, < _function_ >callback) - _(void)_ - Sends `command` (e.g. 'CHMOD 755 foo', 'QUOTA') using SITE. `callback` has 3 parameters: < _Error_ >err, < _string >responseText, < _integer_ >responseCode.\n\n* **status**(< _function_ >callback) - _(void)_ - Retrieves human-readable information about the server's status. `callback` has 2 parameters: < _Error_ >err, < _string_ >status.\n\n* **ascii**(< _function_ >callback) - _(void)_ - Sets the transfer data type to ASCII. `callback` has 1 parameter: < _Error_ >err.\n\n* **binary**(< _function_ >callback) - _(void)_ - Sets the transfer data type to binary (default at time of connection). `callback` has 1 parameter: < _Error_ >err.\n\n### Optional \"standard\" commands (RFC 959)\n\n* **mkdir**(< _string_ >path, [< _boolean_ >recursive, ]< _function_ >callback) - _(void)_ - Creates a new directory, `path`, on the server. `recursive` is for enabling a 'mkdir -p' algorithm and defaults to false. `callback` has 1 parameter: < _Error_ >err.\n\n* **rmdir**(< _string_ >path, < _function_ >callback) - _(void)_ - Removes a directory, `path`, on the server. `callback` has 1 parameter: < _Error_ >err.\n\n* **cdup**(< _function_ >callback) - _(void)_ - Changes the working directory to the parent of the current directory. `callback` has 1 parameter: < _Error_ >err.\n\n* **pwd**(< _function_ >callback) - _(void)_ - Retrieves the current working directory. `callback` has 2 parameters: < _Error_ >err, < _string_ >cwd.\n\n* **system**(< _function_ >callback) - _(void)_ - Retrieves the server's operating system. `callback` has 2 parameters: < _Error_ >err, < _string_ >OS.\n\n* **listSafe**([< _string_ >path, ][< _boolean_ >useCompression, ]< _function_ >callback) - _(void)_ - Similar to list(), except the directory is temporarily changed to `path` to retrieve the directory listing. This is useful for servers that do not handle characters like spaces and quotes in directory names well for the LIST command. This function is \"optional\" because it relies on pwd() being available.\n\n### Extended commands (RFC 3659)\n\n* **size**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the size of `path`. `callback` has 2 parameters: < _Error_ >err, < _integer_ >numBytes.\n\n* **lastMod**(< _string_ >path, < _function_ >callback) - _(void)_ - Retrieves the last modified date and time for `path`. `callback` has 2 parameters: < _Error_ >err, < _Date_ >lastModified.\n\n* **restart**(< _integer_ >byteOffset, < _function_ >callback) - _(void)_ - Sets the file byte offset for the next file transfer action (get/put) to `byteOffset`. `callback` has 1 parameter: < _Error_ >err.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/mscdex/node-ftp/issues"},"homepage":"https://github.com/mscdex/node-ftp","_id":"ftp@0.3.6","dist":{"shasum":"144db4965d4e557454f742684b7d551cde4c3dff","tarball":"http://registry.npmjs.org/ftp/-/ftp-0.3.6.tgz"},"_from":"https://github.com/mscdex/node-ftp/tarball/v0.3.6","_resolved":"https://github.com/mscdex/node-ftp/tarball/v0.3.6","scripts":{},"_npmVersion":"1.3.14","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"directories":{}}},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"time":{"modified":"2014-01-09T18:45:52.082Z","created":"2011-04-10T04:37:58.230Z","0.1.0":"2011-04-10T04:37:58.603Z","0.1.1":"2011-04-17T18:29:06.753Z","0.1.2":"2012-03-28T04:25:39.561Z","0.1.3":"2012-07-07T14:09:44.896Z","0.1.4":"2012-08-29T23:35:01.916Z","0.1.5":"2012-09-06T14:45:30.375Z","0.1.6":"2012-09-10T22:57:44.703Z","0.1.7":"2012-09-17T20:21:05.834Z","0.2.0":"2012-12-16T17:01:09.286Z","0.2.5":"2012-12-18T03:24:54.581Z","0.2.6":"2012-12-18T08:10:38.305Z","0.2.7":"2012-12-18T23:17:04.117Z","0.2.8":"2012-12-31T06:28:35.040Z","0.2.9":"2013-03-08T16:58:02.943Z","0.2.10":"2013-03-11T15:32:11.191Z","0.2.11":"2013-03-15T17:20:31.448Z","0.3.0":"2013-04-06T20:14:58.724Z","0.3.1":"2013-04-15T10:17:01.407Z","0.3.2":"2013-07-13T16:23:24.442Z","0.3.3":"2013-08-01T23:11:40.240Z","0.3.4":"2013-08-10T13:45:24.473Z","0.3.5":"2013-11-14T05:39:11.817Z","0.3.6":"2014-01-09T18:45:52.082Z"},"author":{"name":"Brian White","email":"mscdex@mscdex.net"},"repository":{"type":"git","url":"http://github.com/mscdex/node-ftp.git"},"users":{"tokuhirom":true,"maxgfeller":true},"_attachments":{},"_etag":"\"DQP0X909GAZ40MFFIZ0DLOZIW\""}