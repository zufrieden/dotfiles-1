{"_id":"encoding","_rev":"15-96152301e23f6c49285afec5ffe8dc99","name":"encoding","description":"Convert encodings, uses iconv by default and fallbacks to iconv-lite if needed","dist-tags":{"latest":"0.1.7"},"versions":{"0.1.1":{"name":"encoding","version":"0.1.1","description":"Remove accents from international characters","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git://github.com/andris9/encoding.git"},"author":{"name":"Andris Reinman"},"license":"MIT","dependencies":{"iconv-lite":"*","iconv":"*"},"optionalDependencies":{"iconv":"*"},"readme":"# Encoding\n\n**encoding** is a simple wrapper around [node-iconv](https://github.com/bnoordhuis/node-iconv) and [iconv-lite](https://github.com/ashtuchkin/iconv-lite/) to convert strings from one encoding to another. If node-iconv is not available for some reason,\niconv-lite will be used instead of it as a fallback.\n\n## Install\n\nInstall through npm\n\n    npm install encoding\n\n## Usage\n\nRequire the module\n\n    var encoding = require(\"encoding\");\n\nConvert with encoding.convert()\n\n    var resultBuffer = encoding.convert(text, toCharset, fromCharset);\n\nWhere\n\n  * **text** is either a Buffer or a String to be converted\n  * **toCharset** is the characterset to convert the string\n  * **fromCharset** (*optional*, defaults to UTF-8) is the source charset\n\nOutput of the conversion is always a Buffer object.\n\nExample\n\n    var result = encoding.convert(\"ÕÄÖÜ\", \"Latin_1\");\n    console.log(result); //<Buffer d5 c4 d6 dc>\n  \n## License\n\n**MIT**","_id":"encoding@0.1.1","dist":{"shasum":"f5dfa57009a0f81ce63c966b9cdb4f12a3f14e05","tarball":"http://registry.npmjs.org/encoding/-/encoding-0.1.1.tgz"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}},"0.1.2":{"name":"encoding","version":"0.1.2","description":"Remove accents from international characters","main":"index.js","scripts":{"test":"nodeunit test.js"},"repository":{"type":"git","url":"git://github.com/andris9/encoding.git"},"author":{"name":"Andris Reinman"},"license":"MIT","dependencies":{"iconv-lite":"*","iconv":"*"},"optionalDependencies":{"iconv":"*"},"devDependencies":{"nodeunit":"*"},"readme":"# Encoding\n\n**encoding** is a simple wrapper around [node-iconv](https://github.com/bnoordhuis/node-iconv) and [iconv-lite](https://github.com/ashtuchkin/iconv-lite/) to convert strings from one encoding to another. If node-iconv is not available for some reason,\niconv-lite will be used instead of it as a fallback.\n\n## Install\n\nInstall through npm\n\n    npm install encoding\n\n## Usage\n\nRequire the module\n\n    var encoding = require(\"encoding\");\n\nConvert with encoding.convert()\n\n    var resultBuffer = encoding.convert(text, toCharset, fromCharset);\n\nWhere\n\n  * **text** is either a Buffer or a String to be converted\n  * **toCharset** is the characterset to convert the string\n  * **fromCharset** (*optional*, defaults to UTF-8) is the source charset\n\nOutput of the conversion is always a Buffer object.\n\nExample\n\n    var result = encoding.convert(\"ÕÄÖÜ\", \"Latin_1\");\n    console.log(result); //<Buffer d5 c4 d6 dc>\n  \n## License\n\n**MIT**","_id":"encoding@0.1.2","dist":{"shasum":"6827a60632997ed27001d805dcdd2b925de9a913","tarball":"http://registry.npmjs.org/encoding/-/encoding-0.1.2.tgz"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}},"0.1.3":{"name":"encoding","version":"0.1.3","description":"Remove accents from international characters","main":"index.js","scripts":{"test":"nodeunit test.js"},"repository":{"type":"git","url":"git://github.com/andris9/encoding.git"},"author":{"name":"Andris Reinman"},"license":"MIT","dependencies":{"iconv-lite":"*","iconv":"*"},"optionalDependencies":{"iconv":"*"},"devDependencies":{"nodeunit":"*"},"readme":"# Encoding\n\n**encoding** is a simple wrapper around [node-iconv](https://github.com/bnoordhuis/node-iconv) and [iconv-lite](https://github.com/ashtuchkin/iconv-lite/) to convert strings from one encoding to another. If node-iconv is not available for some reason,\niconv-lite will be used instead of it as a fallback.\n\n## Install\n\nInstall through npm\n\n    npm install encoding\n\n## Usage\n\nRequire the module\n\n    var encoding = require(\"encoding\");\n\nConvert with encoding.convert()\n\n    var resultBuffer = encoding.convert(text, toCharset, fromCharset);\n\nWhere\n\n  * **text** is either a Buffer or a String to be converted\n  * **toCharset** is the characterset to convert the string\n  * **fromCharset** (*optional*, defaults to UTF-8) is the source charset\n\nOutput of the conversion is always a Buffer object.\n\nExample\n\n    var result = encoding.convert(\"ÕÄÖÜ\", \"Latin_1\");\n    console.log(result); //<Buffer d5 c4 d6 dc>\n  \n## License\n\n**MIT**","_id":"encoding@0.1.3","dist":{"shasum":"0fdde7af970a729afe948227f174f3f79f524cd7","tarball":"http://registry.npmjs.org/encoding/-/encoding-0.1.3.tgz"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}},"0.1.4":{"name":"encoding","version":"0.1.4","description":"Remove accents from international characters","main":"index.js","scripts":{"test":"nodeunit test.js"},"repository":{"type":"git","url":"git://github.com/andris9/encoding.git"},"author":{"name":"Andris Reinman"},"license":"MIT","dependencies":{"iconv-lite":"*","iconv":"*"},"optionalDependencies":{"iconv":"*"},"devDependencies":{"nodeunit":"*"},"readme":"# Encoding\n\n**encoding** is a simple wrapper around [node-iconv](https://github.com/bnoordhuis/node-iconv) and [iconv-lite](https://github.com/ashtuchkin/iconv-lite/) to convert strings from one encoding to another. If node-iconv is not available for some reason,\niconv-lite will be used instead of it as a fallback.\n\n## Install\n\nInstall through npm\n\n    npm install encoding\n\n## Usage\n\nRequire the module\n\n    var encoding = require(\"encoding\");\n\nConvert with encoding.convert()\n\n    var resultBuffer = encoding.convert(text, toCharset, fromCharset);\n\nWhere\n\n  * **text** is either a Buffer or a String to be converted\n  * **toCharset** is the characterset to convert the string\n  * **fromCharset** (*optional*, defaults to UTF-8) is the source charset\n\nOutput of the conversion is always a Buffer object.\n\nExample\n\n    var result = encoding.convert(\"ÕÄÖÜ\", \"Latin_1\");\n    console.log(result); //<Buffer d5 c4 d6 dc>\n  \n## License\n\n**MIT**","_id":"encoding@0.1.4","dist":{"shasum":"dcd860c75975259d4159c840153d6ccdf82b899e","tarball":"http://registry.npmjs.org/encoding/-/encoding-0.1.4.tgz"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}},"0.1.5":{"name":"encoding","version":"0.1.5","description":"Convert encodings, uses iconv by default and fallbacks to iconv-lite if needed","main":"index.js","scripts":{"test":"nodeunit test.js"},"repository":{"type":"git","url":"git://github.com/andris9/encoding.git"},"author":{"name":"Andris Reinman"},"license":"MIT","dependencies":{"iconv-lite":"*"},"devDependencies":{"nodeunit":"*"},"readme":"# Encoding\n\n**encoding** is a simple wrapper around [node-iconv](https://github.com/bnoordhuis/node-iconv) and [iconv-lite](https://github.com/ashtuchkin/iconv-lite/) to convert strings from one encoding to another. If node-iconv is not available for some reason,\niconv-lite will be used instead of it as a fallback.\n\n## Install\n\nInstall through npm\n\n    npm install encoding\n\n## Usage\n\nRequire the module\n\n    var encoding = require(\"encoding\");\n\nConvert with encoding.convert()\n\n    var resultBuffer = encoding.convert(text, toCharset, fromCharset);\n\nWhere\n\n  * **text** is either a Buffer or a String to be converted\n  * **toCharset** is the characterset to convert the string\n  * **fromCharset** (*optional*, defaults to UTF-8) is the source charset\n\nOutput of the conversion is always a Buffer object.\n\nExample\n\n    var result = encoding.convert(\"ÕÄÖÜ\", \"Latin_1\");\n    console.log(result); //<Buffer d5 c4 d6 dc>\n\n## iconv support\n\nBy default only iconv-lite is bundled. If you need node-iconv support, you need to add it\nas an additional dependency for your project:\n\n    ...,\n    \"dependencies\":{\n        \"encoding\": \"*\",\n        \"iconv\": \"*\"\n    },\n    ...\n\n## License\n\n**MIT**","_id":"encoding@0.1.5","dist":{"shasum":"3900ac48e4eb6b2885efe050fe74883287b7f33e","tarball":"http://registry.npmjs.org/encoding/-/encoding-0.1.5.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"andris","email":"andris@node.ee"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}},"0.1.6":{"name":"encoding","version":"0.1.6","description":"Convert encodings, uses iconv by default and fallbacks to iconv-lite if needed","main":"index.js","scripts":{"test":"nodeunit test.js"},"repository":{"type":"git","url":"git://github.com/andris9/encoding.git"},"author":{"name":"Andris Reinman"},"license":"MIT","dependencies":{"iconv-lite":"0.2.7"},"devDependencies":{"nodeunit":"*"},"readme":"# Encoding\n\n**encoding** is a simple wrapper around [node-iconv](https://github.com/bnoordhuis/node-iconv) and [iconv-lite](https://github.com/ashtuchkin/iconv-lite/) to convert strings from one encoding to another. If node-iconv is not available for some reason,\niconv-lite will be used instead of it as a fallback.\n\n## Install\n\nInstall through npm\n\n    npm install encoding\n\n## Usage\n\nRequire the module\n\n    var encoding = require(\"encoding\");\n\nConvert with encoding.convert()\n\n    var resultBuffer = encoding.convert(text, toCharset, fromCharset);\n\nWhere\n\n  * **text** is either a Buffer or a String to be converted\n  * **toCharset** is the characterset to convert the string\n  * **fromCharset** (*optional*, defaults to UTF-8) is the source charset\n\nOutput of the conversion is always a Buffer object.\n\nExample\n\n    var result = encoding.convert(\"ÕÄÖÜ\", \"Latin_1\");\n    console.log(result); //<Buffer d5 c4 d6 dc>\n\n## iconv support\n\nBy default only iconv-lite is bundled. If you need node-iconv support, you need to add it\nas an additional dependency for your project:\n\n    ...,\n    \"dependencies\":{\n        \"encoding\": \"*\",\n        \"iconv\": \"*\"\n    },\n    ...\n\n## License\n\n**MIT**","readmeFilename":"README.md","_id":"encoding@0.1.6","dist":{"shasum":"fec66b6d1c6b8cc554aa78c05ece35bef11a913f","tarball":"http://registry.npmjs.org/encoding/-/encoding-0.1.6.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"andris","email":"andris@node.ee"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}},"0.1.7":{"name":"encoding","version":"0.1.7","description":"Convert encodings, uses iconv by default and fallbacks to iconv-lite if needed","main":"index.js","scripts":{"test":"nodeunit test.js"},"repository":{"type":"git","url":"https://github.com/andris9/encoding.git"},"author":{"name":"Andris Reinman"},"license":"MIT","dependencies":{"iconv-lite":"~0.2.11"},"devDependencies":{"nodeunit":"~0.8.1"},"readme":"# Encoding\n\n**encoding** is a simple wrapper around [node-iconv](https://github.com/bnoordhuis/node-iconv) and [iconv-lite](https://github.com/ashtuchkin/iconv-lite/) to convert strings from one encoding to another. If node-iconv is not available for some reason,\niconv-lite will be used instead of it as a fallback.\n\n## Install\n\nInstall through npm\n\n    npm install encoding\n\n## Usage\n\nRequire the module\n\n    var encoding = require(\"encoding\");\n\nConvert with encoding.convert()\n\n    var resultBuffer = encoding.convert(text, toCharset, fromCharset);\n\nWhere\n\n  * **text** is either a Buffer or a String to be converted\n  * **toCharset** is the characterset to convert the string\n  * **fromCharset** (*optional*, defaults to UTF-8) is the source charset\n\nOutput of the conversion is always a Buffer object.\n\nExample\n\n    var result = encoding.convert(\"ÕÄÖÜ\", \"Latin_1\");\n    console.log(result); //<Buffer d5 c4 d6 dc>\n\n## iconv support\n\nBy default only iconv-lite is bundled. If you need node-iconv support, you need to add it\nas an additional dependency for your project:\n\n    ...,\n    \"dependencies\":{\n        \"encoding\": \"*\",\n        \"iconv\": \"*\"\n    },\n    ...\n\n## License\n\n**MIT**","readmeFilename":"README.md","_id":"encoding@0.1.7","dist":{"shasum":"25cc19b34e9225d120c2ea769f9136c91cecc908","tarball":"http://registry.npmjs.org/encoding/-/encoding-0.1.7.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"andris","email":"andris@node.ee"},"maintainers":[{"name":"andris","email":"andris@node.ee"}],"directories":{}}},"readme":"# Encoding\n\n**encoding** is a simple wrapper around [node-iconv](https://github.com/bnoordhuis/node-iconv) and [iconv-lite](https://github.com/ashtuchkin/iconv-lite/) to convert strings from one encoding to another. If node-iconv is not available for some reason,\niconv-lite will be used instead of it as a fallback.\n\n## Install\n\nInstall through npm\n\n    npm install encoding\n\n## Usage\n\nRequire the module\n\n    var encoding = require(\"encoding\");\n\nConvert with encoding.convert()\n\n    var resultBuffer = encoding.convert(text, toCharset, fromCharset);\n\nWhere\n\n  * **text** is either a Buffer or a String to be converted\n  * **toCharset** is the characterset to convert the string\n  * **fromCharset** (*optional*, defaults to UTF-8) is the source charset\n\nOutput of the conversion is always a Buffer object.\n\nExample\n\n    var result = encoding.convert(\"ÕÄÖÜ\", \"Latin_1\");\n    console.log(result); //<Buffer d5 c4 d6 dc>\n  \n## License\n\n**MIT**","maintainers":[{"name":"andris","email":"andris@node.ee"}],"time":{"0.1.1":"2012-08-16T08:36:05.770Z","0.1.2":"2012-08-16T08:48:07.540Z","0.1.3":"2012-09-04T09:56:33.049Z","0.1.4":"2012-09-14T13:13:45.852Z","0.1.5":"2012-11-07T09:24:38.001Z","0.1.6":"2013-03-23T06:20:47.925Z","0.1.7":"2013-09-03T10:45:22.834Z"},"author":{"name":"Andris Reinman"},"repository":{"type":"git","url":"https://github.com/andris9/encoding.git"},"_attachments":{},"_etag":"\"81LI2EL25SI6O86QQU23GUURS\""}