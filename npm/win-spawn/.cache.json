{"_id":"win-spawn","_rev":"21-aa96907c37518fb87d2d62afab8f6959","name":"win-spawn","description":"Spawn for node.js but in a way that works regardless of which OS you're using","dist-tags":{"latest":"2.0.0"},"versions":{"0.0.0":{"name":"win-spawn","version":"0.0.0","description":"Spawn for node.js but in a way that works regardless of which OS you're using","main":"index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/ForbesLindesay/win-spawn.git"},"author":"","license":"BSD","readme":"win-spawn\r\n=========\r\n\r\nSpawn for node.js but in a way that works regardless of which OS you're using","_id":"win-spawn@0.0.0","dist":{"shasum":"f025bea565ddcff21c7fa4aa8f9396578f3b4d81","tarball":"http://registry.npmjs.org/win-spawn/-/win-spawn-0.0.0.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"forbes","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbes","email":"forbes@lindesay.co.uk"}],"directories":{}},"1.0.1":{"name":"win-spawn","version":"1.0.1","description":"Spawn for node.js but in a way that works regardless of which OS you're using","main":"index.js","repository":{"type":"git","url":"https://github.com/ForbesLindesay/win-spawn.git"},"bin":{"win-spawn":"./bin/win-spawn","win-fork":"./bin/win-spawn"},"author":{"name":"ForbesLindesay"},"license":"BSD","readme":"win-spawn\r\n=========\r\n\r\nSpawn for node.js but in a way that works regardless of which OS you're using.  Use this if you want to use spawn with a JavaScript file.  It works by explicitly invoking node on windows.","readmeFilename":"README.md","_id":"win-spawn@1.0.1","dist":{"shasum":"bc2842f868fbd937d2897a18e170613a4b11a5b3","tarball":"http://registry.npmjs.org/win-spawn/-/win-spawn-1.0.1.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"1.0.2":{"name":"win-spawn","version":"1.0.2","description":"Spawn for node.js but in a way that works regardless of which OS you're using","main":"index.js","repository":{"type":"git","url":"https://github.com/ForbesLindesay/win-spawn.git"},"bin":{"win-spawn":"./bin/win-spawn","win-fork":"./bin/win-spawn"},"author":{"name":"ForbesLindesay"},"license":"BSD","readme":"# win-spawn\r\n\r\n  Spawn for node.js but in a way that works regardless of which OS you're using.  Use this if you want to use spawn with a JavaScript file.  It works by explicitly invoking node on windows.  It also shims support for environment variable setting by attempting to parse the command with a regex.  Since all modification is wrapped in `if (os === 'Windows_NT')` it can be safely used on non-windows systems and will not break anything.\r\n\r\n## Installation\r\n\r\n  $ npm install win-spawn\r\n\r\n## Usage\r\n\r\n### Command Line\r\n\r\n  All the following will work exactly as if the 'win-spawn ' prefix was ommitted when on unix.\r\n\r\n    $ win-spawn foo\r\n    $ win-spawn ./bin/foo\r\n    $ win-spawn NODE_PATH=./lib foo\r\n    $ win-spawn NODE_PATH=./lib foo arg1 arg2\r\n\r\n### API\r\n\r\nThis will just pass through to `child_process.spawn` on unix systems, but will correctly parse the arguments on windows.\r\n\r\n```javascript\r\nspawn('foo', [], {stdio: 'inherit'});\r\nspawn('./bin/foo', [], {stdio: 'inherit'});\r\nspawn('NODE_PATH=./lib foo', [], {stdio: 'inherit'});\r\nspawn('NODE_PATH=./lib foo', [arg1, arg2], {stdio: 'inherit'});\r\n```","readmeFilename":"README.md","_id":"win-spawn@1.0.2","dist":{"shasum":"3e46876832992e8a08e3e5955a5140def3e5e9bb","tarball":"http://registry.npmjs.org/win-spawn/-/win-spawn-1.0.2.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"1.1.0":{"name":"win-spawn","version":"1.1.0","description":"Spawn for node.js but in a way that works regardless of which OS you're using","main":"index.js","repository":{"type":"git","url":"https://github.com/ForbesLindesay/win-spawn.git"},"bin":{"win-spawn":"./bin/win-spawn","win-fork":"./bin/win-spawn","win-line-endings":"./bin/win-line-endings"},"author":{"name":"ForbesLindesay"},"license":"BSD","readme":"# win-spawn\n\n  Spawn for node.js but in a way that works regardless of which OS you're using.  Use this if you want to use spawn with a JavaScript file.  It works by explicitly invoking node on windows.  It also shims support for environment variable setting by attempting to parse the command with a regex.  Since all modification is wrapped in `if (os === 'Windows_NT')` it can be safely used on non-windows systems and will not break anything.\n\n## Installation\n\n  $ npm install win-spawn\n\n## Usage\n\n### Command Line\n\n  All the following will work exactly as if the 'win-spawn ' prefix was ommitted when on unix.\n\n    $ win-spawn foo\n    $ win-spawn ./bin/foo\n    $ win-spawn NODE_PATH=./lib foo\n    $ win-spawn NODE_PATH=./lib foo arg1 arg2\n\n  You can also transform all the line endings in a directory from `\\r\\n` to `\\n` just by running:\n\n    $ win-line-endings\n\n  You can preview the changes by running:\n\n    $ win-line-endings -p\n\n  It will ignore `node_modules` and `.git` by default, but is not clever enough to recognise binary files yet.\n\n### API\n\nThis will just pass through to `child_process.spawn` on unix systems, but will correctly parse the arguments on windows.\n\n```javascript\nspawn('foo', [], {stdio: 'inherit'});\nspawn('./bin/foo', [], {stdio: 'inherit'});\nspawn('NODE_PATH=./lib foo', [], {stdio: 'inherit'});\nspawn('NODE_PATH=./lib foo', [arg1, arg2], {stdio: 'inherit'});\n```","readmeFilename":"README.md","_id":"win-spawn@1.1.0","dist":{"shasum":"f2fc3934f52e1055844693c4db85118fc5758dc5","tarball":"http://registry.npmjs.org/win-spawn/-/win-spawn-1.1.0.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"1.1.1":{"name":"win-spawn","version":"1.1.1","description":"Spawn for node.js but in a way that works regardless of which OS you're using","main":"index.js","repository":{"type":"git","url":"https://github.com/ForbesLindesay/win-spawn.git"},"bin":{"win-spawn":"./bin/win-spawn","win-fork":"./bin/win-spawn","win-line-endings":"./bin/win-line-endings"},"devDependencies":{"win-spawn":"*"},"scripts":{"prepublish":"win-line-endings"},"author":{"name":"ForbesLindesay"},"license":"BSD","readme":"# win-spawn\n\n  Spawn for node.js but in a way that works regardless of which OS you're using.  Use this if you want to use spawn with a JavaScript file.  It works by explicitly invoking node on windows.  It also shims support for environment variable setting by attempting to parse the command with a regex.  Since all modification is wrapped in `if (os === 'Windows_NT')` it can be safely used on non-windows systems and will not break anything.\n\n## Installation\n\n  $ npm install win-spawn\n\n## Usage\n\n### Command Line\n\n  All the following will work exactly as if the 'win-spawn ' prefix was ommitted when on unix.\n\n    $ win-spawn foo\n    $ win-spawn ./bin/foo\n    $ win-spawn NODE_PATH=./lib foo\n    $ win-spawn NODE_PATH=./lib foo arg1 arg2\n\n  You can also transform all the line endings in a directory from `\\r\\n` to `\\n` just by running:\n\n    $ win-line-endings\n\n  You can preview the changes by running:\n\n    $ win-line-endings -p\n\n  It will ignore `node_modules` and `.git` by default, but is not clever enough to recognise binary files yet.\n\n### API\n\nThis will just pass through to `child_process.spawn` on unix systems, but will correctly parse the arguments on windows.\n\n```javascript\nspawn('foo', [], {stdio: 'inherit'});\nspawn('./bin/foo', [], {stdio: 'inherit'});\nspawn('NODE_PATH=./lib foo', [], {stdio: 'inherit'});\nspawn('NODE_PATH=./lib foo', [arg1, arg2], {stdio: 'inherit'});\n```","readmeFilename":"README.md","_id":"win-spawn@1.1.1","dist":{"shasum":"5aeda694162c14e46aeee4f214adf44b5437c5f6","tarball":"http://registry.npmjs.org/win-spawn/-/win-spawn-1.1.1.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"1.1.2":{"name":"win-spawn","version":"1.1.2","description":"Spawn for node.js but in a way that works regardless of which OS you're using","main":"index.js","repository":{"type":"git","url":"https://github.com/ForbesLindesay/win-spawn.git"},"bin":{"win-spawn":"./bin/win-spawn","win-fork":"./bin/win-spawn","win-line-endings":"./bin/win-line-endings"},"devDependencies":{"win-spawn":"*"},"scripts":{"prepublish":"win-line-endings"},"author":{"name":"ForbesLindesay"},"license":"BSD","readme":"# win-spawn\n\n  Spawn for node.js but in a way that works regardless of which OS you're using.  Use this if you want to use spawn with a JavaScript file.  It works by explicitly invoking node on windows.  It also shims support for environment variable setting by attempting to parse the command with a regex.  Since all modification is wrapped in `if (os === 'Windows_NT')` it can be safely used on non-windows systems and will not break anything.\n\n## Installation\n\n  $ npm install win-spawn\n\n## Usage\n\n### Command Line\n\n  All the following will work exactly as if the 'win-spawn ' prefix was ommitted when on unix.\n\n    $ win-spawn foo\n    $ win-spawn ./bin/foo\n    $ win-spawn NODE_PATH=./lib foo\n    $ win-spawn NODE_PATH=./lib foo arg1 arg2\n\n  You can also transform all the line endings in a directory from `\\r\\n` to `\\n` just by running:\n\n    $ win-line-endings\n\n  You can preview the changes by running:\n\n    $ win-line-endings -p\n\n  It will ignore `node_modules` and `.git` by default, but is not clever enough to recognise binary files yet.\n\n### API\n\nThis will just pass through to `child_process.spawn` on unix systems, but will correctly parse the arguments on windows.\n\n```javascript\nspawn('foo', [], {stdio: 'inherit'});\nspawn('./bin/foo', [], {stdio: 'inherit'});\nspawn('NODE_PATH=./lib foo', [], {stdio: 'inherit'});\nspawn('NODE_PATH=./lib foo', [arg1, arg2], {stdio: 'inherit'});\n```\n\n![viewcount](https://viewcount.jepso.com/count/ForbesLindesay/win-spawn.png)\n","readmeFilename":"README.md","_id":"win-spawn@1.1.2","dist":{"shasum":"1dda8d8ac672b7ef85245ff7487200b5d7d3a168","tarball":"http://registry.npmjs.org/win-spawn/-/win-spawn-1.1.2.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"2.0.0":{"name":"win-spawn","version":"2.0.0","description":"Spawn for node.js but in a way that works regardless of which OS you're using","main":"index.js","repository":{"type":"git","url":"https://github.com/ForbesLindesay/win-spawn.git"},"bin":{"win-spawn":"./bin/win-spawn"},"devDependencies":{"linify":"~1.0.1"},"scripts":{"prepublish":"linify transform bin"},"author":{"name":"ForbesLindesay"},"license":"BSD","readme":"# win-spawn\n\n  Spawn for node.js but in a way that works regardless of which OS you're using.  Use this if you want to use spawn with a JavaScript file.  It works by explicitly invoking node on windows.  It also shims support for environment variable setting by attempting to parse the command with a regex.  Since all modification is wrapped in `if (os === 'Windows_NT')` it can be safely used on non-windows systems and will not break anything.\n\n## Installation\n\n  $ npm install win-spawn\n\n## Usage\n\n### Command Line\n\n  All the following will work exactly as if the 'win-spawn ' prefix was ommitted when on unix.\n\n    $ win-spawn foo\n    $ win-spawn ./bin/foo\n    $ win-spawn NODE_PATH=./lib foo\n    $ win-spawn NODE_PATH=./lib foo arg1 arg2\n\n  You can also transform all the line endings in a directory from `\\r\\n` to `\\n` just by running:\n\n    $ win-line-endings\n\n  You can preview the changes by running:\n\n    $ win-line-endings -p\n\n  It will ignore `node_modules` and `.git` by default, but is not clever enough to recognise binary files yet.\n\n### API\n\nThis will just pass through to `child_process.spawn` on unix systems, but will correctly parse the arguments on windows.\n\n```javascript\nspawn('foo', [], {stdio: 'inherit'});\nspawn('./bin/foo', [], {stdio: 'inherit'});\nspawn('NODE_PATH=./lib foo', [], {stdio: 'inherit'});\nspawn('NODE_PATH=./lib foo', [arg1, arg2], {stdio: 'inherit'});\n```\n\n![viewcount](https://viewcount.jepso.com/count/ForbesLindesay/win-spawn.png)\n","readmeFilename":"README.md","_id":"win-spawn@2.0.0","dist":{"shasum":"397a29130ec98d0aa0bc86baa4621393effd0b07","tarball":"http://registry.npmjs.org/win-spawn/-/win-spawn-2.0.0.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}}},"readme":"win-spawn\r\n=========\r\n\r\nSpawn for node.js but in a way that works regardless of which OS you're using","maintainers":[{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"time":{"modified":"2013-08-01T05:19:01.982Z","created":"2012-09-19T19:39:03.443Z","0.0.0":"2012-09-19T19:39:04.742Z","1.0.1":"2013-01-31T10:41:53.097Z","1.0.2":"2013-01-31T10:57:16.203Z","1.1.0":"2013-02-04T02:16:33.063Z","1.1.1":"2013-02-04T02:34:46.655Z","1.1.2":"2013-05-29T15:14:22.929Z","2.0.0":"2013-08-01T05:19:01.982Z"},"repository":{"type":"git","url":"https://github.com/ForbesLindesay/win-spawn.git"},"author":{"name":"ForbesLindesay"},"_attachments":{},"_etag":"\"26ZYYNIOQRUD3V9C5QGKQUH4Y\""}