{"_id":"wd","_rev":"136-0524c12b67d4ca47ac5d41e0495f71b3","name":"wd","description":"WebDriver/Selenium 2 node.js client","dist-tags":{"latest":"0.2.7"},"versions":{"0.0.1":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.1","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"_id":"wd@0.0.1","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.7","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"68af2b9b26e3c8fe708b152f4c0489b7f6a5a220","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.1.tgz"}},"0.0.2":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.2","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"_id":"wd@0.0.2","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.7","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"c173050643eac926eaa339461261c5684cdf5b71","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.2.tgz"}},"0.0.3":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.3","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"_id":"wd@0.0.3","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.7","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"2bd21b1c314cc84ac0f4516099b441f2b5e2f5a9","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.3.tgz"}},"0.0.4":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.4","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"_id":"wd@0.0.4","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.7","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"0e7e170e807902efcbe4a820cd6acc984bd6ef04","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.4.tgz"}},"0.0.5":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.5","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"_id":"wd@0.0.5","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.7","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"41253e5f062fa04367ccc1abbcc9484a4a8635d6","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.5.tgz"}},"0.0.6":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.6","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"_id":"wd@0.0.6","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.7","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"499c21f6a5d312d3547f7f0ffd0964de3b5edee7","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.6.tgz"}},"0.0.7":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.7","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"_id":"wd@0.0.7","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.8","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"17f8812a5e1f468c4f1eea67451e054d089cf367","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.7.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.8":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.8","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"_id":"wd@0.0.8","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.12","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"59b5c203ca8e90d444589e414cf3afaa7751af42","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.8.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.9":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.9","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"_id":"wd@0.0.9","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"65f327f5499a8710c3703aa37946faea9a46eee8","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.9.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.10":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.10","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"_id":"wd@0.0.10","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"d000d5447f4e306ce9e9c9f4a8b6a39d9efa494a","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.10.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.11":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.11","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"_id":"wd@0.0.11","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"b928ff3e685912944e07c9cbb7519ffd9c6244e3","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.11.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.12":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.12","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"_id":"wd@0.0.12","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"d9f853c353ed766e2464df411d9b6645af4bc639","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.12.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.13":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.13","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"devDependencies":{"nodeunit":"latest","should":"latest","coffee-script":"latest","express":"latest","async":"latest"},"_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"_id":"wd@0.0.13","dependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"e85ddf61e6abf3b007f227d9f57f228f20f9636f","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.13.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.14":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.14","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"devDependencies":{"nodeunit":"latest","should":"latest","coffee-script":"latest","express":"latest","async":"latest"},"_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"_id":"wd@0.0.14","dependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"0874c021557aecd3d5d01315701c7111156f4a94","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.14.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.15":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.15","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"devDependencies":{"nodeunit":"latest","should":"latest","coffee-script":"latest","express":"latest","async":"latest"},"_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"_id":"wd@0.0.15","dependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"1dfa364fa11f150f28a46cbc5dc38c4b761e135a","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.15.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.16":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.16","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"devDependencies":{"nodeunit":"latest","should":"latest","coffee-script":"latest","express":"latest","async":"latest"},"_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"_id":"wd@0.0.16","dependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"0ffa4935f21372a5d8883b46da61eb025aa0e31d","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.16.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.17":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.17","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"devDependencies":{"nodeunit":"latest","should":"latest","coffee-script":"latest","express":"latest","async":"latest"},"_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"_id":"wd@0.0.17","dependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"d8a66ab7d9a349acbec5f5e0089fac6194fa7fe0","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.17.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.18":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.18","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"devDependencies":{"nodeunit":"latest","should":"latest","coffee-script":"latest","express":"latest","async":"latest","gleak":"latest"},"_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"_id":"wd@0.0.18","dependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"6a6615dcd7d4dd18c1c213f8ff7f341b027b17e3","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.18.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.19":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.19","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.1.22"},"devDependencies":{"nodeunit":"latest","should":"latest","coffee-script":"latest","express":"latest","gleak":"latest"},"_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"_id":"wd@0.0.19","_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"7a716b473f510ce0d5cd4b23b7e4f0cd601ffe7d","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.19.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.20":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.20","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"git://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.1.22"},"devDependencies":{"nodeunit":"latest","should":"latest","coffee-script":"latest","express":"latest","gleak":"latest"},"_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"_id":"wd@0.0.20","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"8e6ec097a2a055f0d5547aa01f34e9bad2475402","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.20.tgz"},"readme":"# WD.js -- A light weight WebDriver/Se2 client for node.js\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  \n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar webdriver = require('wd')\n  , assert = require('assert');\n\nvar browser = webdriver.remote();\n\nbrowser.on('status', function(info){\n  console.log('\\x1b[36m%s\\x1b[0m', info);\n});\nbrowser.on('command', function(meth, path){\n  console.log(' > \\x1b[33m%s\\x1b[0m: %s', meth, path);\n});\n\ndesired = {\n  browserName:'chrome'\n  , tags: [\"examples\"]\n  , name: \"This is an example test\"\n}\n\nbrowser.init(desired, function() {\n  browser.get(\"http://saucelabs.com/test/guinea-pig\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('submit', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, title) {\n            assert.ok(~title.indexOf('#'), 'Wrong title!');\n            browser.quit()\n          })\n        })\n      })\n    })\n  })\n})\n</pre>\n\n## Supported Methods\n\n<table class=\"wikitable\">\n  <tbody>\n    <tr>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>JsonWireProtocol</strong>\n      </td>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>wd</strong>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\n        Query the server's current status.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        status(cb) -> cb(err, status)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\n        Create a new session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        init(desired, cb) -> cb(err, sessionID)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\n        Returns a list of the currently active sessions.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>all sessions: sessions(cb) -> cb(err, sessions)</li>\n          <li>\n            current session: <br>\n            altSessionCapabilities(cb) -> cb(err, capabilities)\n          </li>\n        </ul>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\n        Retrieve the capabilities of the specified session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        sessionCapabilities(cb) -> cb(err, capabilities)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\n        Delete the session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        quit(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\n        Configure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            configurable type: NA (but setImplicitWaitTimeout and \n            setAsyncScriptTimeout do the same)\n          </li>\n          <li>\n              page load timeout: <br>\n              setPageLoadTimeout(ms, cb) -> cb(err)\n          </li>\n        </ul>         \n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\n        Set the amount of time, in milliseconds, that asynchronous scripts executed by <tt>/session/:sessionId/execute_async</tt> are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setAsyncScriptTimeout(ms, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\n        Set the amount of time the driver should wait when searching for elements.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setImplicitWaitTimeout(ms, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n        Retrieve the URL of the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        url(cb) -> cb(err, url)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n        Navigate to a new URL.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        get(url,cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\n        Navigate forwards in the browser history, if possible.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        forward(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\n        Navigate backwards in the browser history, if possible.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        back(cb) -> cb(err)\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\n        Refresh the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        refresh(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\n        Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            execute script: <br>\n            execute(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            execute script using eval(code): <br>\n            safeExecute(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            evaluate expression (using execute): <br>\n            eval(code, cb) -> cb(err, value)\n          </li>\n          <li>\n            evaluate expression (using safeExecute): <br>\n            safeEval(code, cb) -> cb(err, value)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\n        Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            execute async script: <br>\n            executeAsync(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            execute async script using eval(code): <br>\n            safeExecuteAsync(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n        </ul>   \n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n        Close the current window.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        close(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Retrieve all cookies visible to the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        allCookies() -> cb(err, cookies)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Set a cookie.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setCookie(cookie, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Delete all cookies visible to the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        deleteAllCookies(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\n        Delete the cookie with the given name.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        deleteCookie(name, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\n        Get the current page title.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        title(cb) -> cb(err, title)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\n        Search for an element on the page, starting from the document root.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            element(using, value, cb) -> cb(err, element) <br>\n          </li>\n          <li>\n            element<i>suffix</i>(value, cb) -> cb(err, element) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            see also hasElement, hasElement<i>suffix</i>, elementOrNull, element<i>suffix</i>OrNull, \n            elementIfExists, element<i>suffix</i>IfExists, in the elements section.\n          </li>\n        <ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\n        Search for multiple elements on the page, starting from the document root.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            elements(using, value, cb) -> cb(err, elements) <br>\n          </li>\n          <li>\n            elements<i>suffix</i>(value, cb) -> cb(err, elements) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            hasElement(using, value, cb) -> cb(err, boolean) <br>\n          </li>\n          <li>\n            hasElement<i>suffix</i>(value, cb) -> cb(err, boolean) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>                    \n          <li>\n            elementOrNull(using, value, cb) -> cb(err, element) <br>\n            (avoids not found error throw and returns null instead)   \n          </li>\n          <li>\n            element<i>suffix</i>OrNull(value, cb) -> cb(err, element) <br> \n            (avoids not found error throw and returns null instead) <br>\n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            elementIfExists(using, value, cb) -> cb(err, element) <br>\n            (avoids not found error throw and returns undefined instead)   \n          </li>\n          <li>\n            element<i>suffix</i>IfExists(value, cb) -> cb(err, element) <br> \n            (avoids not found error throw and returns undefined instead) <br>\n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n        <ul>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\n        Get the element on the page that currently has focus.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        active(cb) -> cb(err, element)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\n        Click on an element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        clickElement(element, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\n        Returns the visible text for the element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            text(element, cb) -> (err, text)\n          </li>\n          <li>\n            textPresent(searchText, element, cb) -> (err, boolean)\n          </li>  \n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\n        Send a sequence of key strokes to an element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            type(element, keys, cb) -> cb(err)\n          </li>\n          <li>\n            special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\n        Send a sequence of key strokes to the active element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            keys(keys, cb) -> cb(err)\n          </li>\n          <li>\n            special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\n        Clear a <tt>TEXTAREA</tt> or <tt>text INPUT</tt> element's value.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        clear(element, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\n        Get the value of an element's attribute.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            getAttribute(element, attrName, cb) -> cb(err, value)\n          </li>\n          <li>\n            getValue(element, cb) -> cb(err, value)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\n        Accepts the currently displayed alert dialog.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        acceptAlert(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\n        Dismisses the currently displayed alert dialog.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        dismissAlert(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\n        Move the mouse by an offset of the specificed element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        moveTo(element, xoffset, yoffset, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\n        Click any mouse button (at the coordinates set by the last moveto command).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        click(button, cb) -> cb(err)  <br>\n        buttons: {left: 0, middle: 1 , right: 2}\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\n        Click and hold the left mouse button (at the coordinates set by the last moveto command).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        buttonDown(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\n        Releases the mouse button previously held (where the mouse is currently at).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        buttonUp(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\n        Double-clicks at the current mouse coordinates (set by moveto).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        doubleclick(cb) -> cb(err) <br>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        EXTRA: waitForCondition<br>\n        Waits for JavaScript condition to be true (polling within wd client).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        waitForCondition(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)\n        <ul>\n        <li>conditionExpr should return a boolean</li>\n        <li>timeout and pollFreq are optional (default: 1000, 100).</li>\n        <li>return true if condition satisfied, error otherwise.</li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        EXTRA: waitForConditionInBrowser<br>\n        Waits for JavaScript condition to be true. (async script polling within browser)\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)\n        <ul>\n        <li>setAsyncScriptTimeout must be set to value higher than timeout</li>\n        <li>conditionExpr should return a boolean</li>\n        <li>timeout and pollFreq are optional (default: 1000, 100).</li>\n        <li>return true if condition satisfied, error otherwise.</li>\n        </ul>\n      </td>      \n    </tr>    \n  </tbody>\n</table>\n\n### Full JsonWireProtocol mapping:\n\n[full mapping](https://github.com/sebv/wd/blob/master/doc/jsonwiremap-all.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Run the selenium server with chromedriver: \n      java -jar selenium-server-standalone-2.21.0.jar -Dwebdriver.chrome.driver=&lt;PATH&gt;/chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n","maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.21":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.21","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.1.22"},"devDependencies":{"nodeunit":"latest","should":"latest","coffee-script":"latest","express":"latest","gleak":"latest"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- A light weight WebDriver/Se2 client for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  \n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar webdriver = require('wd')\n  , assert = require('assert');\n\nvar browser = webdriver.remote();\n\nbrowser.on('status', function(info){\n  console.log('\\x1b[36m%s\\x1b[0m', info);\n});\nbrowser.on('command', function(meth, path){\n  console.log(' > \\x1b[33m%s\\x1b[0m: %s', meth, path);\n});\n\ndesired = {\n  browserName:'chrome'\n  , tags: [\"examples\"]\n  , name: \"This is an example test\"\n}\n\nbrowser.init(desired, function() {\n  browser.get(\"http://saucelabs.com/test/guinea-pig\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('submit', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, title) {\n            assert.ok(~title.indexOf('#'), 'Wrong title!');\n            browser.quit()\n          })\n        })\n      })\n    })\n  })\n})\n</pre>\n\n## Supported Methods\n\n<table class=\"wikitable\">\n  <tbody>\n    <tr>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>JsonWireProtocol</strong>\n      </td>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>wd</strong>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\n        Query the server's current status.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        status(cb) -> cb(err, status)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\n        Create a new session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        init(desired, cb) -> cb(err, sessionID)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\n        Returns a list of the currently active sessions.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>all sessions: sessions(cb) -> cb(err, sessions)</li>\n          <li>\n            current session: <br>\n            altSessionCapabilities(cb) -> cb(err, capabilities)\n          </li>\n        </ul>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\n        Retrieve the capabilities of the specified session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        sessionCapabilities(cb) -> cb(err, capabilities)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\n        Delete the session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        quit(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\n        Configure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            configurable type: NA (but setImplicitWaitTimeout and \n            setAsyncScriptTimeout do the same)\n          </li>\n          <li>\n              page load timeout: <br>\n              setPageLoadTimeout(ms, cb) -> cb(err)\n          </li>\n        </ul>         \n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\n        Set the amount of time, in milliseconds, that asynchronous scripts executed by <tt>/session/:sessionId/execute_async</tt> are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setAsyncScriptTimeout(ms, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\n        Set the amount of time the driver should wait when searching for elements.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setImplicitWaitTimeout(ms, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n        Retrieve the URL of the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        url(cb) -> cb(err, url)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n        Navigate to a new URL.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        get(url,cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\n        Navigate forwards in the browser history, if possible.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        forward(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\n        Navigate backwards in the browser history, if possible.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        back(cb) -> cb(err)\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\n        Refresh the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        refresh(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\n        Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            execute script: <br>\n            execute(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            execute script using eval(code): <br>\n            safeExecute(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            evaluate expression (using execute): <br>\n            eval(code, cb) -> cb(err, value)\n          </li>\n          <li>\n            evaluate expression (using safeExecute): <br>\n            safeEval(code, cb) -> cb(err, value)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\n        Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            execute async script: <br>\n            executeAsync(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            execute async script using eval(code): <br>\n            safeExecuteAsync(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n        </ul>   \n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n        Close the current window.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        close(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Retrieve all cookies visible to the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        allCookies() -> cb(err, cookies)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Set a cookie.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setCookie(cookie, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Delete all cookies visible to the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        deleteAllCookies(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\n        Delete the cookie with the given name.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        deleteCookie(name, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\n        Get the current page title.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        title(cb) -> cb(err, title)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\n        Search for an element on the page, starting from the document root.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            element(using, value, cb) -> cb(err, element) <br>\n          </li>\n          <li>\n            element<i>suffix</i>(value, cb) -> cb(err, element) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            see also hasElement, hasElement<i>suffix</i>, elementOrNull, element<i>suffix</i>OrNull, \n            elementIfExists, element<i>suffix</i>IfExists, in the elements section.\n          </li>\n        <ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\n        Search for multiple elements on the page, starting from the document root.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            elements(using, value, cb) -> cb(err, elements) <br>\n          </li>\n          <li>\n            elements<i>suffix</i>(value, cb) -> cb(err, elements) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            hasElement(using, value, cb) -> cb(err, boolean) <br>\n          </li>\n          <li>\n            hasElement<i>suffix</i>(value, cb) -> cb(err, boolean) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>                    \n          <li>\n            elementOrNull(using, value, cb) -> cb(err, element) <br>\n            (avoids not found error throw and returns null instead)   \n          </li>\n          <li>\n            element<i>suffix</i>OrNull(value, cb) -> cb(err, element) <br> \n            (avoids not found error throw and returns null instead) <br>\n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            elementIfExists(using, value, cb) -> cb(err, element) <br>\n            (avoids not found error throw and returns undefined instead)   \n          </li>\n          <li>\n            element<i>suffix</i>IfExists(value, cb) -> cb(err, element) <br> \n            (avoids not found error throw and returns undefined instead) <br>\n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n        <ul>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\n        Get the element on the page that currently has focus.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        active(cb) -> cb(err, element)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\n        Click on an element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        clickElement(element, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\n        Returns the visible text for the element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            text(element, cb) -> (err, text)\n          </li>\n          <li>\n            textPresent(searchText, element, cb) -> (err, boolean)\n          </li>  \n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\n        Send a sequence of key strokes to an element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            type(element, keys, cb) -> cb(err)\n          </li>\n          <li>\n            special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\n        Send a sequence of key strokes to the active element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            keys(keys, cb) -> cb(err)\n          </li>\n          <li>\n            special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\n        Clear a <tt>TEXTAREA</tt> or <tt>text INPUT</tt> element's value.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        clear(element, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\n        Get the value of an element's attribute.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            getAttribute(element, attrName, cb) -> cb(err, value)\n          </li>\n          <li>\n            getValue(element, cb) -> cb(err, value)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\n        Accepts the currently displayed alert dialog.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        acceptAlert(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\n        Dismisses the currently displayed alert dialog.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        dismissAlert(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\n        Move the mouse by an offset of the specificed element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        moveTo(element, xoffset, yoffset, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\n        Click any mouse button (at the coordinates set by the last moveto command).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        click(button, cb) -> cb(err)  <br>\n        buttons: {left: 0, middle: 1 , right: 2}\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\n        Click and hold the left mouse button (at the coordinates set by the last moveto command).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        buttonDown(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\n        Releases the mouse button previously held (where the mouse is currently at).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        buttonUp(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\n        Double-clicks at the current mouse coordinates (set by moveto).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        doubleclick(cb) -> cb(err) <br>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        EXTRA: waitForCondition<br>\n        Waits for JavaScript condition to be true (polling within wd client).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        waitForCondition(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)\n        <ul>\n        <li>conditionExpr should return a boolean</li>\n        <li>timeout and pollFreq are optional (default: 1000, 100).</li>\n        <li>return true if condition satisfied, error otherwise.</li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        EXTRA: waitForConditionInBrowser<br>\n        Waits for JavaScript condition to be true. (async script polling within browser)\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)\n        <ul>\n        <li>setAsyncScriptTimeout must be set to value higher than timeout</li>\n        <li>conditionExpr should return a boolean</li>\n        <li>timeout and pollFreq are optional (default: 1000, 100).</li>\n        <li>return true if condition satisfied, error otherwise.</li>\n        </ul>\n      </td>      \n    </tr>    \n  </tbody>\n</table>\n\n### Full JsonWireProtocol mapping:\n\n[full mapping](https://github.com/sebv/wd/blob/master/doc/jsonwiremap-all.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Run the selenium server with chromedriver: \n      java -jar selenium-server-standalone-2.21.0.jar -Dwebdriver.chrome.driver=&lt;PATH&gt;/chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n","_id":"wd@0.0.21","dist":{"shasum":"9902a35d355deb2e3ec1097b81cac0c24d2ab5e3","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.21.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.22":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.22","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.1.22"},"devDependencies":{"nodeunit":"latest","should":"latest","coffee-script":"latest","express":"2.x","gleak":"latest","imageinfo":"latest"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- A light weight WebDriver/Se2 client for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  \n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar webdriver = require('wd')\n  , assert = require('assert');\n\nvar browser = webdriver.remote();\n\nbrowser.on('status', function(info){\n  console.log('\\x1b[36m%s\\x1b[0m', info);\n});\nbrowser.on('command', function(meth, path){\n  console.log(' > \\x1b[33m%s\\x1b[0m: %s', meth, path);\n});\n\ndesired = {\n  browserName:'chrome'\n  , tags: [\"examples\"]\n  , name: \"This is an example test\"\n}\n\nbrowser.init(desired, function() {\n  browser.get(\"http://saucelabs.com/test/guinea-pig\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('submit', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, title) {\n            assert.ok(~title.indexOf('#'), 'Wrong title!');\n            browser.quit()\n          })\n        })\n      })\n    })\n  })\n})\n</pre>\n\n## Supported Methods\n\n<table class=\"wikitable\">\n  <tbody>\n    <tr>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>JsonWireProtocol</strong>\n      </td>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>wd</strong>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\n        Query the server's current status.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        status(cb) -> cb(err, status)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\n        Create a new session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        init(desired, cb) -> cb(err, sessionID)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\n        Returns a list of the currently active sessions.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>all sessions: sessions(cb) -> cb(err, sessions)</li>\n          <li>\n            current session: <br>\n            altSessionCapabilities(cb) -> cb(err, capabilities)\n          </li>\n        </ul>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\n        Retrieve the capabilities of the specified session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        sessionCapabilities(cb) -> cb(err, capabilities)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\n        Delete the session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        quit(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\n        Configure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            configurable type: NA (but setImplicitWaitTimeout and \n            setAsyncScriptTimeout do the same)\n          </li>\n          <li>\n              page load timeout: <br>\n              setPageLoadTimeout(ms, cb) -> cb(err)\n          </li>\n        </ul>         \n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\n        Set the amount of time, in milliseconds, that asynchronous scripts executed by <tt>/session/:sessionId/execute_async</tt> are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setAsyncScriptTimeout(ms, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\n        Set the amount of time the driver should wait when searching for elements.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setImplicitWaitTimeout(ms, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n        Retrieve the URL of the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        url(cb) -> cb(err, url)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n        Navigate to a new URL.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        get(url,cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\n        Navigate forwards in the browser history, if possible.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        forward(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\n        Navigate backwards in the browser history, if possible.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        back(cb) -> cb(err)\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\n        Refresh the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        refresh(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\n        Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            execute script: <br>\n            execute(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            execute script using eval(code): <br>\n            safeExecute(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            evaluate expression (using execute): <br>\n            eval(code, cb) -> cb(err, value)\n          </li>\n          <li>\n            evaluate expression (using safeExecute): <br>\n            safeEval(code, cb) -> cb(err, value)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\n        Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            execute async script: <br>\n            executeAsync(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            execute async script using eval(code): <br>\n            safeExecuteAsync(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n        </ul>   \n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n        Select a particular browser window by name or selenium handle (see .windowHandles).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n         window(name, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n        Close the current window.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        close(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\n        Get a list of all window handles in this session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        windowHandles(cb) -> cb(err, arrayOfHandles)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Retrieve all cookies visible to the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        allCookies() -> cb(err, cookies)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Set a cookie.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setCookie(cookie, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Delete all cookies visible to the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        deleteAllCookies(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\n        Delete the cookie with the given name.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        deleteCookie(name, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\n        Get the current page title.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        title(cb) -> cb(err, title)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\n        Search for an element on the page, starting from the document root.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            element(using, value, cb) -> cb(err, element) <br>\n          </li>\n          <li>\n            element<i>suffix</i>(value, cb) -> cb(err, element) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            see also hasElement, hasElement<i>suffix</i>, elementOrNull, element<i>suffix</i>OrNull, \n            elementIfExists, element<i>suffix</i>IfExists, in the elements section.\n          </li>\n        <ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\n        Search for multiple elements on the page, starting from the document root.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            elements(using, value, cb) -> cb(err, elements) <br>\n          </li>\n          <li>\n            elements<i>suffix</i>(value, cb) -> cb(err, elements) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            hasElement(using, value, cb) -> cb(err, boolean) <br>\n          </li>\n          <li>\n            hasElement<i>suffix</i>(value, cb) -> cb(err, boolean) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>                    \n          <li>\n            elementOrNull(using, value, cb) -> cb(err, element) <br>\n            (avoids not found error throw and returns null instead)   \n          </li>\n          <li>\n            element<i>suffix</i>OrNull(value, cb) -> cb(err, element) <br> \n            (avoids not found error throw and returns null instead) <br>\n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            elementIfExists(using, value, cb) -> cb(err, element) <br>\n            (avoids not found error throw and returns undefined instead)   \n          </li>\n          <li>\n            element<i>suffix</i>IfExists(value, cb) -> cb(err, element) <br> \n            (avoids not found error throw and returns undefined instead) <br>\n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n        <ul>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\n        Get the element on the page that currently has focus.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        active(cb) -> cb(err, element)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\n        Click on an element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        clickElement(element, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\n        Determine if an element is currently displayed\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        displayed(cb) -> cb(err, displayed)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\n        Returns the visible text for the element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            text(element, cb) -> (err, text)\n          </li>\n          <li>\n            textPresent(searchText, element, cb) -> (err, boolean)\n          </li>  \n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\n        Send a sequence of key strokes to an element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            type(element, keys, cb) -> cb(err)\n          </li>\n          <li>\n            special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\n        Send a sequence of key strokes to the active element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            keys(keys, cb) -> cb(err)\n          </li>\n          <li>\n            special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\n        Clear a <tt>TEXTAREA</tt> or <tt>text INPUT</tt> element's value.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        clear(element, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\n        Get the value of an element's attribute.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            getAttribute(element, attrName, cb) -> cb(err, value)\n          </li>\n          <li>\n            getValue(element, cb) -> cb(err, value)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\n        Accepts the currently displayed alert dialog.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        acceptAlert(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\n        Dismisses the currently displayed alert dialog.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        dismissAlert(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\n        Move the mouse by an offset of the specificed element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        moveTo(element, xoffset, yoffset, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\n        Click any mouse button (at the coordinates set by the last moveto command).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        click(button, cb) -> cb(err)  <br>\n        buttons: {left: 0, middle: 1 , right: 2}\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\n        Click and hold the left mouse button (at the coordinates set by the last moveto command).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        buttonDown(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\n        Releases the mouse button previously held (where the mouse is currently at).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        buttonUp(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\n        Double-clicks at the current mouse coordinates (set by moveto).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        doubleclick(cb) -> cb(err) <br>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        EXTRA: waitForCondition<br>\n        Waits for JavaScript condition to be true (polling within wd client).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        waitForCondition(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)\n        <ul>\n        <li>conditionExpr should return a boolean</li>\n        <li>timeout and pollFreq are optional (default: 1000, 100).</li>\n        <li>return true if condition satisfied, error otherwise.</li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        EXTRA: waitForConditionInBrowser<br>\n        Waits for JavaScript condition to be true. (async script polling within browser)\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)\n        <ul>\n        <li>setAsyncScriptTimeout must be set to value higher than timeout</li>\n        <li>conditionExpr should return a boolean</li>\n        <li>timeout and pollFreq are optional (default: 1000, 100).</li>\n        <li>return true if condition satisfied, error otherwise.</li>\n        </ul>\n      </td>      \n    </tr>    \n  </tbody>\n</table>\n\n### Full JsonWireProtocol mapping:\n\n[full mapping](https://github.com/sebv/wd/blob/master/doc/jsonwiremap-all.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Run the selenium server with chromedriver: \n      java -jar selenium-server-standalone-2.21.0.jar -Dwebdriver.chrome.driver=&lt;PATH&gt;/chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n","_id":"wd@0.0.22","dist":{"shasum":"a7e32516933155d88e3f5c9e9232208e04e1065f","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.22.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.23":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.23","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.1.22"},"devDependencies":{"mocha":"latest","should":"latest","coffee-script":"latest","express":"2.x","gleak":"latest","imageinfo":"latest","covershot":"latest"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- A light weight WebDriver/Se2 client for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  \n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar webdriver = require('wd')\n  , assert = require('assert');\n\nvar browser = webdriver.remote();\n\nbrowser.on('status', function(info){\n  console.log('\\x1b[36m%s\\x1b[0m', info);\n});\nbrowser.on('command', function(meth, path){\n  console.log(' > \\x1b[33m%s\\x1b[0m: %s', meth, path);\n});\n\ndesired = {\n  browserName:'chrome'\n  , tags: [\"examples\"]\n  , name: \"This is an example test\"\n}\n\nbrowser.init(desired, function() {\n  browser.get(\"http://saucelabs.com/test/guinea-pig\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('submit', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, title) {\n            assert.ok(~title.indexOf('#'), 'Wrong title!');\n            browser.quit()\n          })\n        })\n      })\n    })\n  })\n})\n</pre>\n\n## Supported Methods\n\n<table class=\"wikitable\">\n  <tbody>\n    <tr>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>JsonWireProtocol</strong>\n      </td>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>wd</strong>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\n        Query the server's current status.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        status(cb) -> cb(err, status)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\n        Create a new session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        init(desired, cb) -> cb(err, sessionID)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\n        Returns a list of the currently active sessions.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>all sessions: sessions(cb) -> cb(err, sessions)</li>\n          <li>\n            current session: <br>\n            altSessionCapabilities(cb) -> cb(err, capabilities)\n          </li>\n        </ul>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\n        Retrieve the capabilities of the specified session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        sessionCapabilities(cb) -> cb(err, capabilities)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\n        Delete the session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        quit(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\n        Configure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            configurable type: NA (but setImplicitWaitTimeout and \n            setAsyncScriptTimeout do the same)\n          </li>\n          <li>\n              page load timeout: <br>\n              setPageLoadTimeout(ms, cb) -> cb(err)\n          </li>\n        </ul>         \n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\n        Set the amount of time, in milliseconds, that asynchronous scripts executed by <tt>/session/:sessionId/execute_async</tt> are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setAsyncScriptTimeout(ms, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\n        Set the amount of time the driver should wait when searching for elements.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setImplicitWaitTimeout(ms, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n        Retrieve the URL of the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        url(cb) -> cb(err, url)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n        Navigate to a new URL.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        get(url,cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\n        Navigate forwards in the browser history, if possible.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        forward(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\n        Navigate backwards in the browser history, if possible.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        back(cb) -> cb(err)\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\n        Refresh the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        refresh(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\n        Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            execute script: <br>\n            execute(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            execute script using eval(code): <br>\n            safeExecute(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            evaluate expression (using execute): <br>\n            eval(code, cb) -> cb(err, value)\n          </li>\n          <li>\n            evaluate expression (using safeExecute): <br>\n            safeEval(code, cb) -> cb(err, value)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\n        Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            execute async script: <br>\n            executeAsync(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            execute async script using eval(code): <br>\n            safeExecuteAsync(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n        </ul>   \n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n        Select a particular browser window by name or selenium handle (see .windowHandles).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n         window(name, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n        Close the current window.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        close(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\n        Get a list of all window handles in this session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        windowHandles(cb) -> cb(err, arrayOfHandles)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Retrieve all cookies visible to the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        allCookies() -> cb(err, cookies)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Set a cookie.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setCookie(cookie, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Delete all cookies visible to the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        deleteAllCookies(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\n        Delete the cookie with the given name.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        deleteCookie(name, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\n        Get the current page title.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        title(cb) -> cb(err, title)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\n        Search for an element on the page, starting from the document root.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            element(using, value, cb) -> cb(err, element) <br>\n          </li>\n          <li>\n            element<i>suffix</i>(value, cb) -> cb(err, element) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            see also hasElement, hasElement<i>suffix</i>, elementOrNull, element<i>suffix</i>OrNull, \n            elementIfExists, element<i>suffix</i>IfExists, in the elements section.\n          </li>\n        <ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\n        Search for multiple elements on the page, starting from the document root.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            elements(using, value, cb) -> cb(err, elements) <br>\n          </li>\n          <li>\n            elements<i>suffix</i>(value, cb) -> cb(err, elements) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            hasElement(using, value, cb) -> cb(err, boolean) <br>\n          </li>\n          <li>\n            hasElement<i>suffix</i>(value, cb) -> cb(err, boolean) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>                    \n          <li>\n            elementOrNull(using, value, cb) -> cb(err, element) <br>\n            (avoids not found error throw and returns null instead)   \n          </li>\n          <li>\n            element<i>suffix</i>OrNull(value, cb) -> cb(err, element) <br> \n            (avoids not found error throw and returns null instead) <br>\n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            elementIfExists(using, value, cb) -> cb(err, element) <br>\n            (avoids not found error throw and returns undefined instead)   \n          </li>\n          <li>\n            element<i>suffix</i>IfExists(value, cb) -> cb(err, element) <br> \n            (avoids not found error throw and returns undefined instead) <br>\n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n        <ul>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\n        Get the element on the page that currently has focus.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        active(cb) -> cb(err, element)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\n        Click on an element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        clickElement(element, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\n        Determine if an element is currently displayed\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        displayed(cb) -> cb(err, displayed)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\n        Returns the visible text for the element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            text(element, cb) -> (err, text)\n          </li>\n          <li>\n            textPresent(searchText, element, cb) -> (err, boolean)\n          </li>  \n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\n        Send a sequence of key strokes to an element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            type(element, keys, cb) -> cb(err)\n          </li>\n          <li>\n            special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\n        Send a sequence of key strokes to the active element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            keys(keys, cb) -> cb(err)\n          </li>\n          <li>\n            special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\n        Clear a <tt>TEXTAREA</tt> or <tt>text INPUT</tt> element's value.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        clear(element, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\n        Get the value of an element's attribute.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            getAttribute(element, attrName, cb) -> cb(err, value)\n          </li>\n          <li>\n            getValue(element, cb) -> cb(err, value)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\n        Accepts the currently displayed alert dialog.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        acceptAlert(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\n        Dismisses the currently displayed alert dialog.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        dismissAlert(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\n        Move the mouse by an offset of the specificed element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        moveTo(element, xoffset, yoffset, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\n        Click any mouse button (at the coordinates set by the last moveto command).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        click(button, cb) -> cb(err)  <br>\n        buttons: {left: 0, middle: 1 , right: 2}\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\n        Click and hold the left mouse button (at the coordinates set by the last moveto command).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        buttonDown(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\n        Releases the mouse button previously held (where the mouse is currently at).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        buttonUp(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\n        Double-clicks at the current mouse coordinates (set by moveto).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        doubleclick(cb) -> cb(err) <br>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        EXTRA: waitForCondition<br>\n        Waits for JavaScript condition to be true (polling within wd client).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        waitForCondition(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)\n        <ul>\n        <li>conditionExpr should return a boolean</li>\n        <li>timeout and pollFreq are optional (default: 1000, 100).</li>\n        <li>return true if condition satisfied, error otherwise.</li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        EXTRA: waitForConditionInBrowser<br>\n        Waits for JavaScript condition to be true. (async script polling within browser)\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)\n        <ul>\n        <li>setAsyncScriptTimeout must be set to value higher than timeout</li>\n        <li>conditionExpr should return a boolean</li>\n        <li>timeout and pollFreq are optional (default: 1000, 100).</li>\n        <li>return true if condition satisfied, error otherwise.</li>\n        </ul>\n      </td>      \n    </tr>    \n  </tbody>\n</table>\n\n### Full JsonWireProtocol mapping:\n\n[full mapping](https://github.com/sebv/wd/blob/master/doc/jsonwiremap-all.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Run the selenium server with chromedriver: \n      java -jar selenium-server-standalone-2.21.0.jar -Dwebdriver.chrome.driver=&lt;PATH&gt;/chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","_id":"wd@0.0.23","dist":{"shasum":"7fbf949f3e41b501fc9a803509ac85cee7d1bbb1","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.23.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.24":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.24","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.1.22"},"devDependencies":{"mocha":"latest","should":"latest","coffee-script":"latest","express":"2.x","gleak":"latest","imageinfo":"latest","covershot":"latest"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- A light weight WebDriver/Se2 client for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  \n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar webdriver = require('wd')\n  , assert = require('assert');\n\nvar browser = webdriver.remote();\n\nbrowser.on('status', function(info){\n  console.log('\\x1b[36m%s\\x1b[0m', info);\n});\nbrowser.on('command', function(meth, path){\n  console.log(' > \\x1b[33m%s\\x1b[0m: %s', meth, path);\n});\n\ndesired = {\n  browserName:'chrome'\n  , tags: [\"examples\"]\n  , name: \"This is an example test\"\n}\n\nbrowser.init(desired, function() {\n  browser.get(\"http://saucelabs.com/test/guinea-pig\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('submit', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, title) {\n            assert.ok(~title.indexOf('#'), 'Wrong title!');\n            browser.quit()\n          })\n        })\n      })\n    })\n  })\n})\n</pre>\n\n## Supported Methods\n\n<table class=\"wikitable\">\n  <tbody>\n    <tr>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>JsonWireProtocol</strong>\n      </td>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>wd</strong>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\n        Query the server's current status.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        status(cb) -> cb(err, status)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\n        Create a new session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        init(desired, cb) -> cb(err, sessionID)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\n        Returns a list of the currently active sessions.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>all sessions: sessions(cb) -> cb(err, sessions)</li>\n          <li>\n            current session: <br>\n            altSessionCapabilities(cb) -> cb(err, capabilities)\n          </li>\n        </ul>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\n        Retrieve the capabilities of the specified session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        sessionCapabilities(cb) -> cb(err, capabilities)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\n        Delete the session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        quit(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\n        Configure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            configurable type: NA (but setImplicitWaitTimeout and \n            setAsyncScriptTimeout do the same)\n          </li>\n          <li>\n              page load timeout: <br>\n              setPageLoadTimeout(ms, cb) -> cb(err)\n          </li>\n        </ul>         \n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\n        Set the amount of time, in milliseconds, that asynchronous scripts executed by <tt>/session/:sessionId/execute_async</tt> are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setAsyncScriptTimeout(ms, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\n        Set the amount of time the driver should wait when searching for elements.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setImplicitWaitTimeout(ms, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n        Retrieve the URL of the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        url(cb) -> cb(err, url)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n        Navigate to a new URL.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        get(url,cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\n        Navigate forwards in the browser history, if possible.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        forward(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\n        Navigate backwards in the browser history, if possible.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        back(cb) -> cb(err)\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\n        Refresh the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        refresh(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\n        Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            execute script: <br>\n            execute(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            execute script using eval(code): <br>\n            safeExecute(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            evaluate expression (using execute): <br>\n            eval(code, cb) -> cb(err, value)\n          </li>\n          <li>\n            evaluate expression (using safeExecute): <br>\n            safeEval(code, cb) -> cb(err, value)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\n        Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            execute async script: <br>\n            executeAsync(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n          <li>\n            execute async script using eval(code): <br>\n            safeExecuteAsync(code, args, cb) -> cb(err, value returned)\n            <ul>\n              <li>args is an optional Array</li>\n            </ul>\n          </li>\n        </ul>   \n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n        Select a particular browser window by name or selenium handle (see .windowHandles).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n         window(name, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n        Close the current window.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        close(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\n        Get a list of all window handles in this session.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        windowHandles(cb) -> cb(err, arrayOfHandles)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Retrieve all cookies visible to the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        allCookies() -> cb(err, cookies)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Set a cookie.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        setCookie(cookie, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n        Delete all cookies visible to the current page.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        deleteAllCookies(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        DELETE&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\n        Delete the cookie with the given name.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        deleteCookie(name, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\n        Get the current page title.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        title(cb) -> cb(err, title)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\n        Search for an element on the page, starting from the document root.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            element(using, value, cb) -> cb(err, element) <br>\n          </li>\n          <li>\n            element<i>suffix</i>(value, cb) -> cb(err, element) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            see also hasElement, hasElement<i>suffix</i>, elementOrNull, element<i>suffix</i>OrNull, \n            elementIfExists, element<i>suffix</i>IfExists, in the elements section.\n          </li>\n        <ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\n        Search for multiple elements on the page, starting from the document root.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            elements(using, value, cb) -> cb(err, elements) <br>\n          </li>\n          <li>\n            elements<i>suffix</i>(value, cb) -> cb(err, elements) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            hasElement(using, value, cb) -> cb(err, boolean) <br>\n          </li>\n          <li>\n            hasElement<i>suffix</i>(value, cb) -> cb(err, boolean) <br> \n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>                    \n          <li>\n            elementOrNull(using, value, cb) -> cb(err, element) <br>\n            (avoids not found error throw and returns null instead)   \n          </li>\n          <li>\n            element<i>suffix</i>OrNull(value, cb) -> cb(err, element) <br> \n            (avoids not found error throw and returns null instead) <br>\n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n          <li>\n            elementIfExists(using, value, cb) -> cb(err, element) <br>\n            (avoids not found error throw and returns undefined instead)   \n          </li>\n          <li>\n            element<i>suffix</i>IfExists(value, cb) -> cb(err, element) <br> \n            (avoids not found error throw and returns undefined instead) <br>\n              <i>suffix:  \n              ByClassName, ByCssSelector, ById,  \n              ByName, ByLinkText, ByPartialLinkText, \n              ByTagName, ByXPath, ByCss</i>\n          </li>\n        <ul>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\n        Get the element on the page that currently has focus.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        active(cb) -> cb(err, element)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\n        Click on an element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        clickElement(element, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\n        Determine if an element is currently displayed\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        displayed(cb) -> cb(err, displayed)\n      </td>\n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\n        Returns the visible text for the element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            text(element, cb) -> (err, text)\n          </li>\n          <li>\n            textPresent(searchText, element, cb) -> (err, boolean)\n          </li>  \n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\n        Send a sequence of key strokes to an element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            type(element, keys, cb) -> cb(err)\n          </li>\n          <li>\n            special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\n        Send a sequence of key strokes to the active element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            keys(keys, cb) -> cb(err)\n          </li>\n          <li>\n            special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\n        Clear a <tt>TEXTAREA</tt> or <tt>text INPUT</tt> element's value.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        clear(element, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        GET&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\n        Get the value of an element's attribute.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        <ul>\n          <li>\n            getAttribute(element, attrName, cb) -> cb(err, value)\n          </li>\n          <li>\n            getValue(element, cb) -> cb(err, value)\n          </li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\n        Accepts the currently displayed alert dialog.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        acceptAlert(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\n        Dismisses the currently displayed alert dialog.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        dismissAlert(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\n        Move the mouse by an offset of the specificed element.\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        moveTo(element, xoffset, yoffset, cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\n        Click any mouse button (at the coordinates set by the last moveto command).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        click(button, cb) -> cb(err)  <br>\n        buttons: {left: 0, middle: 1 , right: 2}\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\n        Click and hold the left mouse button (at the coordinates set by the last moveto command).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        buttonDown(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\n        Releases the mouse button previously held (where the mouse is currently at).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        buttonUp(cb) -> cb(err)\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        POST&nbsp;<a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\n        Double-clicks at the current mouse coordinates (set by moveto).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        doubleclick(cb) -> cb(err) <br>\n      </td>      \n    </tr>    \n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        EXTRA: waitForCondition<br>\n        Waits for JavaScript condition to be true (polling within wd client).\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        waitForCondition(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)\n        <ul>\n        <li>conditionExpr should return a boolean</li>\n        <li>timeout and pollFreq are optional (default: 1000, 100).</li>\n        <li>return true if condition satisfied, error otherwise.</li>\n        </ul>\n      </td>      \n    </tr>\n    <tr>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        EXTRA: waitForConditionInBrowser<br>\n        Waits for JavaScript condition to be true. (async script polling within browser)\n      </td>\n      <td style=\"border: 1px solid #ccc; padding: 5px;\">\n        waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)\n        <ul>\n        <li>setAsyncScriptTimeout must be set to value higher than timeout</li>\n        <li>conditionExpr should return a boolean</li>\n        <li>timeout and pollFreq are optional (default: 1000, 100).</li>\n        <li>return true if condition satisfied, error otherwise.</li>\n        </ul>\n      </td>      \n    </tr>    \n  </tbody>\n</table>\n\n### Full JsonWireProtocol mapping:\n\n[full mapping](https://github.com/sebv/wd/blob/master/doc/jsonwiremap-all.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Run the selenium server with chromedriver: \n      java -jar selenium-server-standalone-2.21.0.jar -Dwebdriver.chrome.driver=&lt;PATH&gt;/chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","_id":"wd@0.0.24","dist":{"shasum":"52a864f5582c0d0267ede3db6ed100c76220e236","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.24.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.25":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.25","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.1.22"},"devDependencies":{"mocha":"latest","should":"latest","coffee-script":"latest","express":"2.x","imageinfo":"latest","covershot":"latest","nock":"latest","dox":"latest","mu2":"latest","underscore":"latest"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- A light weight WebDriver/Se2 client for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  \n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar webdriver = require('wd')\n  , assert = require('assert');\n\nvar browser = webdriver.remote();\n\nbrowser.on('status', function(info){\n  console.log('\\x1b[36m%s\\x1b[0m', info);\n});\nbrowser.on('command', function(meth, path){\n  console.log(' > \\x1b[33m%s\\x1b[0m: %s', meth, path);\n});\n\ndesired = {\n  browserName:'chrome'\n  , tags: [\"examples\"]\n  , name: \"This is an example test\"\n}\n\nbrowser.init(desired, function() {\n  browser.get(\"http://saucelabs.com/test/guinea-pig\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('submit', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, title) {\n            assert.ok(~title.indexOf('#'), 'Wrong title!');\n            browser.quit()\n          })\n        })\n      })\n    })\n  })\n})\n</pre>\n\n## Supported Methods\n\n<table class=\"wikitable\">\n  <tbody>\n    <tr>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>JsonWireProtocol</strong>\n      </td>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>wd</strong>\n      </td>\n    </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\n            Query the server's current status.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              status(cb) -&gt; cb(err, status)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\n            Create a new session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              init(desired, cb) -&gt; cb(err, sessionID)<br>\n            \n              Initialize the browser.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\n            Returns a list of the currently active sessions.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                sessions(cb) -&gt; cb(err, sessions)<br>\n              \n            </p>\n          \n            <p>\n              \n                Alternate strategy to get session capabilities from server session list: <br>\n              \n                altSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\n            Retrieve the capabilities of the specified session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              sessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\n            Delete the session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              quit(cb) -&gt; cb(err)<br>\n            \n              Destroy the browser.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\n            Configure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n            \n              (use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\n            Set the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\n            Set the amount of time the driver should wait when searching for elements.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\n            Retrieve the current window handle.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              windowHandle(cb) -&gt; cb(err, handle)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\n            Retrieve the list of all window handles available to the session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              windowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n            Retrieve the URL of the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              url(cb) -&gt; cb(err, url)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n            Navigate to a new URL.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              get(url,cb) -&gt; cb(err)<br>\n            \n              Get a new url.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\n            Navigate forwards in the browser history, if possible.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              forward(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\n            Navigate backwards in the browser history, if possible.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              back(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\n            Refresh the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              refresh(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\n            Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                execute(code, args, cb) -&gt; cb(err, value returned)<br>\n              \n                execute(code, cb) -&gt; cb(err, value returned)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Execute script using eval(code): <br>\n              \n                safeExecute(code, args, cb) -&gt; cb(err, value returned)<br>\n              \n                safeExecute(code, cb) -&gt; cb(err, value returned)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Evaluate expression (using execute): <br>\n              \n                eval(code, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                Evaluate expression (using safeExecute): <br>\n              \n                safeEval(code, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\n            Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                executeAsync(code, args, cb) -&gt; cb(err, value returned)<br>\n              \n                executeAsync(code, cb) -&gt; cb(err, value returned)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Execute async script using eval(code): <br>\n              \n                safeExecuteAsync(code, args, cb) -&gt; cb(err, value returned)<br>\n              \n                safeExecuteAsync(code, cb) -&gt; cb(err, value returned)<br>\n              \n                args: script argument array (optional)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\n            Take a screenshot of the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              takeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\n            Change focus to another frame on the page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              frame(frameRef, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n            Change focus to another window.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              window(name, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n            Close the current window.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              close(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Retrieve all cookies visible to the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              allCookies() -&gt; cb(err, cookies)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Set a cookie.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setCookie(cookie, cb) -&gt; cb(err)<br>\n            \n              cookie example:  <br>\n            \n               {name:'fruit', value:'apple'}<br>\n            \n              Optional cookie fields: <br>\n            \n               path, domain, secure, expiry<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Delete all cookies visible to the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              deleteAllCookies(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\n            Delete the cookie with the given name.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              deleteCookie(name, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\n            Get the current page title.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              title(cb) -&gt; cb(err, title)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\n            Search for an element on the page, starting from the document root.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                element(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\n              \n                elementById(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkText(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPath(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCss(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\n            Search for multiple elements on the page, starting from the document root.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                elements(using, value, cb) -&gt; cb(err, elements)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementsByClassName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByCssSelector(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsById(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByLinkText(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByTagName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByXPath(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByCss(value, cb) -&gt; cb(err, elements)      <br>\n              \n            </p>\n          \n            <p>\n              \n                Retrieve an element avoiding not found exception and returning null instead: <br>\n              \n                elementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                Retrieve an element avoiding not found exception and returning undefined instead: <br>\n              \n                elementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                Check if element exists: <br>\n              \n                hasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n              \n            </p>\n          \n            <p>\n              \n                hasElementByClassName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByCssSelector(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementById(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByLinkText(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByTagName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByXPath(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByCss(value, cb) -&gt; cb(err, boolean) <br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\n            Get the element on the page that currently has focus.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              active(cb) -&gt; cb(err, element)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\n            Click on an element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                clickElement(element, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.click(cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\n            Returns the visible text for the element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                text(element, cb) -&gt; (err, text)<br>\n              \n                element: specific element, 'body', or undefined<br>\n              \n            </p>\n          \n            <p>\n              \n                element.text(cb) -&gt; (err, text)<br>\n              \n            </p>\n          \n            <p>\n              \n                Check if text is present: <br>\n              \n                textPresent(searchText, element, cb) -&gt; (err, boolean)<br>\n              \n                element: specific element, 'body', or undefined<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                element.textPresent(searchText, cb) -&gt; (err, boolean)<br>\n              \n                 <br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\n            Send a sequence of key strokes to an element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                type(element, keys, cb) -&gt; cb(err)<br>\n              \n                Type keys (all keys are up at the end of command).<br>\n              \n                special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.type(keys, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\n            Send a sequence of key strokes to the active element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              keys(keys, cb) -&gt; cb(err)<br>\n            \n              Press keys (keys may still be down at the end of command).<br>\n            \n              special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\n            Query for an element's tag name.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                getTagName(element, cb) -&gt; cb(err, name)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getTagName(cb) -&gt; cb(err, name)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\n            Clear a TEXTAREA or text INPUT element's value.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                clear(element, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.clear(cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\n            Get the value of an element's attribute.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                getAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                Get element value (in value attribute): <br>\n              \n                getValue(element, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getValue(cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\n            Determine if an element is currently displayed.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                isDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\n            Query the value of an element's computed CSS property.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                getComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\n            Accepts the currently displayed alert dialog.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              acceptAlert(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\n            Dismisses the currently displayed alert dialog.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              dismissAlert(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\n            Move the mouse by an offset of the specificed element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              moveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\n            \n              Move to element, xoffset and y offset are optional.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\n            Click any mouse button (at the coordinates set by the last moveto command).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              click(button, cb) -&gt; cb(err)<br>\n            \n              Click on current element.<br>\n            \n              Buttons: {left: 0, middle: 1 , right: 2}<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\n            Click and hold the left mouse button (at the coordinates set by the last moveto command).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              buttonDown(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\n            Releases the mouse button previously held (where the mouse is currently at).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              buttonUp(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\n            Double-clicks at the current mouse coordinates (set by moveto).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              doubleclick(cb) -&gt; cb(err) <br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              Opens a new window (using Javascript window.open):<br>\n            \n              newWindow(url, name, cb) -&gt; cb(err)<br>\n            \n              newWindow(url, cb) -&gt; cb(err)<br>\n            \n              name: optional window name<br>\n            \n              Window can later be accessed by name with the window method, <br>\n            \n              or by getting the last handle returned by the windowHandles method.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              windowName(cb) -&gt; cb(err, name)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementById(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              isVisible(element , cb) -&gt; cb(err, boolean)<br>\n            \n              deprecated: isVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              Waits for JavaScript condition to be true (polling within wd client): <br>\n            \n              waitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\n            \n              conditionExpr: condition expression, should return a boolean<br>\n            \n              timeout: timeout (optional, default: 1000) <br>\n            \n              pollFreq: pooling frequency (optional, default: 100)<br>\n            \n              return true if condition satisfied, error otherwise.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              Waits for JavaScript condition to be true (async script polling within browser): <br>\n            \n              waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\n            \n              conditionExpr: condition expression, should return a boolean<br>\n            \n              timeout: timeout (optional, default: 1000) <br>\n            \n              pollFreq: pooling frequency (optional, default: 100)<br>\n            \n              return true if condition satisfied, error otherwise.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              isVisible(cb) -&gt; cb(err, boolean)<br>\n            \n          \n          \n        </td>\n      </tr>\n      \n  </tbody>\n</table>\n\n### Full JsonWireProtocol mapping:\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Run the selenium server with chromedriver: \n      java -jar selenium-server-standalone-2.21.0.jar -Dwebdriver.chrome.driver=&lt;PATH&gt;/chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","_id":"wd@0.0.25","dist":{"shasum":"cfa03cd5bd532653d126876a6f0f0bea123a3516","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.25.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.26":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.26","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.1.x"},"devDependencies":{"mocha":"1.6.x","should":"1.2.x","coffee-script":"1.3.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","nock":"0.13.x","dox":"0.3.x","mu2":"0.5.x","underscore":"1.4.x"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- A light weight WebDriver/Se2 client for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  \n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar webdriver = require('wd')\n  , assert = require('assert');\n\nvar browser = webdriver.remote();\n\nbrowser.on('status', function(info){\n  console.log('\\x1b[36m%s\\x1b[0m', info);\n});\nbrowser.on('command', function(meth, path){\n  console.log(' > \\x1b[33m%s\\x1b[0m: %s', meth, path);\n});\n\ndesired = {\n  browserName:'chrome'\n  , tags: [\"examples\"]\n  , name: \"This is an example test\"\n}\n\nbrowser.init(desired, function() {\n  browser.get(\"http://saucelabs.com/test/guinea-pig\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('submit', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, title) {\n            assert.ok(~title.indexOf('#'), 'Wrong title!');\n            browser.quit()\n          })\n        })\n      })\n    })\n  })\n})\n</pre>\n\n## Supported Methods\n\n<table class=\"wikitable\">\n  <tbody>\n    <tr>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>JsonWireProtocol</strong>\n      </td>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>wd</strong>\n      </td>\n    </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\n            Query the server's current status.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              status(cb) -&gt; cb(err, status)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\n            Create a new session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              init(desired, cb) -&gt; cb(err, sessionID)<br>\n            \n              Initialize the browser.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\n            Returns a list of the currently active sessions.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                sessions(cb) -&gt; cb(err, sessions)<br>\n              \n            </p>\n          \n            <p>\n              \n                Alternate strategy to get session capabilities from server session list: <br>\n              \n                altSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\n            Retrieve the capabilities of the specified session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              sessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\n            Delete the session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              quit(cb) -&gt; cb(err)<br>\n            \n              Destroy the browser.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\n            Configure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n            \n              (use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\n            Set the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\n            Set the amount of time the driver should wait when searching for elements.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\n            Retrieve the current window handle.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              windowHandle(cb) -&gt; cb(err, handle)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\n            Retrieve the list of all window handles available to the session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              windowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n            Retrieve the URL of the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              url(cb) -&gt; cb(err, url)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n            Navigate to a new URL.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              get(url,cb) -&gt; cb(err)<br>\n            \n              Get a new url.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\n            Navigate forwards in the browser history, if possible.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              forward(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\n            Navigate backwards in the browser history, if possible.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              back(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\n            Refresh the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              refresh(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\n            Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                execute(code, args, cb) -&gt; cb(err, result)<br>\n              \n                execute(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Execute script using eval(code): <br>\n              \n                safeExecute(code, args, cb) -&gt; cb(err, result)<br>\n              \n                safeExecute(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Evaluate expression (using execute): <br>\n              \n                eval(code, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                Evaluate expression (using safeExecute): <br>\n              \n                safeEval(code, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\n            Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                executeAsync(code, args, cb) -&gt; cb(err, result)<br>\n              \n                executeAsync(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Execute async script using eval(code): <br>\n              \n                safeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\n              \n                safeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\n            Take a screenshot of the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              takeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\n            Change focus to another frame on the page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              frame(frameRef, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n            Change focus to another window.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              window(name, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n            Close the current window.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              close(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Retrieve all cookies visible to the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              allCookies() -&gt; cb(err, cookies)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Set a cookie.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setCookie(cookie, cb) -&gt; cb(err)<br>\n            \n              cookie example:  <br>\n            \n               {name:'fruit', value:'apple'}<br>\n            \n              Optional cookie fields: <br>\n            \n               path, domain, secure, expiry<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Delete all cookies visible to the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              deleteAllCookies(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\n            Delete the cookie with the given name.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              deleteCookie(name, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\n            Get the current page title.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              title(cb) -&gt; cb(err, title)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\n            Search for an element on the page, starting from the document root.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                element(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\n              \n                elementById(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkText(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPath(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCss(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\n            Search for multiple elements on the page, starting from the document root.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                elements(using, value, cb) -&gt; cb(err, elements)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementsByClassName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByCssSelector(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsById(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByLinkText(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByTagName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByXPath(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByCss(value, cb) -&gt; cb(err, elements)      <br>\n              \n            </p>\n          \n            <p>\n              \n                Retrieve an element avoiding not found exception and returning null instead: <br>\n              \n                elementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                Retrieve an element avoiding not found exception and returning undefined instead: <br>\n              \n                elementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                Check if element exists: <br>\n              \n                hasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n              \n            </p>\n          \n            <p>\n              \n                hasElementByClassName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByCssSelector(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementById(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByLinkText(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByTagName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByXPath(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByCss(value, cb) -&gt; cb(err, boolean) <br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\n            Get the element on the page that currently has focus.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              active(cb) -&gt; cb(err, element)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\n            Click on an element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                clickElement(element, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.click(cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\n            Returns the visible text for the element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                text(element, cb) -&gt; cb(err, text)<br>\n              \n                element: specific element, 'body', or undefined<br>\n              \n            </p>\n          \n            <p>\n              \n                element.text(cb) -&gt; cb(err, text)<br>\n              \n            </p>\n          \n            <p>\n              \n                Check if text is present: <br>\n              \n                textPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\n              \n                element: specific element, 'body', or undefined<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                element.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n              \n                 <br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\n            Send a sequence of key strokes to an element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                type(element, keys, cb) -&gt; cb(err)<br>\n              \n                Type keys (all keys are up at the end of command).<br>\n              \n                special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.type(keys, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\n            Send a sequence of key strokes to the active element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              keys(keys, cb) -&gt; cb(err)<br>\n            \n              Press keys (keys may still be down at the end of command).<br>\n            \n              special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\n            Query for an element's tag name.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                getTagName(element, cb) -&gt; cb(err, name)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getTagName(cb) -&gt; cb(err, name)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\n            Clear a TEXTAREA or text INPUT element's value.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                clear(element, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.clear(cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\n            Get the value of an element's attribute.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                getAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                Get element value (in value attribute): <br>\n              \n                getValue(element, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getValue(cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\n            Determine if an element is currently displayed.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                isDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\n            Query the value of an element's computed CSS property.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                getComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\n            Accepts the currently displayed alert dialog.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              acceptAlert(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\n            Dismisses the currently displayed alert dialog.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              dismissAlert(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\n            Move the mouse by an offset of the specificed element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              moveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\n            \n              Move to element, xoffset and y offset are optional.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\n            Click any mouse button (at the coordinates set by the last moveto command).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              click(button, cb) -&gt; cb(err)<br>\n            \n              Click on current element.<br>\n            \n              Buttons: {left: 0, middle: 1 , right: 2}<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\n            Click and hold the left mouse button (at the coordinates set by the last moveto command).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              buttonDown(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\n            Releases the mouse button previously held (where the mouse is currently at).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              buttonUp(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\n            Double-clicks at the current mouse coordinates (set by moveto).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              doubleclick(cb) -&gt; cb(err) <br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              Opens a new window (using Javascript window.open):<br>\n            \n              newWindow(url, name, cb) -&gt; cb(err)<br>\n            \n              newWindow(url, cb) -&gt; cb(err)<br>\n            \n              name: optional window name<br>\n            \n              Window can later be accessed by name with the window method, <br>\n            \n              or by getting the last handle returned by the windowHandles method.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              windowName(cb) -&gt; cb(err, name)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementById(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              isVisible(element , cb) -&gt; cb(err, boolean)<br>\n            \n              deprecated: isVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              Waits for JavaScript condition to be true (polling within wd client): <br>\n            \n              waitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\n            \n              conditionExpr: condition expression, should return a boolean<br>\n            \n              timeout: timeout (optional, default: 1000) <br>\n            \n              pollFreq: pooling frequency (optional, default: 100)<br>\n            \n              return true if condition satisfied, error otherwise.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              Waits for JavaScript condition to be true (async script polling within browser): <br>\n            \n              waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\n            \n              conditionExpr: condition expression, should return a boolean<br>\n            \n              timeout: timeout (optional, default: 1000) <br>\n            \n              pollFreq: pooling frequency (optional, default: 100)<br>\n            \n              return true if condition satisfied, error otherwise.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              isVisible(cb) -&gt; cb(err, boolean)<br>\n            \n          \n          \n        </td>\n      </tr>\n      \n  </tbody>\n</table>\n\n### Full JsonWireProtocol mapping:\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Run the selenium server with chromedriver: \n      java -jar selenium-server-standalone-2.21.0.jar -Dwebdriver.chrome.driver=&lt;PATH&gt;/chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","_id":"wd@0.0.26","dist":{"shasum":"c8d3749f6794eb4e2c197660c28daecf759586c5","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.26.tgz"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.27":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.27","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.1.x","underscore":"1.4.x","vargs":"~0.1.0","request":"~2.12.0"},"devDependencies":{"mocha":"1.6.x","should":"1.2.x","coffee-script":"1.3.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","nock":"0.13.x","dox":"0.3.x","mu2":"0.5.x","sv-selenium":"0.1.x"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  \n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar webdriver = require('wd')\n  , assert = require('assert');\n\nvar browser = webdriver.remote();\n\nbrowser.on('status', function(info){\n  console.log('\\x1b[36m%s\\x1b[0m', info);\n});\nbrowser.on('command', function(meth, path){\n  console.log(' > \\x1b[33m%s\\x1b[0m: %s', meth, path);\n});\n\ndesired = {\n  browserName:'chrome'\n  , tags: [\"examples\"]\n  , name: \"This is an example test\"\n};\n\nbrowser.init(desired, function() {\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, location) {\n            assert.ok(~location.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Supported Methods\n\n<table class=\"wikitable\">\n  <tbody>\n    <tr>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>JsonWireProtocol</strong>\n      </td>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>wd</strong>\n      </td>\n    </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\n            Query the server's current status.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              status(cb) -&gt; cb(err, status)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\n            Create a new session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              init(desired, cb) -&gt; cb(err, sessionID)<br>\n            \n              Initialize the browser.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\n            Returns a list of the currently active sessions.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                sessions(cb) -&gt; cb(err, sessions)<br>\n              \n            </p>\n          \n            <p>\n              \n                Alternate strategy to get session capabilities from server session list: <br>\n              \n                altSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\n            Retrieve the capabilities of the specified session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              sessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\n            Delete the session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              quit(cb) -&gt; cb(err)<br>\n            \n              Destroy the browser.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\n            Configure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n            \n              (use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\n            Set the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\n            Set the amount of time the driver should wait when searching for elements.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\n            Retrieve the current window handle.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              windowHandle(cb) -&gt; cb(err, handle)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\n            Retrieve the list of all window handles available to the session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              windowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n            Retrieve the URL of the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              url(cb) -&gt; cb(err, url)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n            Navigate to a new URL.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              get(url,cb) -&gt; cb(err)<br>\n            \n              Get a new url.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\n            Navigate forwards in the browser history, if possible.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              forward(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\n            Navigate backwards in the browser history, if possible.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              back(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\n            Refresh the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              refresh(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\n            Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                execute(code, args, cb) -&gt; cb(err, result)<br>\n              \n                execute(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Execute script using eval(code): <br>\n              \n                safeExecute(code, args, cb) -&gt; cb(err, result)<br>\n              \n                safeExecute(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Evaluate expression (using execute): <br>\n              \n                eval(code, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                Evaluate expression (using safeExecute): <br>\n              \n                safeEval(code, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\n            Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                executeAsync(code, args, cb) -&gt; cb(err, result)<br>\n              \n                executeAsync(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Execute async script using eval(code): <br>\n              \n                safeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\n              \n                safeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\n            Take a screenshot of the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              takeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\n            Change focus to another frame on the page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              frame(frameRef, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n            Change focus to another window.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              window(name, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n            Close the current window.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              close(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Retrieve all cookies visible to the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              allCookies() -&gt; cb(err, cookies)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Set a cookie.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setCookie(cookie, cb) -&gt; cb(err)<br>\n            \n              cookie example:  <br>\n            \n               {name:'fruit', value:'apple'}<br>\n            \n              Optional cookie fields: <br>\n            \n               path, domain, secure, expiry<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Delete all cookies visible to the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              deleteAllCookies(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\n            Delete the cookie with the given name.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              deleteCookie(name, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\n            Get the current page title.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              title(cb) -&gt; cb(err, title)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\n            Search for an element on the page, starting from the document root.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                element(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\n              \n                elementById(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkText(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPath(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCss(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\n            Search for multiple elements on the page, starting from the document root.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                elements(using, value, cb) -&gt; cb(err, elements)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementsByClassName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByCssSelector(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsById(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByLinkText(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByTagName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByXPath(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByCss(value, cb) -&gt; cb(err, elements)      <br>\n              \n            </p>\n          \n            <p>\n              \n                Retrieve an element avoiding not found exception and returning null instead: <br>\n              \n                elementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                Retrieve an element avoiding not found exception and returning undefined instead: <br>\n              \n                elementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                Check if element exists: <br>\n              \n                hasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n              \n            </p>\n          \n            <p>\n              \n                hasElementByClassName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByCssSelector(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementById(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByLinkText(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByTagName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByXPath(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByCss(value, cb) -&gt; cb(err, boolean) <br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\n            Get the element on the page that currently has focus.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              active(cb) -&gt; cb(err, element)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\n            Click on an element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                clickElement(element, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.click(cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\n            Returns the visible text for the element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                text(element, cb) -&gt; cb(err, text)<br>\n              \n                element: specific element, 'body', or undefined<br>\n              \n            </p>\n          \n            <p>\n              \n                element.text(cb) -&gt; cb(err, text)<br>\n              \n            </p>\n          \n            <p>\n              \n                Check if text is present: <br>\n              \n                textPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\n              \n                element: specific element, 'body', or undefined<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                element.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n              \n                 <br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\n            Send a sequence of key strokes to an element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                type(element, keys, cb) -&gt; cb(err)<br>\n              \n                Type keys (all keys are up at the end of command).<br>\n              \n                special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.type(keys, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\n            Send a sequence of key strokes to the active element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              keys(keys, cb) -&gt; cb(err)<br>\n            \n              Press keys (keys may still be down at the end of command).<br>\n            \n              special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\n            Query for an element's tag name.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                getTagName(element, cb) -&gt; cb(err, name)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getTagName(cb) -&gt; cb(err, name)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\n            Clear a TEXTAREA or text INPUT element's value.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                clear(element, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.clear(cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\n            Get the value of an element's attribute.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                getAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                Get element value (in value attribute): <br>\n              \n                getValue(element, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getValue(cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\n            Determine if an element is currently displayed.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                isDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\n            Query the value of an element's computed CSS property.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                getComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\n            Gets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              alertText(cb) -&gt; cb(err, text)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\n            Sends keystrokes to a JavaScript prompt() dialog.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              alertKeys(keys, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\n            Accepts the currently displayed alert dialog.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              acceptAlert(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\n            Dismisses the currently displayed alert dialog.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              dismissAlert(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\n            Move the mouse by an offset of the specificed element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              moveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\n            \n              Move to element, xoffset and y offset are optional.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\n            Click any mouse button (at the coordinates set by the last moveto command).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              click(button, cb) -&gt; cb(err)<br>\n            \n              Click on current element.<br>\n            \n              Buttons: {left: 0, middle: 1 , right: 2}<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\n            Click and hold the left mouse button (at the coordinates set by the last moveto command).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              buttonDown(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\n            Releases the mouse button previously held (where the mouse is currently at).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              buttonUp(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\n            Double-clicks at the current mouse coordinates (set by moveto).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              doubleclick(cb) -&gt; cb(err) <br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              esired, cb<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              Opens a new window (using Javascript window.open):<br>\n            \n              newWindow(url, name, cb) -&gt; cb(err)<br>\n            \n              newWindow(url, cb) -&gt; cb(err)<br>\n            \n              name: optional window name<br>\n            \n              Window can later be accessed by name with the window method, <br>\n            \n              or by getting the last handle returned by the windowHandles method.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              rl, name, cb<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              windowName(cb) -&gt; cb(err, name)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementById(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              isVisible(element , cb) -&gt; cb(err, boolean)<br>\n            \n              isVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              Waits for JavaScript condition to be true (polling within wd client): <br>\n            \n              waitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\n            \n              conditionExpr: condition expression, should return a boolean<br>\n            \n              timeout: timeout (optional, default: 1000) <br>\n            \n              pollFreq: pooling frequency (optional, default: 100)<br>\n            \n              return true if condition satisfied, error otherwise.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              Waits for JavaScript condition to be true (async script polling within browser): <br>\n            \n              waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\n            \n              conditionExpr: condition expression, should return a boolean<br>\n            \n              timeout: timeout (optional, default: 1000) <br>\n            \n              pollFreq: pooling frequency (optional, default: 100)<br>\n            \n              return true if condition satisfied, error otherwise.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              isVisible(cb) -&gt; cb(err, boolean)<br>\n            \n          \n          \n        </td>\n      </tr>\n      \n  </tbody>\n</table>\n\n### Full JsonWireProtocol mapping:\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Run the selenium server with chromedriver: \n      java -jar selenium-server-standalone-2.21.0.jar -Dwebdriver.chrome.driver=&lt;PATH&gt;/chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","readmeFilename":"README.md","_id":"wd@0.0.27","dist":{"shasum":"69cf3d1e5740d3599f8c188be72b2a7f2749999a","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.27.tgz"},"_npmVersion":"1.1.68","_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.28":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.28","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.1.x","underscore":"1.4.x","vargs":"~0.1.0","request":"~2.12.0"},"devDependencies":{"mocha":"1.6.x","should":"1.2.x","coffee-script":"1.3.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","nock":"0.13.x","dox":"0.3.x","mu2":"0.5.x","sv-selenium":"0.1.x"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  \n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar webdriver = require('wd')\n  , assert = require('assert');\n\nvar browser = webdriver.remote();\n\nbrowser.on('status', function(info){\n  console.log('\\x1b[36m%s\\x1b[0m', info);\n});\nbrowser.on('command', function(meth, path){\n  console.log(' > \\x1b[33m%s\\x1b[0m: %s', meth, path);\n});\n\ndesired = {\n  browserName:'chrome'\n  , tags: [\"examples\"]\n  , name: \"This is an example test\"\n};\n\nbrowser.init(desired, function() {\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, location) {\n            assert.ok(~location.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Supported Methods\n\n<table class=\"wikitable\">\n  <tbody>\n    <tr>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>JsonWireProtocol</strong>\n      </td>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>wd</strong>\n      </td>\n    </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\n            Query the server's current status.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              status(cb) -&gt; cb(err, status)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\n            Create a new session.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              init(desired, cb) -&gt; cb(err, sessionID)<br>\n\n              Initialize the browser.<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\n            Returns a list of the currently active sessions.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                sessions(cb) -&gt; cb(err, sessions)<br>\n\n            </p>\n\n            <p>\n\n                ## Alternate strategy to get session capabilities from server session list<br>\n\n                altSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\n            Retrieve the capabilities of the specified session.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              sessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\n            Delete the session.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              quit(cb) -&gt; cb(err)<br>\n\n              Destroy the browser.<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\n            Configure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              setPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n\n              (use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\n            Set the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              setAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\n            Set the amount of time the driver should wait when searching for elements.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              setImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\n            Retrieve the current window handle.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              windowHandle(cb) -&gt; cb(err, handle)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\n            Retrieve the list of all window handles available to the session.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              windowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n            Retrieve the URL of the current page.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              url(cb) -&gt; cb(err, url)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n            Navigate to a new URL.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              get(url,cb) -&gt; cb(err)<br>\n\n              Get a new url.<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\n            Navigate forwards in the browser history, if possible.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              forward(cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\n            Navigate backwards in the browser history, if possible.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              back(cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\n            Refresh the current page.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              refresh(cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\n            Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                execute(code, args, cb) -&gt; cb(err, result)<br>\n\n                execute(code, cb) -&gt; cb(err, result)<br>\n\n                args: script argument array (optional)<br>\n\n            </p>\n\n            <p>\n\n                Execute script using eval(code):<br>\n\n                safeExecute(code, args, cb) -&gt; cb(err, result)<br>\n\n                safeExecute(code, cb) -&gt; cb(err, result)<br>\n\n                args: script argument array (optional)<br>\n\n            </p>\n\n            <p>\n\n                Evaluate expression (using execute):<br>\n\n                eval(code, cb) -&gt; cb(err, value)<br>\n\n            </p>\n\n            <p>\n\n                Evaluate expression (using safeExecute):<br>\n\n                safeEval(code, cb) -&gt; cb(err, value)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\n            Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                executeAsync(code, args, cb) -&gt; cb(err, result)<br>\n\n                executeAsync(code, cb) -&gt; cb(err, result)<br>\n\n                args: script argument array (optional)<br>\n\n            </p>\n\n            <p>\n\n                Execute async script using eval(code):<br>\n\n                safeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\n\n                safeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\n\n                args: script argument array (optional)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\n            Take a screenshot of the current page.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              takeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\n            Change focus to another frame on the page.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              frame(frameRef, cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n            Change focus to another window.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              window(name, cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n            Close the current window.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              close(cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Retrieve all cookies visible to the current page.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              allCookies() -&gt; cb(err, cookies)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Set a cookie.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              setCookie(cookie, cb) -&gt; cb(err)<br>\n\n              cookie example:<br>\n\n               {name:'fruit', value:'apple'}<br>\n\n              ## Optional cookie fields<br>\n\n               path, domain, secure, expiry<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Delete all cookies visible to the current page.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              deleteAllCookies(cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\n            Delete the cookie with the given name.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              deleteCookie(name, cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/source\">/session/:sessionId/source</a><br>\n            Get the current page source.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              source(cb) -&gt; cb(err, source)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\n            Get the current page title.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              title(cb) -&gt; cb(err, title)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\n            Search for an element on the page, starting from the document root.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                element(using, value, cb) -&gt; cb(err, element)<br>\n\n            </p>\n\n            <p>\n\n                elementByClassName(value, cb) -&gt; cb(err, element)<br>\n\n                elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\n\n                elementById(value, cb) -&gt; cb(err, element)<br>\n\n                elementByName(value, cb) -&gt; cb(err, element)<br>\n\n                elementByLinkText(value, cb) -&gt; cb(err, element)<br>\n\n                elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\n\n                elementByTagName(value, cb) -&gt; cb(err, element)<br>\n\n                elementByXPath(value, cb) -&gt; cb(err, element)<br>\n\n                elementByCss(value, cb) -&gt; cb(err, element)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\n            Search for multiple elements on the page, starting from the document root.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                elements(using, value, cb) -&gt; cb(err, elements)<br>\n\n            </p>\n\n            <p>\n\n                elementsByClassName(value, cb) -&gt; cb(err, elements)<br>\n\n                elementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\n\n                elementsById(value, cb) -&gt; cb(err, elements)<br>\n\n                elementsByName(value, cb) -&gt; cb(err, elements)<br>\n\n                elementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\n\n                elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\n\n                elementsByTagName(value, cb) -&gt; cb(err, elements)<br>\n\n                elementsByXPath(value, cb) -&gt; cb(err, elements)<br>\n\n                elementsByCss(value, cb) -&gt; cb(err, elements)<br>\n\n            </p>\n\n            <p>\n\n                ## Retrieve an element avoiding not found exception and returning null instead<br>\n\n                elementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n\n            </p>\n\n            <p>\n\n                elementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\n\n                elementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\n\n                elementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\n\n                elementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\n\n                elementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\n\n                elementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\n\n                elementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\n\n                elementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\n\n                elementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n\n            </p>\n\n            <p>\n\n                ## Retrieve an element avoiding not found exception and returning undefined instead<br>\n\n                elementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n\n            </p>\n\n            <p>\n\n                elementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\n\n                elementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\n\n                elementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\n\n                elementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\n\n                elementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\n\n                elementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\n\n                elementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\n\n                elementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\n\n                elementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n\n            </p>\n\n            <p>\n\n                ## Check if element exists<br>\n\n                hasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n\n            </p>\n\n            <p>\n\n                hasElementByClassName(value, cb) -&gt; cb(err, boolean)<br>\n\n                hasElementByCssSelector(value, cb) -&gt; cb(err, boolean)<br>\n\n                hasElementById(value, cb) -&gt; cb(err, boolean)<br>\n\n                hasElementByName(value, cb) -&gt; cb(err, boolean)<br>\n\n                hasElementByLinkText(value, cb) -&gt; cb(err, boolean)<br>\n\n                hasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean)<br>\n\n                hasElementByTagName(value, cb) -&gt; cb(err, boolean)<br>\n\n                hasElementByXPath(value, cb) -&gt; cb(err, boolean)<br>\n\n                hasElementByCss(value, cb) -&gt; cb(err, boolean)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\n            Get the element on the page that currently has focus.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              active(cb) -&gt; cb(err, element)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/element\">/session/:sessionId/element/:id/element</a><br>\n            Search for an element on the page, starting from the identified element.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              elementByClassName(value, cb) -&gt; cb(err, element)<br>\n\n              elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\n\n              elementById(value, cb) -&gt; cb(err, element)<br>\n\n              elementByName(value, cb) -&gt; cb(err, element)<br>\n\n              elementByLinkText(value, cb) -&gt; cb(err, element)<br>\n\n              elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\n\n              elementByTagName(value, cb) -&gt; cb(err, element)<br>\n\n              elementByXPath(value, cb) -&gt; cb(err, element)<br>\n\n              elementByCss(value, cb) -&gt; cb(err, element)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\n            Click on an element.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                clickElement(element, cb) -&gt; cb(err)<br>\n\n            </p>\n\n            <p>\n\n                element.click(cb) -&gt; cb(err)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\n            Returns the visible text for the element.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                text(element, cb) -&gt; cb(err, text)<br>\n\n                element: specific element, 'body', or undefined<br>\n\n            </p>\n\n            <p>\n\n                element.text(cb) -&gt; cb(err, text)<br>\n\n            </p>\n\n            <p>\n\n                ## Check if text is present<br>\n\n                textPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\n\n                element: specific element, 'body', or undefined<br>\n\n            </p>\n\n            <p>\n\n                element.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\n            Send a sequence of key strokes to an element.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                type(element, keys, cb) -&gt; cb(err)<br>\n\n                Type keys (all keys are up at the end of command).<br>\n\n                special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n\n            </p>\n\n            <p>\n\n                element.type(keys, cb) -&gt; cb(err)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\n            Send a sequence of key strokes to the active element.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              keys(keys, cb) -&gt; cb(err)<br>\n\n              Press keys (keys may still be down at the end of command).<br>\n\n              special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\n            Query for an element's tag name.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                getTagName(element, cb) -&gt; cb(err, name)<br>\n\n            </p>\n\n            <p>\n\n                element.getTagName(cb) -&gt; cb(err, name)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\n            Clear a TEXTAREA or text INPUT element's value.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                clear(element, cb) -&gt; cb(err)<br>\n\n            </p>\n\n            <p>\n\n                element.clear(cb) -&gt; cb(err)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\n            Get the value of an element's attribute.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                getAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n\n            </p>\n\n            <p>\n\n                element.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n\n            </p>\n\n            <p>\n\n                Get element value (in value attribute):<br>\n\n                getValue(element, cb) -&gt; cb(err, value)<br>\n\n            </p>\n\n            <p>\n\n                element.getValue(cb) -&gt; cb(err, value)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\n            Determine if an element is currently displayed.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                isDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n\n            </p>\n\n            <p>\n\n                element.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location\">/session/:sessionId/element/:id/location</a><br>\n            Determine an element's location on the page.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                getLocation(element, cb) -&gt; cb(err, location)<br>\n\n            </p>\n\n            <p>\n\n                element.getLocation(cb) -&gt; cb(err, location)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size\">/session/:sessionId/element/:id/size</a><br>\n            Determine an element's size in pixels.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                getSize(element, cb) -&gt; cb(err, size)<br>\n\n            </p>\n\n            <p>\n\n                element.getSize(cb) -&gt; cb(err, size)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\n            Query the value of an element's computed CSS property.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n            <p>\n\n                getComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n\n            </p>\n\n            <p>\n\n                element.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n\n            </p>\n\n            <p>\n\n                element.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n\n            </p>\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\n            Get the current browser orientation.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              getOrientation(cb) -&gt; cb(err, orientation)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\n            Set the browser orientation.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              setOrientation(cb) -&gt; cb(err, orientation)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\n            Gets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              alertText(cb) -&gt; cb(err, text)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\n            Sends keystrokes to a JavaScript prompt() dialog.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              alertKeys(keys, cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\n            Accepts the currently displayed alert dialog.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              acceptAlert(cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\n            Dismisses the currently displayed alert dialog.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              dismissAlert(cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\n            Move the mouse by an offset of the specificed element.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              moveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\n\n              Move to element, xoffset and y offset are optional.<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\n            Click any mouse button (at the coordinates set by the last moveto command).\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              click(button, cb) -&gt; cb(err)<br>\n\n              Click on current element.<br>\n\n              Buttons: {left: 0, middle: 1 , right: 2}<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\n            Click and hold the left mouse button (at the coordinates set by the last moveto command).\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              buttonDown(cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\n            Releases the mouse button previously held (where the mouse is currently at).\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              buttonUp(cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\n            Double-clicks at the current mouse coordinates (set by moveto).\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              doubleclick(cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/location\">/session/:sessionId/location</a><br>\n            Set the current geo location.\n\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              setGeoLocation(location, cb) -&gt; cb(err, location)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n            EXTRA\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              esired, cb<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n            EXTRA\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              Opens a new window (using Javascript window.open):<br>\n\n              newWindow(url, name, cb) -&gt; cb(err)<br>\n\n              newWindow(url, cb) -&gt; cb(err)<br>\n\n              name: optional window name<br>\n\n              Window can later be accessed by name with the window method,<br>\n\n              or by getting the last handle returned by the windowHandles method.<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n            EXTRA\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              rl, name, cb<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n            EXTRA\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              windowName(cb) -&gt; cb(err, name)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n            EXTRA\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              waitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n            EXTRA\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              waitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n            EXTRA\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              waitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForElementById(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n            EXTRA\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              waitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\n\n              waitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n            EXTRA\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              isVisible(element , cb) -&gt; cb(err, boolean)<br>\n\n              isVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n            EXTRA\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              Waits for JavaScript condition to be true (polling within wd client):<br>\n\n              waitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\n\n              waitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\n\n              waitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\n\n              conditionExpr: condition expression, should return a boolean<br>\n\n              timeout: timeout (optional, default: 1000)<br>\n\n              pollFreq: pooling frequency (optional, default: 100)<br>\n\n              return true if condition satisfied, error otherwise.<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n            EXTRA\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              Waits for JavaScript condition to be true (async script polling within browser):<br>\n\n              waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\n\n              waitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\n\n              waitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\n\n              conditionExpr: condition expression, should return a boolean<br>\n\n              timeout: timeout (optional, default: 1000)<br>\n\n              pollFreq: pooling frequency (optional, default: 100)<br>\n\n              return true if condition satisfied, error otherwise.<br>\n\n\n\n        </td>\n      </tr>\n\n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n            EXTRA\n\n\n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n\n\n\n              isVisible(cb) -&gt; cb(err, boolean)<br>\n\n\n\n        </td>\n      </tr>\n\n  </tbody>\n</table>\n\n\n### Full JsonWireProtocol mapping:\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Run the selenium server with chromedriver:\n      java -jar selenium-server-standalone-2.21.0.jar -Dwebdriver.chrome.driver=&lt;PATH&gt;/chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","readmeFilename":"README.md","_id":"wd@0.0.28","dist":{"shasum":"289c07816306222b899b29d9c4c6a594fcec60e9","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.28.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.29":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.29","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.1.x","underscore":"1.4.x","vargs":"~0.1.0","request":"~2.12.0","q":"0.8.x"},"devDependencies":{"mocha":"1.6.x","should":"1.2.x","coffee-script":"1.3.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","nock":"0.13.x","dox":"0.3.x","mu2":"0.5.x","sv-selenium":"0.1.x"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar webdriver = require('wd')\n  , assert = require('assert');\n\nvar browser = webdriver.remote();\n\nbrowser.on('status', function(info){\n  console.log('\\x1b[36m%s\\x1b[0m', info);\n});\nbrowser.on('command', function(meth, path){\n  console.log(' > \\x1b[33m%s\\x1b[0m: %s', meth, path);\n});\n\ndesired = {\n  browserName:'chrome'\n  , tags: [\"examples\"]\n  , name: \"This is an example test\"\n};\n\nbrowser.init(desired, function() {\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, location) {\n            assert.ok(~location.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Promises Api\n\nA promise api using [q](https://github.com/kriskowal/q) is\navailable. Code sample is\n[here](https://github.com/admc/wd/blob/master/examples/example.promise.chrome.js).\n\n## Chain Api\n\nA chain api is also available. Code sample is [here](https://github.com/admc/wd/blob/master/examples/example.chain.chrome.js).\n\n## Supported Methods\n\n<table class=\"wikitable\">\n<tbody>\n<tr>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>JsonWireProtocol</strong>\n</td>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>wd</strong>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\n\">\n/status\n</a><br>\nQuery the server's current status.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nstatus(cb) -&gt; cb(err, status)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\n\">\n/session\n</a><br>\nCreate a new session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ninit(desired, cb) -&gt; cb(err, sessionID)\n<br>\nInitialize the browser.\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\n\">\n/sessions\n</a><br>\nReturns a list of the currently active sessions.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsessions(cb) -&gt; cb(err, sessions)\n<br>\n</p>\n<p>\n## Alternate strategy to get session capabilities from server session list\n<br>\naltSessionCapabilities(cb) -&gt; cb(err, capabilities)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\n\">\n/session/:sessionId\n</a><br>\nRetrieve the capabilities of the specified session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsessionCapabilities(cb) -&gt; cb(err, capabilities)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\n\">\n/session/:sessionId\n</a><br>\nDelete the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nquit(cb) -&gt; cb(err)\n<br>\nDestroy the browser.\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\n\">\n/session/:sessionId/timeouts\n</a><br>\nConfigure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetPageLoadTimeout(ms, cb) -&gt; cb(err)\n<br>\n(use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\n\">\n/session/:sessionId/timeouts/async_script\n</a><br>\nSet the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetAsyncScriptTimeout(ms, cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\n\">\n/session/:sessionId/timeouts/implicit_wait\n</a><br>\nSet the amount of time the driver should wait when searching for elements.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetImplicitWaitTimeout(ms, cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\n\">\n/session/:sessionId/window_handle\n</a><br>\nRetrieve the current window handle.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandle(cb) -&gt; cb(err, handle)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\n\">\n/session/:sessionId/window_handles\n</a><br>\nRetrieve the list of all window handles available to the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandles(cb) -&gt; cb(err, arrayOfHandles)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\n\">\n/session/:sessionId/url\n</a><br>\nRetrieve the URL of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nurl(cb) -&gt; cb(err, url)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\n\">\n/session/:sessionId/url\n</a><br>\nNavigate to a new URL.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nget(url,cb) -&gt; cb(err)\n<br>\nGet a new url.\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\n\">\n/session/:sessionId/forward\n</a><br>\nNavigate forwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nforward(cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\n\">\n/session/:sessionId/back\n</a><br>\nNavigate backwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nback(cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\n\">\n/session/:sessionId/refresh\n</a><br>\nRefresh the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrefresh(cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\n\">\n/session/:sessionId/execute\n</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecute(code, args, cb) -&gt; cb(err, result)\n<br>\nexecute(code, cb) -&gt; cb(err, result)\n<br>\nargs: script argument array (optional)\n<br>\n</p>\n<p>\nExecute script using eval(code):\n<br>\nsafeExecute(code, args, cb) -&gt; cb(err, result)\n<br>\nsafeExecute(code, cb) -&gt; cb(err, result)\n<br>\nargs: script argument array (optional)\n<br>\n</p>\n<p>\nEvaluate expression (using execute):\n<br>\neval(code, cb) -&gt; cb(err, value)\n<br>\n</p>\n<p>\nEvaluate expression (using safeExecute):\n<br>\nsafeEval(code, cb) -&gt; cb(err, value)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\n\">\n/session/:sessionId/execute_async\n</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecuteAsync(code, args, cb) -&gt; cb(err, result)\n<br>\nexecuteAsync(code, cb) -&gt; cb(err, result)\n<br>\nargs: script argument array (optional)\n<br>\n</p>\n<p>\nExecute async script using eval(code):\n<br>\nsafeExecuteAsync(code, args, cb) -&gt; cb(err, result)\n<br>\nsafeExecuteAsync(code, cb) -&gt; cb(err, result)\n<br>\nargs: script argument array (optional)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\n\">\n/session/:sessionId/screenshot\n</a><br>\nTake a screenshot of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntakeScreenshot(cb) -&gt; cb(err, screenshot)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\n\">\n/session/:sessionId/frame\n</a><br>\nChange focus to another frame on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nframe(frameRef, cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\n\">\n/session/:sessionId/window\n</a><br>\nChange focus to another window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindow(name, cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\n\">\n/session/:sessionId/window\n</a><br>\nClose the current window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclose(cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\n\">\n/session/:sessionId/cookie\n</a><br>\nRetrieve all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nallCookies() -&gt; cb(err, cookies)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\n\">\n/session/:sessionId/cookie\n</a><br>\nSet a cookie.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetCookie(cookie, cb) -&gt; cb(err)\n<br>\ncookie example:\n<br>\n{name:'fruit', value:'apple'}\n<br>\n## Optional cookie fields\n<br>\npath, domain, secure, expiry\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\n\">\n/session/:sessionId/cookie\n</a><br>\nDelete all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteAllCookies(cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\n\">\n/session/:sessionId/cookie/:name\n</a><br>\nDelete the cookie with the given name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteCookie(name, cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/source\n\">\n/session/:sessionId/source\n</a><br>\nGet the current page source.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsource(cb) -&gt; cb(err, source)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\n\">\n/session/:sessionId/title\n</a><br>\nGet the current page title.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntitle(cb) -&gt; cb(err, title)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\n\">\n/session/:sessionId/element\n</a><br>\nSearch for an element on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement(using, value, cb) -&gt; cb(err, element)\n<br>\n</p>\n<p>\nelementByClassName(value, cb) -&gt; cb(err, element)\n<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)\n<br>\nelementById(value, cb) -&gt; cb(err, element)\n<br>\nelementByName(value, cb) -&gt; cb(err, element)\n<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)\n<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)\n<br>\nelementByTagName(value, cb) -&gt; cb(err, element)\n<br>\nelementByXPath(value, cb) -&gt; cb(err, element)\n<br>\nelementByCss(value, cb) -&gt; cb(err, element)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\n\">\n/session/:sessionId/elements\n</a><br>\nSearch for multiple elements on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelements(using, value, cb) -&gt; cb(err, elements)\n<br>\n</p>\n<p>\nelementsByClassName(value, cb) -&gt; cb(err, elements)\n<br>\nelementsByCssSelector(value, cb) -&gt; cb(err, elements)\n<br>\nelementsById(value, cb) -&gt; cb(err, elements)\n<br>\nelementsByName(value, cb) -&gt; cb(err, elements)\n<br>\nelementsByLinkText(value, cb) -&gt; cb(err, elements)\n<br>\nelementsByPartialLinkText(value, cb) -&gt; cb(err, elements)\n<br>\nelementsByTagName(value, cb) -&gt; cb(err, elements)\n<br>\nelementsByXPath(value, cb) -&gt; cb(err, elements)\n<br>\nelementsByCss(value, cb) -&gt; cb(err, elements)\n<br>\n</p>\n<p>\n## Retrieve an element avoiding not found exception and returning null instead\n<br>\nelementOrNull(using, value, cb) -&gt; cb(err, element)\n<br>\n</p>\n<p>\nelementByClassNameOrNull(value, cb) -&gt; cb(err, element)\n<br>\nelementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)\n<br>\nelementByIdOrNull(value, cb) -&gt; cb(err, element)\n<br>\nelementByNameOrNull(value, cb) -&gt; cb(err, element)\n<br>\nelementByLinkTextOrNull(value, cb) -&gt; cb(err, element)\n<br>\nelementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)\n<br>\nelementByTagNameOrNull(value, cb) -&gt; cb(err, element)\n<br>\nelementByXPathOrNull(value, cb) -&gt; cb(err, element)\n<br>\nelementByCssOrNull(value, cb) -&gt; cb(err, element)\n<br>\n</p>\n<p>\n## Retrieve an element avoiding not found exception and returning undefined instead\n<br>\nelementIfExists(using, value, cb) -&gt; cb(err, element)\n<br>\n</p>\n<p>\nelementByClassNameIfExists(value, cb) -&gt; cb(err, element)\n<br>\nelementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)\n<br>\nelementByIdIfExists(value, cb) -&gt; cb(err, element)\n<br>\nelementByNameIfExists(value, cb) -&gt; cb(err, element)\n<br>\nelementByLinkTextIfExists(value, cb) -&gt; cb(err, element)\n<br>\nelementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)\n<br>\nelementByTagNameIfExists(value, cb) -&gt; cb(err, element)\n<br>\nelementByXPathIfExists(value, cb) -&gt; cb(err, element)\n<br>\nelementByCssIfExists(value, cb) -&gt; cb(err, element)\n<br>\n</p>\n<p>\n## Check if element exists\n<br>\nhasElement(using, value, cb) -&gt; cb(err, boolean)\n<br>\n</p>\n<p>\nhasElementByClassName(value, cb) -&gt; cb(err, boolean)\n<br>\nhasElementByCssSelector(value, cb) -&gt; cb(err, boolean)\n<br>\nhasElementById(value, cb) -&gt; cb(err, boolean)\n<br>\nhasElementByName(value, cb) -&gt; cb(err, boolean)\n<br>\nhasElementByLinkText(value, cb) -&gt; cb(err, boolean)\n<br>\nhasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean)\n<br>\nhasElementByTagName(value, cb) -&gt; cb(err, boolean)\n<br>\nhasElementByXPath(value, cb) -&gt; cb(err, boolean)\n<br>\nhasElementByCss(value, cb) -&gt; cb(err, boolean)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\n\">\n/session/:sessionId/element/active\n</a><br>\nGet the element on the page that currently has focus.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nactive(cb) -&gt; cb(err, element)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/element\n\">\n/session/:sessionId/element/:id/element\n</a><br>\nSearch for an element on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nelementByClassName(value, cb) -&gt; cb(err, element)\n<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)\n<br>\nelementById(value, cb) -&gt; cb(err, element)\n<br>\nelementByName(value, cb) -&gt; cb(err, element)\n<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)\n<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)\n<br>\nelementByTagName(value, cb) -&gt; cb(err, element)\n<br>\nelementByXPath(value, cb) -&gt; cb(err, element)\n<br>\nelementByCss(value, cb) -&gt; cb(err, element)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\n\">\n/session/:sessionId/element/:id/click\n</a><br>\nClick on an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclickElement(element, cb) -&gt; cb(err)\n<br>\n</p>\n<p>\nelement.click(cb) -&gt; cb(err)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/submit\n\">\n/session/:sessionId/element/:id/submit\n</a><br>\nSubmit a FORM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsubmit(element, cb) -&gt; cb(err)\n<br>\nSubmit a `FORM` element.\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\n\">\n/session/:sessionId/element/:id/text\n</a><br>\nReturns the visible text for the element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntext(element, cb) -&gt; cb(err, text)\n<br>\nelement: specific element, 'body', or undefined\n<br>\n</p>\n<p>\nelement.text(cb) -&gt; cb(err, text)\n<br>\n</p>\n<p>\n## Check if text is present\n<br>\ntextPresent(searchText, element, cb) -&gt; cb(err, boolean)\n<br>\nelement: specific element, 'body', or undefined\n<br>\n</p>\n<p>\nelement.textPresent(searchText, cb) -&gt; cb(err, boolean)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\n\">\n/session/:sessionId/element/:id/value\n</a><br>\nSend a sequence of key strokes to an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntype(element, keys, cb) -&gt; cb(err)\n<br>\nType keys (all keys are up at the end of command).\n<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)\n<br>\n</p>\n<p>\nelement.type(keys, cb) -&gt; cb(err)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\n\">\n/session/:sessionId/keys\n</a><br>\nSend a sequence of key strokes to the active element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nkeys(keys, cb) -&gt; cb(err)\n<br>\nPress keys (keys may still be down at the end of command).\n<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\n\">\n/session/:sessionId/element/:id/name\n</a><br>\nQuery for an element's tag name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetTagName(element, cb) -&gt; cb(err, name)\n<br>\n</p>\n<p>\nelement.getTagName(cb) -&gt; cb(err, name)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\n\">\n/session/:sessionId/element/:id/clear\n</a><br>\nClear a TEXTAREA or text INPUT element's value.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclear(element, cb) -&gt; cb(err)\n<br>\n</p>\n<p>\nelement.clear(cb) -&gt; cb(err)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/selected\n\">\n/session/:sessionId/element/:id/selected\n</a><br>\nDetermine if an OPTION element, or an INPUT element of type checkbox or radiobutton is currently selected.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisSelected(element, cb) -&gt; cb(err, selected)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\n\">\n/session/:sessionId/element/:id/attribute/:name\n</a><br>\nGet the value of an element's attribute.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetAttribute(element, attrName, cb) -&gt; cb(err, value)\n<br>\n</p>\n<p>\nelement.getAttribute(attrName, cb) -&gt; cb(err, value)\n<br>\n</p>\n<p>\nGet element value (in value attribute):\n<br>\ngetValue(element, cb) -&gt; cb(err, value)\n<br>\n</p>\n<p>\nelement.getValue(cb) -&gt; cb(err, value)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\n\">\n/session/:sessionId/element/:id/displayed\n</a><br>\nDetermine if an element is currently displayed.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisDisplayed(element, cb) -&gt; cb(err, displayed)\n<br>\n</p>\n<p>\nelement.isDisplayed(cb) -&gt; cb(err, displayed)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location\n\">\n/session/:sessionId/element/:id/location\n</a><br>\nDetermine an element's location on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetLocation(element, cb) -&gt; cb(err, location)\n<br>\n</p>\n<p>\nelement.getLocation(cb) -&gt; cb(err, location)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size\n\">\n/session/:sessionId/element/:id/size\n</a><br>\nDetermine an element's size in pixels.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetSize(element, cb) -&gt; cb(err, size)\n<br>\n</p>\n<p>\nelement.getSize(cb) -&gt; cb(err, size)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\n\">\n/session/:sessionId/element/:id/css/:propertyName\n</a><br>\nQuery the value of an element's computed CSS property.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetComputedCss(element, cssProperty , cb) -&gt; cb(err, value)\n<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)\n<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)\n<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/orientation\n\">\n/session/:sessionId/orientation\n</a><br>\nGet the current browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetOrientation(cb) -&gt; cb(err, orientation)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/orientation\n\">\n/session/:sessionId/orientation\n</a><br>\nSet the browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetOrientation(cb) -&gt; cb(err, orientation)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\n\">\n/session/:sessionId/alert_text\n</a><br>\nGets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertText(cb) -&gt; cb(err, text)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\n\">\n/session/:sessionId/alert_text\n</a><br>\nSends keystrokes to a JavaScript prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertKeys(keys, cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\n\">\n/session/:sessionId/accept_alert\n</a><br>\nAccepts the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nacceptAlert(cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\n\">\n/session/:sessionId/dismiss_alert\n</a><br>\nDismisses the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndismissAlert(cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\n\">\n/session/:sessionId/moveto\n</a><br>\nMove the mouse by an offset of the specificed element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmoveTo(element, xoffset, yoffset, cb) -&gt; cb(err)\n<br>\nMove to element, xoffset and y offset are optional.\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\n\">\n/session/:sessionId/click\n</a><br>\nClick any mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclick(button, cb) -&gt; cb(err)\n<br>\nClick on current element.\n<br>\nButtons: {left: 0, middle: 1 , right: 2}\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\n\">\n/session/:sessionId/buttondown\n</a><br>\nClick and hold the left mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonDown(cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\n\">\n/session/:sessionId/buttonup\n</a><br>\nReleases the mouse button previously held (where the mouse is currently at).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonUp(cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\n\">\n/session/:sessionId/doubleclick\n</a><br>\nDouble-clicks at the current mouse coordinates (set by moveto).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndoubleclick(cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST\n<a href=\"\nhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/flick\n\">\n/session/:sessionId/touch/flick\n</a><br>\nFlick on the touch screen using finger motion events.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nflick(xSpeed, ySpeed, cb) -&gt; cb(err)\n<br>\nFlicks, starting anywhere on the screen.\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nesired, cb\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nOpens a new window (using Javascript window.open):\n<br>\nnewWindow(url, name, cb) -&gt; cb(err)\n<br>\nnewWindow(url, cb) -&gt; cb(err)\n<br>\nname: optional window name\n<br>\nWindow can later be accessed by name with the window method,\n<br>\nor by getting the last handle returned by the windowHandles method.\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrl, name, cb\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowName(cb) -&gt; cb(err, name)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElement(using, value, timeout, cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisible(using, value, timeout, cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElementByClassName(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForElementById(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForElementByName(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForElementByLinkText(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForElementByTagName(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForElementByXPath(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForElementByCss(value, timeout, cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForVisibleById(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForVisibleByName(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)\n<br>\nwaitForVisibleByCss(value, timeout, cb) -&gt; cb(err)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(element , cb) -&gt; cb(err, boolean)\n<br>\nisVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (polling within wd client):\n<br>\nwaitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)\n<br>\nwaitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)\n<br>\nwaitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)\n<br>\nconditionExpr: condition expression, should return a boolean\n<br>\ntimeout: timeout (optional, default: 1000)\n<br>\npollFreq: pooling frequency (optional, default: 100)\n<br>\nreturn true if condition satisfied, error otherwise.\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (async script polling within browser):\n<br>\nwaitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)\n<br>\nwaitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)\n<br>\nwaitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)\n<br>\nconditionExpr: condition expression, should return a boolean\n<br>\ntimeout: timeout (optional, default: 1000)\n<br>\npollFreq: pooling frequency (optional, default: 100)\n<br>\nreturn true if condition satisfied, error otherwise.\n<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(cb) -&gt; cb(err, boolean)\n<br>\n</td>\n</tr>\n</tbody>\n</table>\n\n## JsonWireProtocol mapping\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Run the selenium server with chromedriver:\n      java -jar selenium-server-standalone-2.21.0.jar -Dwebdriver.chrome.driver=&lt;PATH&gt;/chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n<pre>\n  - make mapping > doc/jsonwire-mapping.md \n  - make full_mapping > doc/jsonwire-full-mapping.md\n</pre>\n\nThe content of doc/jsonwire-mapping.md should then be manually integrated into\nREADME.md.\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","readmeFilename":"README.md","_id":"wd@0.0.29","dist":{"shasum":"e9ffb2dbdb04c1ecbe7d6ae1bdf037d1a974e02c","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.29.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.30":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.30","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.1.x","underscore":"1.4.x","vargs":"~0.1.0","request":"~2.12.0","q":"0.8.x"},"devDependencies":{"mocha":"1.6.x","should":"1.2.x","coffee-script":"1.3.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","nock":"0.13.x","dox":"0.3.x","mu2":"0.5.x","sv-selenium":"0.1.x"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar webdriver = require('wd')\n  , assert = require('assert');\n\nvar browser = webdriver.remote();\n\nbrowser.on('status', function(info){\n  console.log('\\x1b[36m%s\\x1b[0m', info);\n});\nbrowser.on('command', function(meth, path){\n  console.log(' > \\x1b[33m%s\\x1b[0m: %s', meth, path);\n});\n\ndesired = {\n  browserName:'chrome'\n  , tags: [\"examples\"]\n  , name: \"This is an example test\"\n};\n\nbrowser.init(desired, function() {\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, location) {\n            assert.ok(~location.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Promises Api\n\nA promise api using [q](https://github.com/kriskowal/q) is\navailable. Code sample is\n[here](https://github.com/admc/wd/blob/master/examples/example.promise.chrome.js).\n\n## Chain Api\n\nA chain api is also available. Code sample is [here](https://github.com/admc/wd/blob/master/examples/example.chain.chrome.js).\n\n## Supported Methods\n\n<table class=\"wikitable\">\n<tbody>\n<tr>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>JsonWireProtocol</strong>\n</td>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>wd</strong>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\nQuery the server's current status.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nstatus(cb) -&gt; cb(err, status)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\nCreate a new session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ninit(desired, cb) -&gt; cb(err, sessionID)<br>\nInitialize the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\nReturns a list of the currently active sessions.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsessions(cb) -&gt; cb(err, sessions)<br>\n</p>\n<p>\n## Alternate strategy to get session capabilities from server session list<br>\naltSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\nRetrieve the capabilities of the specified session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\nDelete the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nquit(cb) -&gt; cb(err)<br>\nDestroy the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\nConfigure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n(use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\nSet the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\nSet the amount of time the driver should wait when searching for elements.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\nRetrieve the current window handle.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandle(cb) -&gt; cb(err, handle)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\nRetrieve the list of all window handles available to the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nRetrieve the URL of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nurl(cb) -&gt; cb(err, url)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nNavigate to a new URL.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nget(url,cb) -&gt; cb(err)<br>\nGet a new url.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\nNavigate forwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nforward(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\nNavigate backwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nback(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\nRefresh the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrefresh(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecute(code, args, cb) -&gt; cb(err, result)<br>\nexecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nExecute script using eval(code):<br>\nsafeExecute(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nEvaluate expression (using execute):<br>\neval(code, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nEvaluate expression (using safeExecute):<br>\nsafeEval(code, cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nexecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nExecute async script using eval(code):<br>\nsafeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\nTake a screenshot of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntakeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\nChange focus to another frame on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nframe(frameRef, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nChange focus to another window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindow(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nClose the current window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclose(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/maximize\">/session/:sessionId/window/:windowHandle/maximize</a><br>\nMaximize the specified window if not already maximized.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmaximize(handle, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nRetrieve all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nallCookies() -&gt; cb(err, cookies)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nSet a cookie.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetCookie(cookie, cb) -&gt; cb(err)<br>\ncookie example:<br>\n{name:'fruit', value:'apple'}<br>\n## Optional cookie fields<br>\npath, domain, secure, expiry<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nDelete all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteAllCookies(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\nDelete the cookie with the given name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteCookie(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/source\">/session/:sessionId/source</a><br>\nGet the current page source.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsource(cb) -&gt; cb(err, source)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\nGet the current page title.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntitle(cb) -&gt; cb(err, title)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\nSearch for an element on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassName(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelementById(value, cb) -&gt; cb(err, element)<br>\nelementByName(value, cb) -&gt; cb(err, element)<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByTagName(value, cb) -&gt; cb(err, element)<br>\nelementByXPath(value, cb) -&gt; cb(err, element)<br>\nelementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\nSearch for multiple elements on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelementsById(value, cb) -&gt; cb(err, elements)<br>\nelementsByName(value, cb) -&gt; cb(err, elements)<br>\nelementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\n## Retrieve an element avoiding not found exception and returning null instead<br>\nelementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\n## Retrieve an element avoiding not found exception and returning undefined instead<br>\nelementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\n## Check if element exists<br>\nhasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n</p>\n<p>\nhasElementByClassName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCssSelector(value, cb) -&gt; cb(err, boolean)<br>\nhasElementById(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByTagName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByXPath(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCss(value, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\nGet the element on the page that currently has focus.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nactive(cb) -&gt; cb(err, element)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/element\">/session/:sessionId/element/:id/element</a><br>\nSearch for an element on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nelementByClassName(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelementById(value, cb) -&gt; cb(err, element)<br>\nelementByName(value, cb) -&gt; cb(err, element)<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByTagName(value, cb) -&gt; cb(err, element)<br>\nelementByXPath(value, cb) -&gt; cb(err, element)<br>\nelementByCss(value, cb) -&gt; cb(err, element)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\nClick on an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclickElement(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.click(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/submit\">/session/:sessionId/element/:id/submit</a><br>\nSubmit a FORM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsubmit(element, cb) -&gt; cb(err)<br>\nSubmit a `FORM` element.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\nReturns the visible text for the element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntext(element, cb) -&gt; cb(err, text)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.text(cb) -&gt; cb(err, text)<br>\n</p>\n<p>\n## Check if text is present<br>\ntextPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\nSend a sequence of key strokes to an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntype(element, keys, cb) -&gt; cb(err)<br>\nType keys (all keys are up at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</p>\n<p>\nelement.type(keys, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\nSend a sequence of key strokes to the active element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nkeys(keys, cb) -&gt; cb(err)<br>\nPress keys (keys may still be down at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\nQuery for an element's tag name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetTagName(element, cb) -&gt; cb(err, name)<br>\n</p>\n<p>\nelement.getTagName(cb) -&gt; cb(err, name)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\nClear a TEXTAREA or text INPUT element's value.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclear(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.clear(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/selected\">/session/:sessionId/element/:id/selected</a><br>\nDetermine if an OPTION element, or an INPUT element of type checkbox or radiobutton is currently selected.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisSelected(element, cb) -&gt; cb(err, selected)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\nGet the value of an element's attribute.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nGet element value (in value attribute):<br>\ngetValue(element, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getValue(cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\nDetermine if an element is currently displayed.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n</p>\n<p>\nelement.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location\">/session/:sessionId/element/:id/location</a><br>\nDetermine an element's location on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetLocation(element, cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocation(cb) -&gt; cb(err, location)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size\">/session/:sessionId/element/:id/size</a><br>\nDetermine an element's size in pixels.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetSize(element, cb) -&gt; cb(err, size)<br>\n</p>\n<p>\nelement.getSize(cb) -&gt; cb(err, size)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\nQuery the value of an element's computed CSS property.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nGet the current browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nSet the browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nGets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertText(cb) -&gt; cb(err, text)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nSends keystrokes to a JavaScript prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\nAccepts the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nacceptAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\nDismisses the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndismissAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\nMove the mouse by an offset of the specificed element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmoveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\nMove to element, xoffset and y offset are optional.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\nClick any mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclick(button, cb) -&gt; cb(err)<br>\nClick on current element.<br>\nButtons: {left: 0, middle: 1 , right: 2}<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\nClick and hold the left mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonDown(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\nReleases the mouse button previously held (where the mouse is currently at).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonUp(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\nDouble-clicks at the current mouse coordinates (set by moveto).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndoubleclick(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/flick\">/session/:sessionId/touch/flick</a><br>\nFlick on the touch screen using finger motion events.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nflick(xSpeed, ySpeed, cb) -&gt; cb(err)<br>\nFlicks, starting anywhere on the screen.<br>\nflick(element, xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\nFlicks, starting at element center.<br>\n</p>\n<p>\nelement.flick(xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nesired, cb<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nOpens a new window (using Javascript window.open):<br>\nnewWindow(url, name, cb) -&gt; cb(err)<br>\nnewWindow(url, cb) -&gt; cb(err)<br>\nname: optional window name<br>\nWindow can later be accessed by name with the window method,<br>\nor by getting the last handle returned by the windowHandles method.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrl, name, cb<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowName(cb) -&gt; cb(err, name)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(element , cb) -&gt; cb(err, boolean)<br>\nisVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (polling within wd client):<br>\nwaitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (async script polling within browser):<br>\nwaitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n</tbody>\n</table>\n\n## JsonWireProtocol mapping\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Run the selenium server with chromedriver:\n      java -jar selenium-server-standalone-2.21.0.jar -Dwebdriver.chrome.driver=&lt;PATH&gt;/chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n<pre>\n  - make mapping > doc/jsonwire-mapping.md \n  - make full_mapping > doc/jsonwire-full-mapping.md\n</pre>\n\nThe content of doc/jsonwire-mapping.md should then be manually integrated into\nREADME.md.\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","readmeFilename":"README.md","_id":"wd@0.0.30","dist":{"shasum":"d130498b24caf4433c25358f31f4f7cd5dc478f0","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.30.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.31":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.31","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.1.x","underscore":"1.4.x","vargs":"~0.1.0","request":"~2.12.0","q":"0.8.x"},"devDependencies":{"mocha":"1.6.x","should":"1.2.x","coffee-script":"1.3.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","nock":"0.13.x","dox":"0.3.x","mu2":"0.5.x","sv-selenium":"0.1.x"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar webdriver = require('wd')\n  , assert = require('assert');\n\nvar browser = webdriver.remote();\n\nbrowser.on('status', function(info){\n  console.log('\\x1b[36m%s\\x1b[0m', info);\n});\nbrowser.on('command', function(meth, path){\n  console.log(' > \\x1b[33m%s\\x1b[0m: %s', meth, path);\n});\n\ndesired = {\n  browserName:'chrome'\n  , tags: [\"examples\"]\n  , name: \"This is an example test\"\n};\n\nbrowser.init(desired, function() {\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, location) {\n            assert.ok(~location.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Promises Api\n\nA promise api using [q](https://github.com/kriskowal/q) is\navailable. Code sample is\n[here](https://github.com/admc/wd/blob/master/examples/example.promise.chrome.js).\n\n## Chain Api\n\nA chain api is also available. Code sample is [here](https://github.com/admc/wd/blob/master/examples/example.chain.chrome.js).\n\n## Supported Methods\n\n<table class=\"wikitable\">\n<tbody>\n<tr>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>JsonWireProtocol</strong>\n</td>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>wd</strong>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\nQuery the server's current status.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nstatus(cb) -&gt; cb(err, status)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\nCreate a new session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ninit(desired, cb) -&gt; cb(err, sessionID)<br>\nInitialize the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\nReturns a list of the currently active sessions.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsessions(cb) -&gt; cb(err, sessions)<br>\n</p>\n<p>\n## Alternate strategy to get session capabilities from server session list<br>\naltSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\nRetrieve the capabilities of the specified session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\nDelete the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nquit(cb) -&gt; cb(err)<br>\nDestroy the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\nConfigure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n(use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\nSet the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\nSet the amount of time the driver should wait when searching for elements.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\nRetrieve the current window handle.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandle(cb) -&gt; cb(err, handle)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\nRetrieve the list of all window handles available to the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nRetrieve the URL of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nurl(cb) -&gt; cb(err, url)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nNavigate to a new URL.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nget(url,cb) -&gt; cb(err)<br>\nGet a new url.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\nNavigate forwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nforward(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\nNavigate backwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nback(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\nRefresh the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrefresh(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecute(code, args, cb) -&gt; cb(err, result)<br>\nexecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nExecute script using eval(code):<br>\nsafeExecute(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nEvaluate expression (using execute):<br>\neval(code, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nEvaluate expression (using safeExecute):<br>\nsafeEval(code, cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nexecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nExecute async script using eval(code):<br>\nsafeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\nTake a screenshot of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntakeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\nChange focus to another frame on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nframe(frameRef, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nChange focus to another window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindow(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nClose the current window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclose(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/maximize\">/session/:sessionId/window/:windowHandle/maximize</a><br>\nMaximize the specified window if not already maximized.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmaximize(handle, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nRetrieve all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nallCookies() -&gt; cb(err, cookies)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nSet a cookie.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetCookie(cookie, cb) -&gt; cb(err)<br>\ncookie example:<br>\n{name:'fruit', value:'apple'}<br>\n## Optional cookie fields<br>\npath, domain, secure, expiry<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nDelete all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteAllCookies(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\nDelete the cookie with the given name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteCookie(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/source\">/session/:sessionId/source</a><br>\nGet the current page source.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsource(cb) -&gt; cb(err, source)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\nGet the current page title.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntitle(cb) -&gt; cb(err, title)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\nSearch for an element on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassName(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelementById(value, cb) -&gt; cb(err, element)<br>\nelementByName(value, cb) -&gt; cb(err, element)<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByTagName(value, cb) -&gt; cb(err, element)<br>\nelementByXPath(value, cb) -&gt; cb(err, element)<br>\nelementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\nSearch for multiple elements on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelementsById(value, cb) -&gt; cb(err, elements)<br>\nelementsByName(value, cb) -&gt; cb(err, elements)<br>\nelementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\n## Retrieve an element avoiding not found exception and returning null instead<br>\nelementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\n## Retrieve an element avoiding not found exception and returning undefined instead<br>\nelementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\n## Check if element exists<br>\nhasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n</p>\n<p>\nhasElementByClassName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCssSelector(value, cb) -&gt; cb(err, boolean)<br>\nhasElementById(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByTagName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByXPath(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCss(value, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\nGet the element on the page that currently has focus.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nactive(cb) -&gt; cb(err, element)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/element\">/session/:sessionId/element/:id/element</a><br>\nSearch for an element on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nelementByClassName(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelementById(value, cb) -&gt; cb(err, element)<br>\nelementByName(value, cb) -&gt; cb(err, element)<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByTagName(value, cb) -&gt; cb(err, element)<br>\nelementByXPath(value, cb) -&gt; cb(err, element)<br>\nelementByCss(value, cb) -&gt; cb(err, element)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\nClick on an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclickElement(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.click(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/submit\">/session/:sessionId/element/:id/submit</a><br>\nSubmit a FORM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsubmit(element, cb) -&gt; cb(err)<br>\nSubmit a `FORM` element.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\nReturns the visible text for the element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntext(element, cb) -&gt; cb(err, text)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.text(cb) -&gt; cb(err, text)<br>\n</p>\n<p>\n## Check if text is present<br>\ntextPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\nSend a sequence of key strokes to an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntype(element, keys, cb) -&gt; cb(err)<br>\nType keys (all keys are up at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</p>\n<p>\nelement.type(keys, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\nSend a sequence of key strokes to the active element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nkeys(keys, cb) -&gt; cb(err)<br>\nPress keys (keys may still be down at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\nQuery for an element's tag name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetTagName(element, cb) -&gt; cb(err, name)<br>\n</p>\n<p>\nelement.getTagName(cb) -&gt; cb(err, name)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\nClear a TEXTAREA or text INPUT element's value.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclear(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.clear(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/selected\">/session/:sessionId/element/:id/selected</a><br>\nDetermine if an OPTION element, or an INPUT element of type checkbox or radiobutton is currently selected.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisSelected(element, cb) -&gt; cb(err, selected)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\nGet the value of an element's attribute.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nGet element value (in value attribute):<br>\ngetValue(element, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getValue(cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\nDetermine if an element is currently displayed.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n</p>\n<p>\nelement.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location\">/session/:sessionId/element/:id/location</a><br>\nDetermine an element's location on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetLocation(element, cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocation(cb) -&gt; cb(err, location)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size\">/session/:sessionId/element/:id/size</a><br>\nDetermine an element's size in pixels.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetSize(element, cb) -&gt; cb(err, size)<br>\n</p>\n<p>\nelement.getSize(cb) -&gt; cb(err, size)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\nQuery the value of an element's computed CSS property.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nGet the current browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nSet the browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nGets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertText(cb) -&gt; cb(err, text)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nSends keystrokes to a JavaScript prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\nAccepts the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nacceptAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\nDismisses the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndismissAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\nMove the mouse by an offset of the specificed element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmoveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\nMove to element, xoffset and y offset are optional.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\nClick any mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclick(button, cb) -&gt; cb(err)<br>\nClick on current element.<br>\nButtons: {left: 0, middle: 1 , right: 2}<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\nClick and hold the left mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonDown(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\nReleases the mouse button previously held (where the mouse is currently at).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonUp(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\nDouble-clicks at the current mouse coordinates (set by moveto).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndoubleclick(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/flick\">/session/:sessionId/touch/flick</a><br>\nFlick on the touch screen using finger motion events.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nflick(xSpeed, ySpeed, cb) -&gt; cb(err)<br>\nFlicks, starting anywhere on the screen.<br>\nflick(element, xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\nFlicks, starting at element center.<br>\n</p>\n<p>\nelement.flick(xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nesired, cb<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nOpens a new window (using Javascript window.open):<br>\nnewWindow(url, name, cb) -&gt; cb(err)<br>\nnewWindow(url, cb) -&gt; cb(err)<br>\nname: optional window name<br>\nWindow can later be accessed by name with the window method,<br>\nor by getting the last handle returned by the windowHandles method.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrl, name, cb<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowName(cb) -&gt; cb(err, name)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(element , cb) -&gt; cb(err, boolean)<br>\nisVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (polling within wd client):<br>\nwaitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (async script polling within browser):<br>\nwaitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n</tbody>\n</table>\n\n## JsonWireProtocol mapping\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Run the selenium server with chromedriver:\n      java -jar selenium-server-standalone-2.21.0.jar -Dwebdriver.chrome.driver=&lt;PATH&gt;/chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n<pre>\n  - make mapping > doc/jsonwire-mapping.md \n  - make full_mapping > doc/jsonwire-full-mapping.md\n</pre>\n\nThe content of doc/jsonwire-mapping.md should then be manually integrated into\nREADME.md.\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","_id":"wd@0.0.31","dist":{"shasum":"35efc7b222cde06541c2148dd92bd0ffb25ecc75","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.31.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"}]},"0.0.32":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.32","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.2.x","underscore":"1.4.x","vargs":"~0.1.0","q":"0.9.x","request":"~2.21.0"},"devDependencies":{"mocha":"1.9.x","should":"1.2.x","nock":"~0.17.5","coffee-script":"1.6.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","dox":"0.4.x","mu2":"0.5.x","sv-selenium":"0.1.x","colors":"~0.6.0-1"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar wd = require('wd')\n  , assert = require('assert')\n  , colors = require('colors')\n  , browser = wd.remote();\n\nbrowser.on('status', function(info) {\n  console.log(info.cyan);\n});\n\nbrowser.on('command', function(meth, path, data) {\n  console.log(' > ' + meth.yellow, path.grey, data || '');\n});\n\nbrowser.init({\n    browserName:'chrome'\n    , tags : [\"examples\"]\n    , name: \"This is an example test\"\n  }, function() {\n\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, href) {\n            assert.ok(~href.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Promises Api\n\nA promise api using [q](https://github.com/kriskowal/q) is\navailable. Code sample is\n[here](https://github.com/admc/wd/blob/master/examples/example.promise.chrome.js).\n\n## Chain Api\n\nA chain api is also available. Code sample is [here](https://github.com/admc/wd/blob/master/examples/example.chain.chrome.js).\n\n### Injecting command to the chain\n\nAs [queue](https://github.com/caolan/async#queue) implementation that we're using has some limitations, a special helper method *next* was added. It allows you to inject new calls to the execution chain inside callbacks.\n\n#### Example 1 - the problem\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing codnitions in your script\n    browser.clickElement(el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n#### Example 2 - solution, use *next*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // call to clickElement will be injected to the queue\n    // and will be executed sequentially after current function finishes\n    browser.next('clickElement', el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n## Supported Methods\n\n<table class=\"wikitable\">\n<tbody>\n<tr>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>JsonWireProtocol</strong>\n</td>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>wd</strong>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\nQuery the server's current status.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nstatus(cb) -&gt; cb(err, status)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\nCreate a new session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ninit(desired, cb) -&gt; cb(err, sessionID)<br>\nInitialize the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\nReturns a list of the currently active sessions.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsessions(cb) -&gt; cb(err, sessions)<br>\n</p>\n<p>\n## Alternate strategy to get session capabilities from server session list<br>\naltSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\nRetrieve the capabilities of the specified session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\nDelete the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nquit(cb) -&gt; cb(err)<br>\nDestroy the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\nConfigure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n(use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\nSet the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\nSet the amount of time the driver should wait when searching for elements.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\nRetrieve the current window handle.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandle(cb) -&gt; cb(err, handle)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\nRetrieve the list of all window handles available to the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nRetrieve the URL of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nurl(cb) -&gt; cb(err, url)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nNavigate to a new URL.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nget(url,cb) -&gt; cb(err)<br>\nGet a new url.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\nNavigate forwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nforward(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\nNavigate backwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nback(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\nRefresh the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrefresh(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecute(code, args, cb) -&gt; cb(err, result)<br>\nexecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nExecute script using eval(code):<br>\nsafeExecute(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nEvaluate expression (using execute):<br>\neval(code, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nEvaluate expression (using safeExecute):<br>\nsafeEval(code, cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nexecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nExecute async script using eval(code):<br>\nsafeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\nTake a screenshot of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntakeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\nChange focus to another frame on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nframe(frameRef, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nChange focus to another window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindow(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nClose the current window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclose(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nChange the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nwindowSize(handle, width, height, cb) -&gt; cb(err)<br>\n</p>\n<p>\nsetWindowSize(width, height, handle, cb) -&gt; cb(err)<br>\nsetWindowSize(width, height, cb) -&gt; cb(err)<br>\nwidth: width in pixels to set size to<br>\nheight: height in pixels to set size to<br>\nhandle: window handle to set size for (optional, default: 'current')<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nGet the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowSize(handle, cb) -&gt; cb(err, size)<br>\ngetWindowSize(cb) -&gt; cb(err, size)<br>\nhandle: window handle to get size (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nChange the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetWindowPosition(x, y, handle, cb) -&gt; cb(err)<br>\nsetWindowPosition(x, y, cb) -&gt; cb(err)<br>\nx: the x-coordinate in pixels to set the window position<br>\ny: the y-coordinate in pixels to set the window position<br>\nhandle: window handle to set position for (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nGet the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowPosition(handle, cb) -&gt; cb(err, position)<br>\ngetWindowPosition(cb) -&gt; cb(err, position)<br>\nhandle: window handle to get position (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/maximize\">/session/:sessionId/window/:windowHandle/maximize</a><br>\nMaximize the specified window if not already maximized.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmaximize(handle, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nRetrieve all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nallCookies() -&gt; cb(err, cookies)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nSet a cookie.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetCookie(cookie, cb) -&gt; cb(err)<br>\ncookie example:<br>\n{name:'fruit', value:'apple'}<br>\n## Optional cookie fields<br>\npath, domain, secure, expiry<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nDelete all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteAllCookies(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\nDelete the cookie with the given name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteCookie(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/source\">/session/:sessionId/source</a><br>\nGet the current page source.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsource(cb) -&gt; cb(err, source)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\nGet the current page title.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntitle(cb) -&gt; cb(err, title)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\nSearch for an element on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassName(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelementById(value, cb) -&gt; cb(err, element)<br>\nelementByName(value, cb) -&gt; cb(err, element)<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByTagName(value, cb) -&gt; cb(err, element)<br>\nelementByXPath(value, cb) -&gt; cb(err, element)<br>\nelementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\nSearch for multiple elements on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelementsById(value, cb) -&gt; cb(err, elements)<br>\nelementsByName(value, cb) -&gt; cb(err, elements)<br>\nelementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\n## Retrieve an element avoiding not found exception and returning null instead<br>\nelementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\n## Retrieve an element avoiding not found exception and returning undefined instead<br>\nelementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\n## Check if element exists<br>\nhasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n</p>\n<p>\nhasElementByClassName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCssSelector(value, cb) -&gt; cb(err, boolean)<br>\nhasElementById(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByTagName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByXPath(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCss(value, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\nGet the element on the page that currently has focus.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nactive(cb) -&gt; cb(err, element)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/element\">/session/:sessionId/element/:id/element</a><br>\nSearch for an element on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.element(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelement.elementByClassName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelement.elementById(value, cb) -&gt; cb(err, element)<br>\nelement.elementByName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByTagName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByXPath(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/elements\">/session/:sessionId/element/:id/elements</a><br>\nSearch for multiple elements on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.elements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelement.elementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsById(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\nClick on an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclickElement(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.click(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/submit\">/session/:sessionId/element/:id/submit</a><br>\nSubmit a FORM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsubmit(element, cb) -&gt; cb(err)<br>\nSubmit a `FORM` element.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\nReturns the visible text for the element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntext(element, cb) -&gt; cb(err, text)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.text(cb) -&gt; cb(err, text)<br>\n</p>\n<p>\n## Check if text is present<br>\ntextPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\nSend a sequence of key strokes to an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntype(element, keys, cb) -&gt; cb(err)<br>\nType keys (all keys are up at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</p>\n<p>\nelement.type(keys, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\nSend a sequence of key strokes to the active element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nkeys(keys, cb) -&gt; cb(err)<br>\nPress keys (keys may still be down at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\nQuery for an element's tag name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetTagName(element, cb) -&gt; cb(err, name)<br>\n</p>\n<p>\nelement.getTagName(cb) -&gt; cb(err, name)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\nClear a TEXTAREA or text INPUT element's value.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclear(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.clear(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/selected\">/session/:sessionId/element/:id/selected</a><br>\nDetermine if an OPTION element, or an INPUT element of type checkbox or radiobutton is currently selected.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisSelected(element, cb) -&gt; cb(err, selected)<br>\n</p>\n<p>\nelement.isSelected(cb) -&gt; cb(err, selected)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/enabled\">/session/:sessionId/element/:id/enabled</a><br>\nDetermine if an element is currently enabled.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisEnabled(element, cb) -&gt; cb(err, enabled)<br>\n</p>\n<p>\nelement.isEnabled(cb) -&gt; cb(err, enabled)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\nGet the value of an element's attribute.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nGet element value (in value attribute):<br>\ngetValue(element, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getValue(cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/equals/:other\">/session/:sessionId/element/:id/equals/:other</a><br>\nTest if two element IDs refer to the same DOM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.equals(other, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nequalsElement(element, other , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\nDetermine if an element is currently displayed.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n</p>\n<p>\nelement.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location\">/session/:sessionId/element/:id/location</a><br>\nDetermine an element's location on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetLocation(element, cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocation(cb) -&gt; cb(err, location)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size\">/session/:sessionId/element/:id/size</a><br>\nDetermine an element's size in pixels.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetSize(element, cb) -&gt; cb(err, size)<br>\n</p>\n<p>\nelement.getSize(cb) -&gt; cb(err, size)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\nQuery the value of an element's computed CSS property.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nGet the current browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nSet the browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nGets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertText(cb) -&gt; cb(err, text)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nSends keystrokes to a JavaScript prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\nAccepts the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nacceptAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\nDismisses the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndismissAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\nMove the mouse by an offset of the specificed element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmoveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\nMove to element, xoffset and y offset are optional.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\nClick any mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclick(button, cb) -&gt; cb(err)<br>\nClick on current element.<br>\nButtons: {left: 0, middle: 1 , right: 2}<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\nClick and hold the left mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonDown(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\nReleases the mouse button previously held (where the mouse is currently at).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonUp(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\nDouble-clicks at the current mouse coordinates (set by moveto).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndoubleclick(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/flick\">/session/:sessionId/touch/flick</a><br>\nFlick on the touch screen using finger motion events.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nflick(xSpeed, ySpeed, swipe, cb) -&gt; cb(err)<br>\nFlicks, starting anywhere on the screen.<br>\nflick(element, xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\nFlicks, starting at element center.<br>\n</p>\n<p>\nelement.flick(xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nSet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetLocalStorageKey(key, value, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nClear the storage.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclearLocalStorage(cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nGet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeEval() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nRemove the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nremoveLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nOpens a new window (using Javascript window.open):<br>\nnewWindow(url, name, cb) -&gt; cb(err)<br>\nnewWindow(url, cb) -&gt; cb(err)<br>\nname: optional window name<br>\nWindow can later be accessed by name with the window method,<br>\nor by getting the last handle returned by the windowHandles method.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowName(cb) -&gt; cb(err, name)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(element , cb) -&gt; cb(err, boolean)<br>\nisVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nRetrieves the pageIndex element (added for Appium):<br>\ngetPageIndex(element, cb) -&gt; cb(err, pageIndex)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (polling within wd client):<br>\nwaitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (async script polling within browser):<br>\nwaitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n</tbody>\n</table>\n\n## JsonWireProtocol mapping\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Install the Selenium server and Chromedriver\n      node_modules/.bin/install_selenium\n      node_modules/.bin/install_chromedriver\n  - Run the selenium server with chromedriver:\n      node_modules/.bin/start_selenium_with_chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n<pre>\n  - make mapping > doc/jsonwire-mapping.md\n  - make full_mapping > doc/jsonwire-full-mapping.md\n</pre>\n\nThe content of doc/jsonwire-mapping.md should then be manually integrated into\nREADME.md.\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","readmeFilename":"README.md","_id":"wd@0.0.32","dist":{"shasum":"9dfbdba0a0a65e320d0223551a84883b6c2836a5","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.32.tgz"},"_from":".","_npmVersion":"1.2.17","_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.0.33":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.33","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.2.x","underscore":"1.4.x","vargs":"~0.1.0","q":"0.9.x","request":"~2.21.0"},"devDependencies":{"mocha":"1.9.x","should":"1.2.x","nock":"~0.17.5","coffee-script":"1.6.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","dox":"0.4.x","mu2":"0.5.x","sv-selenium":"0.1.x","colors":"~0.6.0-1","node-zip":"~1.0.1"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar wd = require('wd')\n  , assert = require('assert')\n  , colors = require('colors')\n  , browser = wd.remote();\n\nbrowser.on('status', function(info) {\n  console.log(info.cyan);\n});\n\nbrowser.on('command', function(meth, path, data) {\n  console.log(' > ' + meth.yellow, path.grey, data || '');\n});\n\nbrowser.init({\n    browserName:'chrome'\n    , tags : [\"examples\"]\n    , name: \"This is an example test\"\n  }, function() {\n\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, href) {\n            assert.ok(~href.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Browser initialization\n\n### Indexed parameters\n\n<pre>\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n</pre>\n\n### Named parameters\n\n<pre>\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1', \n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1', \n  port: 4444,\n  auth: 'username:password',\n});\n</pre>\n\n### Url string\n\n<pre>\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n</pre>\n\n### Url object created via `url.parse`\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n<pre>\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n</pre>\n\n### Defaults\n\n<pre>\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n</pre> \n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\n## Promises Api\n\nA promise api using [q](https://github.com/kriskowal/q) is\navailable. Code sample is\n[here](https://github.com/admc/wd/blob/master/examples/example.promise.chrome.js).\n\n## Chain Api\n\nA chain api is also available. Code sample is [here](https://github.com/admc/wd/blob/master/examples/example.chain.chrome.js).\n\n### Injecting command to the chain\n\nAs [queue](https://github.com/caolan/async#queue) implementation that we're using has some limitations, a special helper method *next* was added. It allows you to inject new calls to the execution chain inside callbacks.\n\n#### Example 1 - the problem\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n    browser.clickElement(el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n#### Example 2 - solution, use *next*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // call to clickElement will be injected to the queue\n    // and will be executed sequentially after current function finishes\n    browser.next('clickElement', el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n### Inserting async code with *queueAddAsync*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n  })\n  .queueAddAsync( function(cb) {\n    // your code here\n    cb(null);\n  })\n  .clickElement(el, function() {\n    console.log(\"did the click!\");\n  })\n  // ...\n```\n\n## Supported Methods\n\n<table class=\"wikitable\">\n<tbody>\n<tr>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>JsonWireProtocol</strong>\n</td>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>wd</strong>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\nQuery the server's current status.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nstatus(cb) -&gt; cb(err, status)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\nCreate a new session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ninit(desired, cb) -&gt; cb(err, sessionID)<br>\nInitialize the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\nReturns a list of the currently active sessions.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsessions(cb) -&gt; cb(err, sessions)<br>\n</p>\n<p>\nAlternate strategy to get session capabilities from server session list:<br>\naltSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\nRetrieve the capabilities of the specified session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\nDelete the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nquit(cb) -&gt; cb(err)<br>\nDestroy the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\nConfigure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n(use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\nSet the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\nSet the amount of time the driver should wait when searching for elements.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\nRetrieve the current window handle.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandle(cb) -&gt; cb(err, handle)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\nRetrieve the list of all window handles available to the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nRetrieve the URL of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nurl(cb) -&gt; cb(err, url)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nNavigate to a new URL.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nget(url,cb) -&gt; cb(err)<br>\nGet a new url.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\nNavigate forwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nforward(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\nNavigate backwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nback(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\nRefresh the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrefresh(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecute(code, args, cb) -&gt; cb(err, result)<br>\nexecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute script within an eval block, always returning:<br>\nsafeExecute(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nEvaluate expression (using execute):<br>\neval(code, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nSafely evaluate expression, always returning  (using safeExecute):<br>\nsafeEval(code, cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nexecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute async script within an eval block, always returning:<br>\nsafeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\nTake a screenshot of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntakeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\nChange focus to another frame on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nframe(frameRef, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nChange focus to another window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindow(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nClose the current window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclose(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nChange the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nwindowSize(handle, width, height, cb) -&gt; cb(err)<br>\n</p>\n<p>\nsetWindowSize(width, height, handle, cb) -&gt; cb(err)<br>\nsetWindowSize(width, height, cb) -&gt; cb(err)<br>\nwidth: width in pixels to set size to<br>\nheight: height in pixels to set size to<br>\nhandle: window handle to set size for (optional, default: 'current')<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nGet the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowSize(handle, cb) -&gt; cb(err, size)<br>\ngetWindowSize(cb) -&gt; cb(err, size)<br>\nhandle: window handle to get size (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nChange the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetWindowPosition(x, y, handle, cb) -&gt; cb(err)<br>\nsetWindowPosition(x, y, cb) -&gt; cb(err)<br>\nx: the x-coordinate in pixels to set the window position<br>\ny: the y-coordinate in pixels to set the window position<br>\nhandle: window handle to set position for (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nGet the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowPosition(handle, cb) -&gt; cb(err, position)<br>\ngetWindowPosition(cb) -&gt; cb(err, position)<br>\nhandle: window handle to get position (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/maximize\">/session/:sessionId/window/:windowHandle/maximize</a><br>\nMaximize the specified window if not already maximized.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmaximize(handle, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nRetrieve all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nallCookies() -&gt; cb(err, cookies)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nSet a cookie.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetCookie(cookie, cb) -&gt; cb(err)<br>\ncookie example:<br>\n{name:'fruit', value:'apple'}<br>\nOptional cookie fields:<br>\npath, domain, secure, expiry<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nDelete all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteAllCookies(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\nDelete the cookie with the given name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteCookie(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/source\">/session/:sessionId/source</a><br>\nGet the current page source.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsource(cb) -&gt; cb(err, source)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\nGet the current page title.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntitle(cb) -&gt; cb(err, title)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\nSearch for an element on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassName(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelementById(value, cb) -&gt; cb(err, element)<br>\nelementByName(value, cb) -&gt; cb(err, element)<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByTagName(value, cb) -&gt; cb(err, element)<br>\nelementByXPath(value, cb) -&gt; cb(err, element)<br>\nelementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\nSearch for multiple elements on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelementsById(value, cb) -&gt; cb(err, elements)<br>\nelementsByName(value, cb) -&gt; cb(err, elements)<br>\nelementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning null instead:<br>\nelementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning undefined instead:<br>\nelementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nCheck if element exists:<br>\nhasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n</p>\n<p>\nhasElementByClassName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCssSelector(value, cb) -&gt; cb(err, boolean)<br>\nhasElementById(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByTagName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByXPath(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCss(value, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\nGet the element on the page that currently has focus.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nactive(cb) -&gt; cb(err, element)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/element\">/session/:sessionId/element/:id/element</a><br>\nSearch for an element on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.element(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelement.elementByClassName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelement.elementById(value, cb) -&gt; cb(err, element)<br>\nelement.elementByName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByTagName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByXPath(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/elements\">/session/:sessionId/element/:id/elements</a><br>\nSearch for multiple elements on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.elements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelement.elementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsById(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\nClick on an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclickElement(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.click(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/submit\">/session/:sessionId/element/:id/submit</a><br>\nSubmit a FORM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsubmit(element, cb) -&gt; cb(err)<br>\nSubmit a `FORM` element.<br>\n</p>\n<p>\nelement.submit(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\nReturns the visible text for the element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntext(element, cb) -&gt; cb(err, text)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.text(cb) -&gt; cb(err, text)<br>\n</p>\n<p>\nCheck if text is present:<br>\ntextPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\nSend a sequence of key strokes to an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntype(element, keys, cb) -&gt; cb(err)<br>\nType keys (all keys are up at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</p>\n<p>\nelement.type(keys, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\nSend a sequence of key strokes to the active element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nkeys(keys, cb) -&gt; cb(err)<br>\nPress keys (keys may still be down at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\nQuery for an element's tag name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetTagName(element, cb) -&gt; cb(err, name)<br>\n</p>\n<p>\nelement.getTagName(cb) -&gt; cb(err, name)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\nClear a TEXTAREA or text INPUT element's value.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclear(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.clear(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/selected\">/session/:sessionId/element/:id/selected</a><br>\nDetermine if an OPTION element, or an INPUT element of type checkbox or radiobutton is currently selected.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisSelected(element, cb) -&gt; cb(err, selected)<br>\n</p>\n<p>\nelement.isSelected(cb) -&gt; cb(err, selected)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/enabled\">/session/:sessionId/element/:id/enabled</a><br>\nDetermine if an element is currently enabled.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisEnabled(element, cb) -&gt; cb(err, enabled)<br>\n</p>\n<p>\nelement.isEnabled(cb) -&gt; cb(err, enabled)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\nGet the value of an element's attribute.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nGet element value (in value attribute):<br>\ngetValue(element, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getValue(cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/equals/:other\">/session/:sessionId/element/:id/equals/:other</a><br>\nTest if two element IDs refer to the same DOM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.equals(other, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nequalsElement(element, other , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\nDetermine if an element is currently displayed.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n</p>\n<p>\nelement.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location\">/session/:sessionId/element/:id/location</a><br>\nDetermine an element's location on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetLocation(element, cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocation(cb) -&gt; cb(err, location)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size\">/session/:sessionId/element/:id/size</a><br>\nDetermine an element's size in pixels.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetSize(element, cb) -&gt; cb(err, size)<br>\n</p>\n<p>\nelement.getSize(cb) -&gt; cb(err, size)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\nQuery the value of an element's computed CSS property.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nGet the current browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nSet the browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nGets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertText(cb) -&gt; cb(err, text)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nSends keystrokes to a JavaScript prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\nAccepts the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nacceptAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\nDismisses the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndismissAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\nMove the mouse by an offset of the specificed element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmoveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\nMove to element, xoffset and y offset are optional.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\nClick any mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclick(button, cb) -&gt; cb(err)<br>\nClick on current element.<br>\nButtons: {left: 0, middle: 1 , right: 2}<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\nClick and hold the left mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonDown(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\nReleases the mouse button previously held (where the mouse is currently at).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonUp(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\nDouble-clicks at the current mouse coordinates (set by moveto).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndoubleclick(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/flick\">/session/:sessionId/touch/flick</a><br>\nFlick on the touch screen using finger motion events.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nflick(xSpeed, ySpeed, swipe, cb) -&gt; cb(err)<br>\nFlicks, starting anywhere on the screen.<br>\nflick(element, xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\nFlicks, starting at element center.<br>\n</p>\n<p>\nelement.flick(xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nSet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetLocalStorageKey(key, value, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nClear the storage.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclearLocalStorage(cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nGet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeEval() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nRemove the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nremoveLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nOpens a new window (using Javascript window.open):<br>\nnewWindow(url, name, cb) -&gt; cb(err)<br>\nnewWindow(url, cb) -&gt; cb(err)<br>\nname: optional window name<br>\nWindow can later be accessed by name with the window method,<br>\nor by getting the last handle returned by the windowHandles method.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowName(cb) -&gt; cb(err, name)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(element , cb) -&gt; cb(err, boolean)<br>\nisVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nRetrieves the pageIndex element (added for Appium):<br>\ngetPageIndex(element, cb) -&gt; cb(err, pageIndex)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nUploads a local file using undocumented<br>\nPOST /session/:sessionId/file<br>\nuploadFile(filepath, cb) -&gt; cb(err, filepath)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (polling within wd client):<br>\nwaitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (async script polling within browser):<br>\nwaitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEquivalent to the python sendKeys binding. Upload file if <br>\na local file is detected, otherwise behaves like type.<br>\nelement.sendKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n</tbody>\n</table>\n\n## JsonWireProtocol mapping\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Install the Selenium server and Chromedriver\n      node_modules/.bin/install_selenium\n      node_modules/.bin/install_chromedriver\n  - Run the selenium server with chromedriver:\n      node_modules/.bin/start_selenium_with_chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Monkey patching\n\nYou may want to monkey patch the webdriver class in order to add custom functionalities. \nThere is an example [here](https://github.com/admc/wd/blob/master/examples/example.monkey.patch.js).\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n<pre>\n  - make mapping > doc/jsonwire-mapping.md\n  - make full_mapping > doc/jsonwire-full-mapping.md\n</pre>\n\nThe content of doc/jsonwire-mapping.md should then be manually integrated into\nREADME.md.\n\n## Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```javascript\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","readmeFilename":"README.md","_id":"wd@0.0.33","dist":{"shasum":"e6a69168c43e8dbdf9a3b01df78ec7bb72fd3460","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.33.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"jlipps","email":"jlipps@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.0.34":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.0.34","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.2.x","underscore":"1.4.x","vargs":"~0.1.0","q":"0.9.x","request":"~2.21.0","archiver":"~0.4.6"},"devDependencies":{"mocha":"1.9.x","should":"1.2.x","nock":"~0.17.5","coffee-script":"1.6.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","dox":"0.4.x","mu2":"0.5.x","sv-selenium":"0.1.x","colors":"~0.6.0-1"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar wd = require('wd')\n  , assert = require('assert')\n  , colors = require('colors')\n  , browser = wd.remote();\n\nbrowser.on('status', function(info) {\n  console.log(info.cyan);\n});\n\nbrowser.on('command', function(meth, path, data) {\n  console.log(' > ' + meth.yellow, path.grey, data || '');\n});\n\nbrowser.init({\n    browserName:'chrome'\n    , tags : [\"examples\"]\n    , name: \"This is an example test\"\n  }, function() {\n\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, href) {\n            assert.ok(~href.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Browser initialization\n\n### Indexed parameters\n\n<pre>\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n</pre>\n\n### Named parameters\n\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module. \n\n<pre>\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n});\n</pre>\n\nThe following parameters may also be used (as in earlier versions):\n\n<pre>\nvar browser = wd.remote({\n  host: '127.0.0.1',\n  port: 4444,\n  username: 'username',\n  accessKey: 'password',\n});\n</pre>\n\n### Url string\n\n<pre>\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n</pre>\n\n### Url object created via `url.parse`\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n<pre>\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n</pre>\n\n### Defaults\n\n<pre>\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n</pre>\n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\n## Promises Api\n\nA promise api using [q](https://github.com/kriskowal/q) is\navailable. Code sample is\n[here](https://github.com/admc/wd/blob/master/examples/example.promise.chrome.js).\n\n## Generators Api\n\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\ngenerators in order to avoid nested callbacks, like so:\n\n```js\nwd.remote(function*() {\n  yield this.init(desiredCaps);\n  yield this.get(\"http://mysite.com\");\n  el = yield this.elementById(\"someId\");\n  yield el.click();\n  el2 = yield this.elementById(\"anotherThing\")\n  text = yield el2.text();\n  text.should.equal(\"What the text should be\");\n  yield this.quit();\n});\n```\n\n\n## Chain Api\n\nA chain api is also available. Code sample is [here](https://github.com/admc/wd/blob/master/examples/example.chain.chrome.js).\n\n### Injecting command to the chain\n\nAs [queue](https://github.com/caolan/async#queue) implementation that we're using has some limitations, a special helper method *next* was added. It allows you to inject new calls to the execution chain inside callbacks.\n\n#### Example 1 - the problem\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n    browser.clickElement(el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n#### Example 2 - solution, use *next*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // call to clickElement will be injected to the queue\n    // and will be executed sequentially after current function finishes\n    browser.next('clickElement', el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n### Inserting async code with *queueAddAsync*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n  })\n  .queueAddAsync( function(cb) {\n    // your code here\n    cb(null);\n  })\n  .clickElement(el, function() {\n    console.log(\"did the click!\");\n  })\n  // ...\n```\n\n## Supported Methods\n\n<table class=\"wikitable\">\n<tbody>\n<tr>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>JsonWireProtocol</strong>\n</td>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>wd</strong>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\nQuery the server's current status.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nstatus(cb) -&gt; cb(err, status)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\nCreate a new session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ninit(desired, cb) -&gt; cb(err, sessionID)<br>\nInitialize the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\nReturns a list of the currently active sessions.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsessions(cb) -&gt; cb(err, sessions)<br>\n</p>\n<p>\nAlternate strategy to get session capabilities from server session list:<br>\naltSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\nRetrieve the capabilities of the specified session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\nDelete the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nquit(cb) -&gt; cb(err)<br>\nDestroy the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\nConfigure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n(use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\nSet the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\nSet the amount of time the driver should wait when searching for elements.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\nRetrieve the current window handle.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandle(cb) -&gt; cb(err, handle)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\nRetrieve the list of all window handles available to the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nRetrieve the URL of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nurl(cb) -&gt; cb(err, url)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nNavigate to a new URL.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nget(url,cb) -&gt; cb(err)<br>\nGet a new url.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\nNavigate forwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nforward(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\nNavigate backwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nback(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\nRefresh the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrefresh(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecute(code, args, cb) -&gt; cb(err, result)<br>\nexecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute script within an eval block, always returning:<br>\nsafeExecute(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nEvaluate expression (using execute):<br>\neval(code, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nSafely evaluate expression, always returning  (using safeExecute):<br>\nsafeEval(code, cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nexecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute async script within an eval block, always returning:<br>\nsafeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\nTake a screenshot of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntakeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\nChange focus to another frame on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nframe(frameRef, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nChange focus to another window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindow(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nClose the current window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclose(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nChange the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nwindowSize(handle, width, height, cb) -&gt; cb(err)<br>\n</p>\n<p>\nsetWindowSize(width, height, handle, cb) -&gt; cb(err)<br>\nsetWindowSize(width, height, cb) -&gt; cb(err)<br>\nwidth: width in pixels to set size to<br>\nheight: height in pixels to set size to<br>\nhandle: window handle to set size for (optional, default: 'current')<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nGet the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowSize(handle, cb) -&gt; cb(err, size)<br>\ngetWindowSize(cb) -&gt; cb(err, size)<br>\nhandle: window handle to get size (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nChange the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetWindowPosition(x, y, handle, cb) -&gt; cb(err)<br>\nsetWindowPosition(x, y, cb) -&gt; cb(err)<br>\nx: the x-coordinate in pixels to set the window position<br>\ny: the y-coordinate in pixels to set the window position<br>\nhandle: window handle to set position for (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nGet the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowPosition(handle, cb) -&gt; cb(err, position)<br>\ngetWindowPosition(cb) -&gt; cb(err, position)<br>\nhandle: window handle to get position (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/maximize\">/session/:sessionId/window/:windowHandle/maximize</a><br>\nMaximize the specified window if not already maximized.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmaximize(handle, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nRetrieve all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nallCookies() -&gt; cb(err, cookies)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nSet a cookie.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetCookie(cookie, cb) -&gt; cb(err)<br>\ncookie example:<br>\n{name:'fruit', value:'apple'}<br>\nOptional cookie fields:<br>\npath, domain, secure, expiry<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nDelete all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteAllCookies(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\nDelete the cookie with the given name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteCookie(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/source\">/session/:sessionId/source</a><br>\nGet the current page source.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsource(cb) -&gt; cb(err, source)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\nGet the current page title.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntitle(cb) -&gt; cb(err, title)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\nSearch for an element on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassName(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelementById(value, cb) -&gt; cb(err, element)<br>\nelementByName(value, cb) -&gt; cb(err, element)<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByTagName(value, cb) -&gt; cb(err, element)<br>\nelementByXPath(value, cb) -&gt; cb(err, element)<br>\nelementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\nSearch for multiple elements on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelementsById(value, cb) -&gt; cb(err, elements)<br>\nelementsByName(value, cb) -&gt; cb(err, elements)<br>\nelementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning null instead:<br>\nelementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning undefined instead:<br>\nelementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nCheck if element exists:<br>\nhasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n</p>\n<p>\nhasElementByClassName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCssSelector(value, cb) -&gt; cb(err, boolean)<br>\nhasElementById(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByTagName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByXPath(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCss(value, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\nGet the element on the page that currently has focus.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nactive(cb) -&gt; cb(err, element)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/element\">/session/:sessionId/element/:id/element</a><br>\nSearch for an element on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.element(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelement.elementByClassName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelement.elementById(value, cb) -&gt; cb(err, element)<br>\nelement.elementByName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByTagName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByXPath(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/elements\">/session/:sessionId/element/:id/elements</a><br>\nSearch for multiple elements on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.elements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelement.elementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsById(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\nClick on an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclickElement(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.click(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/submit\">/session/:sessionId/element/:id/submit</a><br>\nSubmit a FORM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsubmit(element, cb) -&gt; cb(err)<br>\nSubmit a `FORM` element.<br>\n</p>\n<p>\nelement.submit(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\nReturns the visible text for the element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntext(element, cb) -&gt; cb(err, text)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.text(cb) -&gt; cb(err, text)<br>\n</p>\n<p>\nCheck if text is present:<br>\ntextPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\nSend a sequence of key strokes to an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntype(element, keys, cb) -&gt; cb(err)<br>\nType keys (all keys are up at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</p>\n<p>\nelement.type(keys, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\nSend a sequence of key strokes to the active element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nkeys(keys, cb) -&gt; cb(err)<br>\nPress keys (keys may still be down at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\nQuery for an element's tag name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetTagName(element, cb) -&gt; cb(err, name)<br>\n</p>\n<p>\nelement.getTagName(cb) -&gt; cb(err, name)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\nClear a TEXTAREA or text INPUT element's value.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclear(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.clear(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/selected\">/session/:sessionId/element/:id/selected</a><br>\nDetermine if an OPTION element, or an INPUT element of type checkbox or radiobutton is currently selected.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisSelected(element, cb) -&gt; cb(err, selected)<br>\n</p>\n<p>\nelement.isSelected(cb) -&gt; cb(err, selected)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/enabled\">/session/:sessionId/element/:id/enabled</a><br>\nDetermine if an element is currently enabled.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisEnabled(element, cb) -&gt; cb(err, enabled)<br>\n</p>\n<p>\nelement.isEnabled(cb) -&gt; cb(err, enabled)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\nGet the value of an element's attribute.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nGet element value (in value attribute):<br>\ngetValue(element, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getValue(cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/equals/:other\">/session/:sessionId/element/:id/equals/:other</a><br>\nTest if two element IDs refer to the same DOM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.equals(other, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nequalsElement(element, other , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\nDetermine if an element is currently displayed.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n</p>\n<p>\nelement.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location\">/session/:sessionId/element/:id/location</a><br>\nDetermine an element's location on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetLocation(element, cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocation(cb) -&gt; cb(err, location)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size\">/session/:sessionId/element/:id/size</a><br>\nDetermine an element's size in pixels.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetSize(element, cb) -&gt; cb(err, size)<br>\n</p>\n<p>\nelement.getSize(cb) -&gt; cb(err, size)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\nQuery the value of an element's computed CSS property.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nGet the current browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nSet the browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nGets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertText(cb) -&gt; cb(err, text)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nSends keystrokes to a JavaScript prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\nAccepts the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nacceptAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\nDismisses the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndismissAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\nMove the mouse by an offset of the specificed element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmoveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\nMove to element, xoffset and y offset are optional.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\nClick any mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclick(button, cb) -&gt; cb(err)<br>\nClick on current element.<br>\nButtons: {left: 0, middle: 1 , right: 2}<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\nClick and hold the left mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonDown(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\nReleases the mouse button previously held (where the mouse is currently at).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonUp(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\nDouble-clicks at the current mouse coordinates (set by moveto).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndoubleclick(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/flick\">/session/:sessionId/touch/flick</a><br>\nFlick on the touch screen using finger motion events.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nflick(xSpeed, ySpeed, swipe, cb) -&gt; cb(err)<br>\nFlicks, starting anywhere on the screen.<br>\nflick(element, xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\nFlicks, starting at element center.<br>\n</p>\n<p>\nelement.flick(xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nSet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetLocalStorageKey(key, value, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nClear the storage.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclearLocalStorage(cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nGet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeEval() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nRemove the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nremoveLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nOpens a new window (using Javascript window.open):<br>\nnewWindow(url, name, cb) -&gt; cb(err)<br>\nnewWindow(url, cb) -&gt; cb(err)<br>\nname: optional window name<br>\nWindow can later be accessed by name with the window method,<br>\nor by getting the last handle returned by the windowHandles method.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowName(cb) -&gt; cb(err, name)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(element , cb) -&gt; cb(err, boolean)<br>\nisVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nRetrieves the pageIndex element (added for Appium):<br>\ngetPageIndex(element, cb) -&gt; cb(err, pageIndex)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nUploads a local file using undocumented<br>\nPOST /session/:sessionId/file<br>\nuploadFile(filepath, cb) -&gt; cb(err, filepath)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (polling within wd client):<br>\nwaitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (async script polling within browser):<br>\nwaitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEquivalent to the python sendKeys binding. Upload file if <br>\na local file is detected, otherwise behaves like type.<br>\nelement.sendKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n</tbody>\n</table>\n\n## JsonWireProtocol mapping\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Install the Selenium server and Chromedriver\n      node_modules/.bin/install_selenium\n      node_modules/.bin/install_chromedriver\n  - Run the selenium server with chromedriver:\n      node_modules/.bin/start_selenium_with_chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Monkey patching\n\nYou may want to monkey patch the webdriver class in order to add custom functionalities.\nThere is an example [here](https://github.com/admc/wd/blob/master/examples/example.monkey.patch.js).\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n<pre>\n  - make mapping > doc/jsonwire-mapping.md\n  - make full_mapping > doc/jsonwire-full-mapping.md\n</pre>\n\nThe content of doc/jsonwire-mapping.md should then be manually integrated into\nREADME.md.\n\n## Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```javascript\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","readmeFilename":"README.md","_id":"wd@0.0.34","dist":{"shasum":"c8d00ccdbb2862f914b7bd5935330a53cfa88562","tarball":"http://registry.npmjs.org/wd/-/wd-0.0.34.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"sebv","email":"seb.vincent@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.1.0":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.1.0","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.2.x","underscore":"1.4.x","vargs":"~0.1.0","q":"0.9.x","request":"~2.21.0","archiver":"~0.4.6"},"devDependencies":{"mocha":"1.9.x","should":"1.2.x","nock":"~0.17.5","coffee-script":"1.6.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","dox":"0.4.x","mu2":"0.5.x","sv-selenium":"0.1.x","colors":"~0.6.0-1"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar wd = require('wd')\n  , assert = require('assert')\n  , colors = require('colors')\n  , browser = wd.remote();\n\nbrowser.on('status', function(info) {\n  console.log(info.cyan);\n});\n\nbrowser.on('command', function(meth, path, data) {\n  console.log(' > ' + meth.yellow, path.grey, data || '');\n});\n\nbrowser.init({\n    browserName:'chrome'\n    , tags : [\"examples\"]\n    , name: \"This is an example test\"\n  }, function() {\n\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, href) {\n            assert.ok(~href.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Browser initialization\n\n### Indexed parameters\n\n<pre>\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n</pre>\n\n### Named parameters\n\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module.\n\n<pre>\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n});\n</pre>\n\nThe following parameters may also be used (as in earlier versions):\n\n<pre>\nvar browser = wd.remote({\n  host: '127.0.0.1',\n  port: 4444,\n  username: 'username',\n  accessKey: 'password',\n});\n</pre>\n\n### Url string\n\n<pre>\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n</pre>\n\n### Url object created via `url.parse`\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n<pre>\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n</pre>\n\n### Defaults\n\n<pre>\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n</pre>\n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\n## Promises Api\n\nA promise api using [q](https://github.com/kriskowal/q) is\navailable. Code sample is\n[here](https://github.com/admc/wd/blob/master/examples/example.promise.chrome.js).\n\n## Generators Api\n\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\ngenerators in order to avoid nested callbacks, like so:\n\n```js\nwd.remote(function*() {\n  yield this.init(desiredCaps);\n  yield this.get(\"http://mysite.com\");\n  el = yield this.elementById(\"someId\");\n  yield el.click();\n  el2 = yield this.elementById(\"anotherThing\")\n  text = yield el2.text();\n  text.should.equal(\"What the text should be\");\n  yield this.quit();\n});\n```\n\n\n## Chain Api\n\nA chain api is also available. Code sample is [here](https://github.com/admc/wd/blob/master/examples/example.chain.chrome.js).\n\n### Injecting command to the chain\n\nAs [queue](https://github.com/caolan/async#queue) implementation that we're using has some limitations, a special helper method *next* was added. It allows you to inject new calls to the execution chain inside callbacks.\n\n#### Example 1 - the problem\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n    browser.clickElement(el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n#### Example 2 - solution, use *next*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // call to clickElement will be injected to the queue\n    // and will be executed sequentially after current function finishes\n    browser.next('clickElement', el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n### Inserting async code with *queueAddAsync*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n  })\n  .queueAddAsync( function(cb) {\n    // your code here\n    cb(null);\n  })\n  .clickElement(el, function() {\n    console.log(\"did the click!\");\n  })\n  // ...\n```\n\n## Supported Methods\n\n<table class=\"wikitable\">\n<tbody>\n<tr>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>JsonWireProtocol</strong>\n</td>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>wd</strong>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\nQuery the server's current status.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nstatus(cb) -&gt; cb(err, status)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\nCreate a new session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ninit(desired, cb) -&gt; cb(err, sessionID)<br>\nInitialize the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\nReturns a list of the currently active sessions.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsessions(cb) -&gt; cb(err, sessions)<br>\n</p>\n<p>\nAlternate strategy to get session capabilities from server session list:<br>\naltSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\nRetrieve the capabilities of the specified session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\nDelete the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nquit(cb) -&gt; cb(err)<br>\nDestroy the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\nConfigure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n(use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\nSet the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\nSet the amount of time the driver should wait when searching for elements.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\nRetrieve the current window handle.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandle(cb) -&gt; cb(err, handle)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\nRetrieve the list of all window handles available to the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nRetrieve the URL of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nurl(cb) -&gt; cb(err, url)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nNavigate to a new URL.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nget(url,cb) -&gt; cb(err)<br>\nGet a new url.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\nNavigate forwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nforward(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\nNavigate backwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nback(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\nRefresh the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrefresh(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecute(code, args, cb) -&gt; cb(err, result)<br>\nexecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute script within an eval block, always returning:<br>\nsafeExecute(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nEvaluate expression (using execute):<br>\neval(code, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nSafely evaluate expression, always returning  (using safeExecute):<br>\nsafeEval(code, cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nexecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute async script within an eval block, always returning:<br>\nsafeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\nTake a screenshot of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntakeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\nChange focus to another frame on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nframe(frameRef, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nChange focus to another window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindow(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nClose the current window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclose(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nChange the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nwindowSize(handle, width, height, cb) -&gt; cb(err)<br>\n</p>\n<p>\nsetWindowSize(width, height, handle, cb) -&gt; cb(err)<br>\nsetWindowSize(width, height, cb) -&gt; cb(err)<br>\nwidth: width in pixels to set size to<br>\nheight: height in pixels to set size to<br>\nhandle: window handle to set size for (optional, default: 'current')<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nGet the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowSize(handle, cb) -&gt; cb(err, size)<br>\ngetWindowSize(cb) -&gt; cb(err, size)<br>\nhandle: window handle to get size (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nChange the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetWindowPosition(x, y, handle, cb) -&gt; cb(err)<br>\nsetWindowPosition(x, y, cb) -&gt; cb(err)<br>\nx: the x-coordinate in pixels to set the window position<br>\ny: the y-coordinate in pixels to set the window position<br>\nhandle: window handle to set position for (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nGet the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowPosition(handle, cb) -&gt; cb(err, position)<br>\ngetWindowPosition(cb) -&gt; cb(err, position)<br>\nhandle: window handle to get position (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/maximize\">/session/:sessionId/window/:windowHandle/maximize</a><br>\nMaximize the specified window if not already maximized.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmaximize(handle, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nRetrieve all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nallCookies() -&gt; cb(err, cookies)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nSet a cookie.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetCookie(cookie, cb) -&gt; cb(err)<br>\ncookie example:<br>\n{name:'fruit', value:'apple'}<br>\nOptional cookie fields:<br>\npath, domain, secure, expiry<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nDelete all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteAllCookies(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\nDelete the cookie with the given name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteCookie(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/source\">/session/:sessionId/source</a><br>\nGet the current page source.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsource(cb) -&gt; cb(err, source)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\nGet the current page title.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntitle(cb) -&gt; cb(err, title)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\nSearch for an element on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassName(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelementById(value, cb) -&gt; cb(err, element)<br>\nelementByName(value, cb) -&gt; cb(err, element)<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByTagName(value, cb) -&gt; cb(err, element)<br>\nelementByXPath(value, cb) -&gt; cb(err, element)<br>\nelementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\nSearch for multiple elements on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelementsById(value, cb) -&gt; cb(err, elements)<br>\nelementsByName(value, cb) -&gt; cb(err, elements)<br>\nelementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning null instead:<br>\nelementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning undefined instead:<br>\nelementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nCheck if element exists:<br>\nhasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n</p>\n<p>\nhasElementByClassName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCssSelector(value, cb) -&gt; cb(err, boolean)<br>\nhasElementById(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByTagName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByXPath(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCss(value, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\nGet the element on the page that currently has focus.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nactive(cb) -&gt; cb(err, element)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/element\">/session/:sessionId/element/:id/element</a><br>\nSearch for an element on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.element(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelement.elementByClassName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelement.elementById(value, cb) -&gt; cb(err, element)<br>\nelement.elementByName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByTagName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByXPath(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/elements\">/session/:sessionId/element/:id/elements</a><br>\nSearch for multiple elements on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.elements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelement.elementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsById(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\nClick on an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclickElement(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.click(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/submit\">/session/:sessionId/element/:id/submit</a><br>\nSubmit a FORM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsubmit(element, cb) -&gt; cb(err)<br>\nSubmit a `FORM` element.<br>\n</p>\n<p>\nelement.submit(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\nReturns the visible text for the element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntext(element, cb) -&gt; cb(err, text)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.text(cb) -&gt; cb(err, text)<br>\n</p>\n<p>\nCheck if text is present:<br>\ntextPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\nSend a sequence of key strokes to an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntype(element, keys, cb) -&gt; cb(err)<br>\nType keys (all keys are up at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</p>\n<p>\nelement.type(keys, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\nSend a sequence of key strokes to the active element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nkeys(keys, cb) -&gt; cb(err)<br>\nPress keys (keys may still be down at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\nQuery for an element's tag name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetTagName(element, cb) -&gt; cb(err, name)<br>\n</p>\n<p>\nelement.getTagName(cb) -&gt; cb(err, name)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\nClear a TEXTAREA or text INPUT element's value.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclear(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.clear(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/selected\">/session/:sessionId/element/:id/selected</a><br>\nDetermine if an OPTION element, or an INPUT element of type checkbox or radiobutton is currently selected.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisSelected(element, cb) -&gt; cb(err, selected)<br>\n</p>\n<p>\nelement.isSelected(cb) -&gt; cb(err, selected)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/enabled\">/session/:sessionId/element/:id/enabled</a><br>\nDetermine if an element is currently enabled.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisEnabled(element, cb) -&gt; cb(err, enabled)<br>\n</p>\n<p>\nelement.isEnabled(cb) -&gt; cb(err, enabled)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\nGet the value of an element's attribute.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nGet element value (in value attribute):<br>\ngetValue(element, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getValue(cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/equals/:other\">/session/:sessionId/element/:id/equals/:other</a><br>\nTest if two element IDs refer to the same DOM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.equals(other, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nequalsElement(element, other , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\nDetermine if an element is currently displayed.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n</p>\n<p>\nelement.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location\">/session/:sessionId/element/:id/location</a><br>\nDetermine an element's location on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetLocation(element, cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocation(cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocationInView(cb) -&gt; cb(err, location)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location_in_view\">/session/:sessionId/element/:id/location_in_view</a><br>\nDetermine an element's location on the screen once it has been scrolled into view.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocationInView(element, cb) -&gt; cb(err, location)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size\">/session/:sessionId/element/:id/size</a><br>\nDetermine an element's size in pixels.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetSize(element, cb) -&gt; cb(err, size)<br>\n</p>\n<p>\nelement.getSize(cb) -&gt; cb(err, size)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\nQuery the value of an element's computed CSS property.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nGet the current browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nSet the browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nGets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertText(cb) -&gt; cb(err, text)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nSends keystrokes to a JavaScript prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\nAccepts the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nacceptAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\nDismisses the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndismissAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\nMove the mouse by an offset of the specificed element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmoveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\nMove to element, xoffset and y offset are optional.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\nClick any mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclick(button, cb) -&gt; cb(err)<br>\nClick on current element.<br>\nButtons: {left: 0, middle: 1 , right: 2}<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\nClick and hold the left mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonDown(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\nReleases the mouse button previously held (where the mouse is currently at).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonUp(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\nDouble-clicks at the current mouse coordinates (set by moveto).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ndoubleclick(cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.doubleClick(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/flick\">/session/:sessionId/touch/flick</a><br>\nFlick on the touch screen using finger motion events.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nflick(xSpeed, ySpeed, swipe, cb) -&gt; cb(err)<br>\nFlicks, starting anywhere on the screen.<br>\nflick(element, xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\nFlicks, starting at element center.<br>\n</p>\n<p>\nelement.flick(xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nSet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetLocalStorageKey(key, value, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nClear the storage.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclearLocalStorage(cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nGet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeEval() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nRemove the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nremoveLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nOpens a new window (using Javascript window.open):<br>\nnewWindow(url, name, cb) -&gt; cb(err)<br>\nnewWindow(url, cb) -&gt; cb(err)<br>\nname: optional window name<br>\nWindow can later be accessed by name with the window method,<br>\nor by getting the last handle returned by the windowHandles method.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowName(cb) -&gt; cb(err, name)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetHTTPInactivityTimeout(ms)<br>\nms: how many milliseconds to wait for any communication with the WebDriver server (i.e. any command to complete) before the connection is considered lost<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(element , cb) -&gt; cb(err, boolean)<br>\nisVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nRetrieves the pageIndex element (added for Appium):<br>\ngetPageIndex(element, cb) -&gt; cb(err, pageIndex)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nUploads a local file using undocumented<br>\nPOST /session/:sessionId/file<br>\nuploadFile(filepath, cb) -&gt; cb(err, filepath)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (polling within wd client):<br>\nwaitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (async script polling within browser):<br>\nwaitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEquivalent to the python sendKeys binding. Upload file if <br>\na local file is detected, otherwise behaves like type.<br>\nelement.sendKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n</tbody>\n</table>\n\n## JsonWireProtocol mapping\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Install the Selenium server and Chromedriver\n      node_modules/.bin/install_selenium\n      node_modules/.bin/install_chromedriver\n  - Run the selenium server with chromedriver:\n      node_modules/.bin/start_selenium_with_chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Monkey patching\n\nYou may want to monkey patch the webdriver class in order to add custom functionalities.\nThere is an example [here](https://github.com/admc/wd/blob/master/examples/example.monkey.patch.js).\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n<pre>\n  - make mapping > doc/jsonwire-mapping.md\n  - make full_mapping > doc/jsonwire-full-mapping.md\n  - make unsupported_mapping > doc/jsonwire-unsupported-mapping.md\n</pre>\n\nThe content of doc/jsonwire-mapping.md should then be manually integrated into\nREADME.md.\n\n## Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```javascript\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","readmeFilename":"README.md","_id":"wd@0.1.0","dist":{"shasum":"2e95a1122bad47732eeed4f2d043847d43e072c9","tarball":"http://registry.npmjs.org/wd/-/wd-0.1.0.tgz"},"_from":".","_npmVersion":"1.3.4","_npmUser":{"name":"sebv","email":"seb.vincent@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.1.1":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.1.1","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.2.x","underscore":"1.4.x","vargs":"~0.1.0","q":"0.9.x","request":"~2.21.0","archiver":"~0.4.6"},"devDependencies":{"mocha":"1.9.x","should":"1.2.x","nock":"~0.17.5","coffee-script":"1.6.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","dox":"0.4.x","mu2":"0.5.x","sv-selenium":"0.1.x","colors":"~0.6.0-1"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n  - Mailing List: https://groups.google.com/forum/#!forum/wdjs\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar wd = require('wd')\n  , assert = require('assert')\n  , colors = require('colors')\n  , browser = wd.remote();\n\nbrowser.on('status', function(info) {\n  console.log(info.cyan);\n});\n\nbrowser.on('command', function(meth, path, data) {\n  console.log(' > ' + meth.yellow, path.grey, data || '');\n});\n\nbrowser.init({\n    browserName:'chrome'\n    , tags : [\"examples\"]\n    , name: \"This is an example test\"\n  }, function() {\n\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, href) {\n            assert.ok(~href.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Browser initialization\n\n### Indexed parameters\n\n<pre>\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n</pre>\n\n### Named parameters\n\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module.\n\n<pre>\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n});\n</pre>\n\nThe following parameters may also be used (as in earlier versions):\n\n<pre>\nvar browser = wd.remote({\n  host: '127.0.0.1',\n  port: 4444,\n  username: 'username',\n  accessKey: 'password',\n});\n</pre>\n\n### Url string\n\n<pre>\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n</pre>\n\n### Url object created via `url.parse`\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n<pre>\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n</pre>\n\n### Defaults\n\n<pre>\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n</pre>\n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\n## Promises Api\n\nA promise api using [q](https://github.com/kriskowal/q) is\navailable. Code sample is\n[here](https://github.com/admc/wd/blob/master/examples/example.promise.chrome.js).\n\n## Generators Api\n\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\ngenerators in order to avoid nested callbacks, like so:\n\n```js\nwd.remote(function*() {\n  yield this.init(desiredCaps);\n  yield this.get(\"http://mysite.com\");\n  el = yield this.elementById(\"someId\");\n  yield el.click();\n  el2 = yield this.elementById(\"anotherThing\")\n  text = yield el2.text();\n  text.should.equal(\"What the text should be\");\n  yield this.quit();\n});\n```\n\n\n## Chain Api\n\nA chain api is also available. Code sample is [here](https://github.com/admc/wd/blob/master/examples/example.chain.chrome.js).\n\n### Injecting command to the chain\n\nAs [queue](https://github.com/caolan/async#queue) implementation that we're using has some limitations, a special helper method *next* was added. It allows you to inject new calls to the execution chain inside callbacks.\n\n#### Example 1 - the problem\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n    browser.clickElement(el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n#### Example 2 - solution, use *next*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // call to clickElement will be injected to the queue\n    // and will be executed sequentially after current function finishes\n    browser.next('clickElement', el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n### Inserting async code with *queueAddAsync*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n  })\n  .queueAddAsync( function(cb) {\n    // your code here\n    cb(null);\n  })\n  .clickElement(el, function() {\n    console.log(\"did the click!\");\n  })\n  // ...\n```\n\n## Supported Methods\n\n<table class=\"wikitable\">\n<tbody>\n<tr>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>JsonWireProtocol</strong>\n</td>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>wd</strong>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\nQuery the server's current status.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nstatus(cb) -&gt; cb(err, status)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\nCreate a new session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ninit(desired, cb) -&gt; cb(err, sessionID)<br>\nInitialize the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\nReturns a list of the currently active sessions.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsessions(cb) -&gt; cb(err, sessions)<br>\n</p>\n<p>\nAlternate strategy to get session capabilities from server session list:<br>\naltSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\nRetrieve the capabilities of the specified session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\nDelete the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nquit(cb) -&gt; cb(err)<br>\nDestroy the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\nConfigure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n(use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\nSet the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\nSet the amount of time the driver should wait when searching for elements.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\nRetrieve the current window handle.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandle(cb) -&gt; cb(err, handle)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\nRetrieve the list of all window handles available to the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nRetrieve the URL of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nurl(cb) -&gt; cb(err, url)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nNavigate to a new URL.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nget(url,cb) -&gt; cb(err)<br>\nGet a new url.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\nNavigate forwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nforward(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\nNavigate backwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nback(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\nRefresh the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrefresh(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecute(code, args, cb) -&gt; cb(err, result)<br>\nexecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute script within an eval block, always returning:<br>\nsafeExecute(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nEvaluate expression (using execute):<br>\neval(code, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nSafely evaluate expression, always returning  (using safeExecute):<br>\nsafeEval(code, cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nexecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute async script within an eval block, always returning:<br>\nsafeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\nTake a screenshot of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntakeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\nChange focus to another frame on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nframe(frameRef, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nChange focus to another window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindow(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nClose the current window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclose(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nChange the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nwindowSize(handle, width, height, cb) -&gt; cb(err)<br>\n</p>\n<p>\nsetWindowSize(width, height, handle, cb) -&gt; cb(err)<br>\nsetWindowSize(width, height, cb) -&gt; cb(err)<br>\nwidth: width in pixels to set size to<br>\nheight: height in pixels to set size to<br>\nhandle: window handle to set size for (optional, default: 'current')<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nGet the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowSize(handle, cb) -&gt; cb(err, size)<br>\ngetWindowSize(cb) -&gt; cb(err, size)<br>\nhandle: window handle to get size (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nChange the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetWindowPosition(x, y, handle, cb) -&gt; cb(err)<br>\nsetWindowPosition(x, y, cb) -&gt; cb(err)<br>\nx: the x-coordinate in pixels to set the window position<br>\ny: the y-coordinate in pixels to set the window position<br>\nhandle: window handle to set position for (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nGet the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowPosition(handle, cb) -&gt; cb(err, position)<br>\ngetWindowPosition(cb) -&gt; cb(err, position)<br>\nhandle: window handle to get position (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/maximize\">/session/:sessionId/window/:windowHandle/maximize</a><br>\nMaximize the specified window if not already maximized.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmaximize(handle, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nRetrieve all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nallCookies() -&gt; cb(err, cookies)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nSet a cookie.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetCookie(cookie, cb) -&gt; cb(err)<br>\ncookie example:<br>\n{name:'fruit', value:'apple'}<br>\nOptional cookie fields:<br>\npath, domain, secure, expiry<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nDelete all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteAllCookies(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\nDelete the cookie with the given name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteCookie(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/source\">/session/:sessionId/source</a><br>\nGet the current page source.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsource(cb) -&gt; cb(err, source)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\nGet the current page title.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntitle(cb) -&gt; cb(err, title)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\nSearch for an element on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassName(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelementById(value, cb) -&gt; cb(err, element)<br>\nelementByName(value, cb) -&gt; cb(err, element)<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByTagName(value, cb) -&gt; cb(err, element)<br>\nelementByXPath(value, cb) -&gt; cb(err, element)<br>\nelementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\nSearch for multiple elements on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelementsById(value, cb) -&gt; cb(err, elements)<br>\nelementsByName(value, cb) -&gt; cb(err, elements)<br>\nelementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning null instead:<br>\nelementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning undefined instead:<br>\nelementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nCheck if element exists:<br>\nhasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n</p>\n<p>\nhasElementByClassName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCssSelector(value, cb) -&gt; cb(err, boolean)<br>\nhasElementById(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByTagName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByXPath(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCss(value, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\nGet the element on the page that currently has focus.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nactive(cb) -&gt; cb(err, element)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/element\">/session/:sessionId/element/:id/element</a><br>\nSearch for an element on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.element(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelement.elementByClassName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelement.elementById(value, cb) -&gt; cb(err, element)<br>\nelement.elementByName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByTagName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByXPath(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/elements\">/session/:sessionId/element/:id/elements</a><br>\nSearch for multiple elements on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.elements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelement.elementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsById(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\nClick on an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclickElement(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.click(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/submit\">/session/:sessionId/element/:id/submit</a><br>\nSubmit a FORM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsubmit(element, cb) -&gt; cb(err)<br>\nSubmit a `FORM` element.<br>\n</p>\n<p>\nelement.submit(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\nReturns the visible text for the element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntext(element, cb) -&gt; cb(err, text)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.text(cb) -&gt; cb(err, text)<br>\n</p>\n<p>\nCheck if text is present:<br>\ntextPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\nSend a sequence of key strokes to an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntype(element, keys, cb) -&gt; cb(err)<br>\nType keys (all keys are up at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</p>\n<p>\nelement.type(keys, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\nSend a sequence of key strokes to the active element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nkeys(keys, cb) -&gt; cb(err)<br>\nPress keys (keys may still be down at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\nQuery for an element's tag name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetTagName(element, cb) -&gt; cb(err, name)<br>\n</p>\n<p>\nelement.getTagName(cb) -&gt; cb(err, name)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\nClear a TEXTAREA or text INPUT element's value.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclear(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.clear(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/selected\">/session/:sessionId/element/:id/selected</a><br>\nDetermine if an OPTION element, or an INPUT element of type checkbox or radiobutton is currently selected.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisSelected(element, cb) -&gt; cb(err, selected)<br>\n</p>\n<p>\nelement.isSelected(cb) -&gt; cb(err, selected)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/enabled\">/session/:sessionId/element/:id/enabled</a><br>\nDetermine if an element is currently enabled.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisEnabled(element, cb) -&gt; cb(err, enabled)<br>\n</p>\n<p>\nelement.isEnabled(cb) -&gt; cb(err, enabled)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\nGet the value of an element's attribute.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nGet element value (in value attribute):<br>\ngetValue(element, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getValue(cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/equals/:other\">/session/:sessionId/element/:id/equals/:other</a><br>\nTest if two element IDs refer to the same DOM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.equals(other, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nequalsElement(element, other , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\nDetermine if an element is currently displayed.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n</p>\n<p>\nelement.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location\">/session/:sessionId/element/:id/location</a><br>\nDetermine an element's location on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetLocation(element, cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocation(cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocationInView(cb) -&gt; cb(err, location)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location_in_view\">/session/:sessionId/element/:id/location_in_view</a><br>\nDetermine an element's location on the screen once it has been scrolled into view.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocationInView(element, cb) -&gt; cb(err, location)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size\">/session/:sessionId/element/:id/size</a><br>\nDetermine an element's size in pixels.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetSize(element, cb) -&gt; cb(err, size)<br>\n</p>\n<p>\nelement.getSize(cb) -&gt; cb(err, size)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\nQuery the value of an element's computed CSS property.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nGet the current browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nSet the browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nGets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertText(cb) -&gt; cb(err, text)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nSends keystrokes to a JavaScript prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\nAccepts the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nacceptAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\nDismisses the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndismissAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\nMove the mouse by an offset of the specificed element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmoveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\nMove to element, xoffset and y offset are optional.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\nClick any mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclick(button, cb) -&gt; cb(err)<br>\nClick on current element.<br>\nButtons: {left: 0, middle: 1 , right: 2}<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\nClick and hold the left mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonDown(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\nReleases the mouse button previously held (where the mouse is currently at).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonUp(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\nDouble-clicks at the current mouse coordinates (set by moveto).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ndoubleclick(cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.doubleClick(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/flick\">/session/:sessionId/touch/flick</a><br>\nFlick on the touch screen using finger motion events.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nflick(xSpeed, ySpeed, swipe, cb) -&gt; cb(err)<br>\nFlicks, starting anywhere on the screen.<br>\nflick(element, xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\nFlicks, starting at element center.<br>\n</p>\n<p>\nelement.flick(xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nSet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetLocalStorageKey(key, value, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nClear the storage.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclearLocalStorage(cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nGet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeEval() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nRemove the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nremoveLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nOpens a new window (using Javascript window.open):<br>\nnewWindow(url, name, cb) -&gt; cb(err)<br>\nnewWindow(url, cb) -&gt; cb(err)<br>\nname: optional window name<br>\nWindow can later be accessed by name with the window method,<br>\nor by getting the last handle returned by the windowHandles method.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowName(cb) -&gt; cb(err, name)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetHTTPInactivityTimeout(ms)<br>\nms: how many milliseconds to wait for any communication with the WebDriver server (i.e. any command to complete) before the connection is considered lost<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(element , cb) -&gt; cb(err, boolean)<br>\nisVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nRetrieves the pageIndex element (added for Appium):<br>\ngetPageIndex(element, cb) -&gt; cb(err, pageIndex)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nUploads a local file using undocumented<br>\nPOST /session/:sessionId/file<br>\nuploadFile(filepath, cb) -&gt; cb(err, filepath)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (polling within wd client):<br>\nwaitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (async script polling within browser):<br>\nwaitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEquivalent to the python sendKeys binding. Upload file if <br>\na local file is detected, otherwise behaves like type.<br>\nelement.sendKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n</tbody>\n</table>\n\n## JsonWireProtocol mapping\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Install the Selenium server and Chromedriver\n      node_modules/.bin/install_selenium\n      node_modules/.bin/install_chromedriver\n  - Run the selenium server with chromedriver:\n      node_modules/.bin/start_selenium_with_chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Monkey patching\n\nYou may want to monkey patch the webdriver class in order to add custom functionalities.\nThere is an example [here](https://github.com/admc/wd/blob/master/examples/example.monkey.patch.js).\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n<pre>\n  - make mapping > doc/jsonwire-mapping.md\n  - make full_mapping > doc/jsonwire-full-mapping.md\n  - make unsupported_mapping > doc/jsonwire-unsupported-mapping.md\n</pre>\n\nThe content of doc/jsonwire-mapping.md should then be manually integrated into\nREADME.md.\n\n## Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```javascript\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","readmeFilename":"README.md","_id":"wd@0.1.1","dist":{"shasum":"6a72f8aef1a71a79d0ec5926839472f2b8e4164d","tarball":"http://registry.npmjs.org/wd/-/wd-0.1.1.tgz"},"_from":".","_npmVersion":"1.2.17","_npmUser":{"name":"admc","email":"adam.christian@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.1.2":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.1.2","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.2.x","underscore":"1.4.x","vargs":"~0.1.0","q":"0.9.x","request":"~2.21.0","archiver":"~0.4.6"},"devDependencies":{"mocha":"1.9.x","should":"1.2.x","nock":"~0.17.5","coffee-script":"1.6.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","dox":"0.4.x","mu2":"0.5.x","sv-selenium":"0.1.x","colors":"~0.6.0-1"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n  - Mailing List: https://groups.google.com/forum/#!forum/wdjs\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar wd = require('wd')\n  , assert = require('assert')\n  , colors = require('colors')\n  , browser = wd.remote();\n\nbrowser.on('status', function(info) {\n  console.log(info.cyan);\n});\n\nbrowser.on('command', function(meth, path, data) {\n  console.log(' > ' + meth.yellow, path.grey, data || '');\n});\n\nbrowser.init({\n    browserName:'chrome'\n    , tags : [\"examples\"]\n    , name: \"This is an example test\"\n  }, function() {\n\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, href) {\n            assert.ok(~href.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Browser initialization\n\n### Indexed parameters\n\n<pre>\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n</pre>\n\n### Named parameters\n\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module.\n\n<pre>\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n});\n</pre>\n\nThe following parameters may also be used (as in earlier versions):\n\n<pre>\nvar browser = wd.remote({\n  host: '127.0.0.1',\n  port: 4444,\n  username: 'username',\n  accessKey: 'password',\n});\n</pre>\n\n### Url string\n\n<pre>\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n</pre>\n\n### Url object created via `url.parse`\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n<pre>\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n</pre>\n\n### Defaults\n\n<pre>\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n</pre>\n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\n## Promises Api\n\nA promise api using [q](https://github.com/kriskowal/q) is\navailable. Code sample is\n[here](https://github.com/admc/wd/blob/master/examples/example.promise.chrome.js).\n\n## Generators Api\n\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\ngenerators in order to avoid nested callbacks, like so:\n\n```js\nwd.remote(function*() {\n  yield this.init(desiredCaps);\n  yield this.get(\"http://mysite.com\");\n  el = yield this.elementById(\"someId\");\n  yield el.click();\n  el2 = yield this.elementById(\"anotherThing\")\n  text = yield el2.text();\n  text.should.equal(\"What the text should be\");\n  yield this.quit();\n});\n```\n\n\n## Chain Api\n\nA chain api is also available. Code sample is [here](https://github.com/admc/wd/blob/master/examples/example.chain.chrome.js).\n\n### Injecting command to the chain\n\nAs [queue](https://github.com/caolan/async#queue) implementation that we're using has some limitations, a special helper method *next* was added. It allows you to inject new calls to the execution chain inside callbacks.\n\n#### Example 1 - the problem\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n    browser.clickElement(el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n#### Example 2 - solution, use *next*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // call to clickElement will be injected to the queue\n    // and will be executed sequentially after current function finishes\n    browser.next('clickElement', el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n### Inserting async code with *queueAddAsync*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n  })\n  .queueAddAsync( function(cb) {\n    // your code here\n    cb(null);\n  })\n  .clickElement(el, function() {\n    console.log(\"did the click!\");\n  })\n  // ...\n```\n\n## Supported Methods\n\n<table class=\"wikitable\">\n<tbody>\n<tr>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>JsonWireProtocol</strong>\n</td>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>wd</strong>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\nQuery the server's current status.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nstatus(cb) -&gt; cb(err, status)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\nCreate a new session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ninit(desired, cb) -&gt; cb(err, sessionID)<br>\nInitialize the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\nReturns a list of the currently active sessions.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsessions(cb) -&gt; cb(err, sessions)<br>\n</p>\n<p>\nAlternate strategy to get session capabilities from server session list:<br>\naltSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\nRetrieve the capabilities of the specified session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\nDelete the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nquit(cb) -&gt; cb(err)<br>\nDestroy the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\nConfigure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n(use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\nSet the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\nSet the amount of time the driver should wait when searching for elements.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\nRetrieve the current window handle.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandle(cb) -&gt; cb(err, handle)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\nRetrieve the list of all window handles available to the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nRetrieve the URL of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nurl(cb) -&gt; cb(err, url)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nNavigate to a new URL.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nget(url,cb) -&gt; cb(err)<br>\nGet a new url.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\nNavigate forwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nforward(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\nNavigate backwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nback(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\nRefresh the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrefresh(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecute(code, args, cb) -&gt; cb(err, result)<br>\nexecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute script within an eval block, always returning:<br>\nsafeExecute(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nEvaluate expression (using execute):<br>\neval(code, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nSafely evaluate expression, always returning  (using safeExecute):<br>\nsafeEval(code, cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nexecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute async script within an eval block, always returning:<br>\nsafeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\nTake a screenshot of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntakeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\nChange focus to another frame on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nframe(frameRef, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nChange focus to another window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindow(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nClose the current window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclose(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nChange the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nwindowSize(handle, width, height, cb) -&gt; cb(err)<br>\n</p>\n<p>\nsetWindowSize(width, height, handle, cb) -&gt; cb(err)<br>\nsetWindowSize(width, height, cb) -&gt; cb(err)<br>\nwidth: width in pixels to set size to<br>\nheight: height in pixels to set size to<br>\nhandle: window handle to set size for (optional, default: 'current')<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nGet the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowSize(handle, cb) -&gt; cb(err, size)<br>\ngetWindowSize(cb) -&gt; cb(err, size)<br>\nhandle: window handle to get size (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nChange the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetWindowPosition(x, y, handle, cb) -&gt; cb(err)<br>\nsetWindowPosition(x, y, cb) -&gt; cb(err)<br>\nx: the x-coordinate in pixels to set the window position<br>\ny: the y-coordinate in pixels to set the window position<br>\nhandle: window handle to set position for (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nGet the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowPosition(handle, cb) -&gt; cb(err, position)<br>\ngetWindowPosition(cb) -&gt; cb(err, position)<br>\nhandle: window handle to get position (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/maximize\">/session/:sessionId/window/:windowHandle/maximize</a><br>\nMaximize the specified window if not already maximized.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmaximize(handle, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nRetrieve all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nallCookies() -&gt; cb(err, cookies)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nSet a cookie.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetCookie(cookie, cb) -&gt; cb(err)<br>\ncookie example:<br>\n{name:'fruit', value:'apple'}<br>\nOptional cookie fields:<br>\npath, domain, secure, expiry<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nDelete all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteAllCookies(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\nDelete the cookie with the given name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteCookie(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/source\">/session/:sessionId/source</a><br>\nGet the current page source.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsource(cb) -&gt; cb(err, source)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\nGet the current page title.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntitle(cb) -&gt; cb(err, title)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\nSearch for an element on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassName(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelementById(value, cb) -&gt; cb(err, element)<br>\nelementByName(value, cb) -&gt; cb(err, element)<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByTagName(value, cb) -&gt; cb(err, element)<br>\nelementByXPath(value, cb) -&gt; cb(err, element)<br>\nelementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\nSearch for multiple elements on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelementsById(value, cb) -&gt; cb(err, elements)<br>\nelementsByName(value, cb) -&gt; cb(err, elements)<br>\nelementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning null instead:<br>\nelementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning undefined instead:<br>\nelementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nCheck if element exists:<br>\nhasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n</p>\n<p>\nhasElementByClassName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCssSelector(value, cb) -&gt; cb(err, boolean)<br>\nhasElementById(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByTagName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByXPath(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCss(value, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\nGet the element on the page that currently has focus.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nactive(cb) -&gt; cb(err, element)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/element\">/session/:sessionId/element/:id/element</a><br>\nSearch for an element on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.element(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelement.elementByClassName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelement.elementById(value, cb) -&gt; cb(err, element)<br>\nelement.elementByName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByTagName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByXPath(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/elements\">/session/:sessionId/element/:id/elements</a><br>\nSearch for multiple elements on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.elements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelement.elementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsById(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\nClick on an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclickElement(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.click(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/submit\">/session/:sessionId/element/:id/submit</a><br>\nSubmit a FORM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsubmit(element, cb) -&gt; cb(err)<br>\nSubmit a `FORM` element.<br>\n</p>\n<p>\nelement.submit(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\nReturns the visible text for the element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntext(element, cb) -&gt; cb(err, text)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.text(cb) -&gt; cb(err, text)<br>\n</p>\n<p>\nCheck if text is present:<br>\ntextPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\nSend a sequence of key strokes to an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntype(element, keys, cb) -&gt; cb(err)<br>\nType keys (all keys are up at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</p>\n<p>\nelement.type(keys, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\nSend a sequence of key strokes to the active element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nkeys(keys, cb) -&gt; cb(err)<br>\nPress keys (keys may still be down at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\nQuery for an element's tag name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetTagName(element, cb) -&gt; cb(err, name)<br>\n</p>\n<p>\nelement.getTagName(cb) -&gt; cb(err, name)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\nClear a TEXTAREA or text INPUT element's value.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclear(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.clear(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/selected\">/session/:sessionId/element/:id/selected</a><br>\nDetermine if an OPTION element, or an INPUT element of type checkbox or radiobutton is currently selected.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisSelected(element, cb) -&gt; cb(err, selected)<br>\n</p>\n<p>\nelement.isSelected(cb) -&gt; cb(err, selected)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/enabled\">/session/:sessionId/element/:id/enabled</a><br>\nDetermine if an element is currently enabled.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisEnabled(element, cb) -&gt; cb(err, enabled)<br>\n</p>\n<p>\nelement.isEnabled(cb) -&gt; cb(err, enabled)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\nGet the value of an element's attribute.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nGet element value (in value attribute):<br>\ngetValue(element, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getValue(cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/equals/:other\">/session/:sessionId/element/:id/equals/:other</a><br>\nTest if two element IDs refer to the same DOM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.equals(other, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nequalsElement(element, other , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\nDetermine if an element is currently displayed.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n</p>\n<p>\nelement.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location\">/session/:sessionId/element/:id/location</a><br>\nDetermine an element's location on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetLocation(element, cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocation(cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocationInView(cb) -&gt; cb(err, location)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location_in_view\">/session/:sessionId/element/:id/location_in_view</a><br>\nDetermine an element's location on the screen once it has been scrolled into view.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocationInView(element, cb) -&gt; cb(err, location)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size\">/session/:sessionId/element/:id/size</a><br>\nDetermine an element's size in pixels.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetSize(element, cb) -&gt; cb(err, size)<br>\n</p>\n<p>\nelement.getSize(cb) -&gt; cb(err, size)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\nQuery the value of an element's computed CSS property.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nGet the current browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nSet the browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nGets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertText(cb) -&gt; cb(err, text)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nSends keystrokes to a JavaScript prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\nAccepts the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nacceptAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\nDismisses the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndismissAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\nMove the mouse by an offset of the specificed element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmoveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\nMove to element, xoffset and y offset are optional.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\nClick any mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclick(button, cb) -&gt; cb(err)<br>\nClick on current element.<br>\nButtons: {left: 0, middle: 1 , right: 2}<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\nClick and hold the left mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonDown(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\nReleases the mouse button previously held (where the mouse is currently at).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonUp(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\nDouble-clicks at the current mouse coordinates (set by moveto).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ndoubleclick(cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.doubleClick(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/flick\">/session/:sessionId/touch/flick</a><br>\nFlick on the touch screen using finger motion events.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nflick(xSpeed, ySpeed, swipe, cb) -&gt; cb(err)<br>\nFlicks, starting anywhere on the screen.<br>\nflick(element, xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\nFlicks, starting at element center.<br>\n</p>\n<p>\nelement.flick(xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nSet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetLocalStorageKey(key, value, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nClear the storage.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclearLocalStorage(cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nGet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeEval() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nRemove the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nremoveLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nOpens a new window (using Javascript window.open):<br>\nnewWindow(url, name, cb) -&gt; cb(err)<br>\nnewWindow(url, cb) -&gt; cb(err)<br>\nname: optional window name<br>\nWindow can later be accessed by name with the window method,<br>\nor by getting the last handle returned by the windowHandles method.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowName(cb) -&gt; cb(err, name)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetHTTPInactivityTimeout(ms)<br>\nms: how many milliseconds to wait for any communication with the WebDriver server (i.e. any command to complete) before the connection is considered lost<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(element , cb) -&gt; cb(err, boolean)<br>\nisVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nRetrieves the pageIndex element (added for Appium):<br>\ngetPageIndex(element, cb) -&gt; cb(err, pageIndex)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nUploads a local file using undocumented<br>\nPOST /session/:sessionId/file<br>\nuploadFile(filepath, cb) -&gt; cb(err, filepath)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (polling within wd client):<br>\nwaitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (async script polling within browser):<br>\nwaitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEquivalent to the python sendKeys binding. Upload file if <br>\na local file is detected, otherwise behaves like type.<br>\nelement.sendKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n</tbody>\n</table>\n\n## JsonWireProtocol mapping\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Install the Selenium server and Chromedriver\n      node_modules/.bin/install_selenium\n      node_modules/.bin/install_chromedriver\n  - Run the selenium server with chromedriver:\n      node_modules/.bin/start_selenium_with_chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Monkey patching\n\nYou may want to monkey patch the webdriver class in order to add custom functionalities.\nThere is an example [here](https://github.com/admc/wd/blob/master/examples/example.monkey.patch.js).\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n<pre>\n  - make mapping > doc/jsonwire-mapping.md\n  - make full_mapping > doc/jsonwire-full-mapping.md\n  - make unsupported_mapping > doc/jsonwire-unsupported-mapping.md\n</pre>\n\nThe content of doc/jsonwire-mapping.md should then be manually integrated into\nREADME.md.\n\n## Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```javascript\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","readmeFilename":"README.md","_id":"wd@0.1.2","dist":{"shasum":"5aad06adf49d7da5ec909d9cc87f7c631bd9586f","tarball":"http://registry.npmjs.org/wd/-/wd-0.1.2.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"jlipps","email":"jlipps@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.1.3":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.1.3","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.2.x","vargs":"~0.1.0","q":"0.9.x","request":"~2.21.0","archiver":"~0.4.6","lodash":"~1.3.1"},"devDependencies":{"mocha":"1.9.x","should":"1.2.x","nock":"~0.17.5","coffee-script":"1.6.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","dox":"0.4.x","mu2":"0.5.x","sv-selenium":"0.1.x","colors":"~0.6.0-1"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n  - Mailing List: https://groups.google.com/forum/#!forum/wdjs\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar wd = require('wd')\n  , assert = require('assert')\n  , colors = require('colors')\n  , browser = wd.remote();\n\nbrowser.on('status', function(info) {\n  console.log(info.cyan);\n});\n\nbrowser.on('command', function(meth, path, data) {\n  console.log(' > ' + meth.yellow, path.grey, data || '');\n});\n\nbrowser.init({\n    browserName:'chrome'\n    , tags : [\"examples\"]\n    , name: \"This is an example test\"\n  }, function() {\n\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, href) {\n            assert.ok(~href.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Browser initialization\n\n### Indexed parameters\n\n<pre>\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n</pre>\n\n### Named parameters\n\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module.\n\n<pre>\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n});\n</pre>\n\nThe following parameters may also be used (as in earlier versions):\n\n<pre>\nvar browser = wd.remote({\n  host: '127.0.0.1',\n  port: 4444,\n  username: 'username',\n  accessKey: 'password',\n});\n</pre>\n\n### Url string\n\n<pre>\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n</pre>\n\n### Url object created via `url.parse`\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n<pre>\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n</pre>\n\n### Defaults\n\n<pre>\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n</pre>\n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\n## Promises Api\n\nA promise api using [q](https://github.com/kriskowal/q) is\navailable. Code sample is\n[here](https://github.com/admc/wd/blob/master/examples/example.promise.chrome.js).\n\n## Generators Api\n\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\ngenerators in order to avoid nested callbacks, like so:\n\n```js\nwd.remote(function*() {\n  yield this.init(desiredCaps);\n  yield this.get(\"http://mysite.com\");\n  el = yield this.elementById(\"someId\");\n  yield el.click();\n  el2 = yield this.elementById(\"anotherThing\")\n  text = yield el2.text();\n  text.should.equal(\"What the text should be\");\n  yield this.quit();\n});\n```\n\n\n## Chain Api\n\nA chain api is also available. Code sample is [here](https://github.com/admc/wd/blob/master/examples/example.chain.chrome.js).\n\n### Injecting command to the chain\n\nAs [queue](https://github.com/caolan/async#queue) implementation that we're using has some limitations, a special helper method *next* was added. It allows you to inject new calls to the execution chain inside callbacks.\n\n#### Example 1 - the problem\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n    browser.clickElement(el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n#### Example 2 - solution, use *next*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // call to clickElement will be injected to the queue\n    // and will be executed sequentially after current function finishes\n    browser.next('clickElement', el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n### Inserting async code with *queueAddAsync*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n  })\n  .queueAddAsync( function(cb) {\n    // your code here\n    cb(null);\n  })\n  .clickElement(el, function() {\n    console.log(\"did the click!\");\n  })\n  // ...\n```\n\n## Supported Methods\n\n<table class=\"wikitable\">\n<tbody>\n<tr>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>JsonWireProtocol</strong>\n</td>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>wd</strong>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\nQuery the server's current status.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nstatus(cb) -&gt; cb(err, status)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\nCreate a new session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ninit(desired, cb) -&gt; cb(err, sessionID)<br>\nInitialize the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\nReturns a list of the currently active sessions.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsessions(cb) -&gt; cb(err, sessions)<br>\n</p>\n<p>\nAlternate strategy to get session capabilities from server session list:<br>\naltSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\nRetrieve the capabilities of the specified session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\nDelete the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nquit(cb) -&gt; cb(err)<br>\nDestroy the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\nConfigure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n(use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\nSet the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\nSet the amount of time the driver should wait when searching for elements.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\nRetrieve the current window handle.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandle(cb) -&gt; cb(err, handle)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\nRetrieve the list of all window handles available to the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nRetrieve the URL of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nurl(cb) -&gt; cb(err, url)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nNavigate to a new URL.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nget(url,cb) -&gt; cb(err)<br>\nGet a new url.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\nNavigate forwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nforward(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\nNavigate backwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nback(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\nRefresh the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrefresh(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecute(code, args, cb) -&gt; cb(err, result)<br>\nexecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute script within an eval block, always returning:<br>\nsafeExecute(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nEvaluate expression (using execute):<br>\neval(code, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nSafely evaluate expression, always returning  (using safeExecute):<br>\nsafeEval(code, cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nexecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute async script within an eval block, always returning:<br>\nsafeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\nTake a screenshot of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntakeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\nChange focus to another frame on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nframe(frameRef, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nChange focus to another window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindow(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nClose the current window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclose(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nChange the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nwindowSize(handle, width, height, cb) -&gt; cb(err)<br>\n</p>\n<p>\nsetWindowSize(width, height, handle, cb) -&gt; cb(err)<br>\nsetWindowSize(width, height, cb) -&gt; cb(err)<br>\nwidth: width in pixels to set size to<br>\nheight: height in pixels to set size to<br>\nhandle: window handle to set size for (optional, default: 'current')<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nGet the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowSize(handle, cb) -&gt; cb(err, size)<br>\ngetWindowSize(cb) -&gt; cb(err, size)<br>\nhandle: window handle to get size (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nChange the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetWindowPosition(x, y, handle, cb) -&gt; cb(err)<br>\nsetWindowPosition(x, y, cb) -&gt; cb(err)<br>\nx: the x-coordinate in pixels to set the window position<br>\ny: the y-coordinate in pixels to set the window position<br>\nhandle: window handle to set position for (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nGet the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowPosition(handle, cb) -&gt; cb(err, position)<br>\ngetWindowPosition(cb) -&gt; cb(err, position)<br>\nhandle: window handle to get position (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/maximize\">/session/:sessionId/window/:windowHandle/maximize</a><br>\nMaximize the specified window if not already maximized.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmaximize(handle, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nRetrieve all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nallCookies() -&gt; cb(err, cookies)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nSet a cookie.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetCookie(cookie, cb) -&gt; cb(err)<br>\ncookie example:<br>\n{name:'fruit', value:'apple'}<br>\nOptional cookie fields:<br>\npath, domain, secure, expiry<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nDelete all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteAllCookies(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\nDelete the cookie with the given name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteCookie(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/source\">/session/:sessionId/source</a><br>\nGet the current page source.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsource(cb) -&gt; cb(err, source)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\nGet the current page title.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntitle(cb) -&gt; cb(err, title)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\nSearch for an element on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassName(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelementById(value, cb) -&gt; cb(err, element)<br>\nelementByName(value, cb) -&gt; cb(err, element)<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByTagName(value, cb) -&gt; cb(err, element)<br>\nelementByXPath(value, cb) -&gt; cb(err, element)<br>\nelementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\nSearch for multiple elements on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelementsById(value, cb) -&gt; cb(err, elements)<br>\nelementsByName(value, cb) -&gt; cb(err, elements)<br>\nelementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning null instead:<br>\nelementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning undefined instead:<br>\nelementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nCheck if element exists:<br>\nhasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n</p>\n<p>\nhasElementByClassName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCssSelector(value, cb) -&gt; cb(err, boolean)<br>\nhasElementById(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByTagName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByXPath(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCss(value, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\nGet the element on the page that currently has focus.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nactive(cb) -&gt; cb(err, element)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/element\">/session/:sessionId/element/:id/element</a><br>\nSearch for an element on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.element(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelement.elementByClassName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelement.elementById(value, cb) -&gt; cb(err, element)<br>\nelement.elementByName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByTagName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByXPath(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/elements\">/session/:sessionId/element/:id/elements</a><br>\nSearch for multiple elements on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.elements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelement.elementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsById(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\nClick on an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclickElement(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.click(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/submit\">/session/:sessionId/element/:id/submit</a><br>\nSubmit a FORM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsubmit(element, cb) -&gt; cb(err)<br>\nSubmit a `FORM` element.<br>\n</p>\n<p>\nelement.submit(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\nReturns the visible text for the element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntext(element, cb) -&gt; cb(err, text)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.text(cb) -&gt; cb(err, text)<br>\n</p>\n<p>\nCheck if text is present:<br>\ntextPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\nSend a sequence of key strokes to an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntype(element, keys, cb) -&gt; cb(err)<br>\nType keys (all keys are up at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</p>\n<p>\nelement.type(keys, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\nSend a sequence of key strokes to the active element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nkeys(keys, cb) -&gt; cb(err)<br>\nPress keys (keys may still be down at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\nQuery for an element's tag name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetTagName(element, cb) -&gt; cb(err, name)<br>\n</p>\n<p>\nelement.getTagName(cb) -&gt; cb(err, name)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\nClear a TEXTAREA or text INPUT element's value.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclear(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.clear(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/selected\">/session/:sessionId/element/:id/selected</a><br>\nDetermine if an OPTION element, or an INPUT element of type checkbox or radiobutton is currently selected.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisSelected(element, cb) -&gt; cb(err, selected)<br>\n</p>\n<p>\nelement.isSelected(cb) -&gt; cb(err, selected)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/enabled\">/session/:sessionId/element/:id/enabled</a><br>\nDetermine if an element is currently enabled.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisEnabled(element, cb) -&gt; cb(err, enabled)<br>\n</p>\n<p>\nelement.isEnabled(cb) -&gt; cb(err, enabled)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\nGet the value of an element's attribute.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nGet element value (in value attribute):<br>\ngetValue(element, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getValue(cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/equals/:other\">/session/:sessionId/element/:id/equals/:other</a><br>\nTest if two element IDs refer to the same DOM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.equals(other, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nequalsElement(element, other , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\nDetermine if an element is currently displayed.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n</p>\n<p>\nelement.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location\">/session/:sessionId/element/:id/location</a><br>\nDetermine an element's location on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetLocation(element, cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocation(cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocationInView(cb) -&gt; cb(err, location)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location_in_view\">/session/:sessionId/element/:id/location_in_view</a><br>\nDetermine an element's location on the screen once it has been scrolled into view.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocationInView(element, cb) -&gt; cb(err, location)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size\">/session/:sessionId/element/:id/size</a><br>\nDetermine an element's size in pixels.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetSize(element, cb) -&gt; cb(err, size)<br>\n</p>\n<p>\nelement.getSize(cb) -&gt; cb(err, size)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\nQuery the value of an element's computed CSS property.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nGet the current browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nSet the browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nGets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertText(cb) -&gt; cb(err, text)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nSends keystrokes to a JavaScript prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\nAccepts the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nacceptAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\nDismisses the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndismissAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\nMove the mouse by an offset of the specificed element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmoveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\nMove to element, xoffset and y offset are optional.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\nClick any mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclick(button, cb) -&gt; cb(err)<br>\nClick on current element.<br>\nButtons: {left: 0, middle: 1 , right: 2}<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\nClick and hold the left mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonDown(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\nReleases the mouse button previously held (where the mouse is currently at).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonUp(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\nDouble-clicks at the current mouse coordinates (set by moveto).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ndoubleclick(cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.doubleClick(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/flick\">/session/:sessionId/touch/flick</a><br>\nFlick on the touch screen using finger motion events.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nflick(xSpeed, ySpeed, swipe, cb) -&gt; cb(err)<br>\nFlicks, starting anywhere on the screen.<br>\nflick(element, xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\nFlicks, starting at element center.<br>\n</p>\n<p>\nelement.flick(xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nSet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetLocalStorageKey(key, value, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nClear the storage.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclearLocalStorage(cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nGet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeEval() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nRemove the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nremoveLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nOpens a new window (using Javascript window.open):<br>\nnewWindow(url, name, cb) -&gt; cb(err)<br>\nnewWindow(url, cb) -&gt; cb(err)<br>\nname: optional window name<br>\nWindow can later be accessed by name with the window method,<br>\nor by getting the last handle returned by the windowHandles method.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowName(cb) -&gt; cb(err, name)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetHTTPInactivityTimeout(ms)<br>\nms: how many milliseconds to wait for any communication with the WebDriver server (i.e. any command to complete) before the connection is considered lost<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(element , cb) -&gt; cb(err, boolean)<br>\nisVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nRetrieves the pageIndex element (added for Appium):<br>\ngetPageIndex(element, cb) -&gt; cb(err, pageIndex)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nUploads a local file using undocumented<br>\nPOST /session/:sessionId/file<br>\nuploadFile(filepath, cb) -&gt; cb(err, filepath)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (polling within wd client):<br>\nwaitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (async script polling within browser):<br>\nwaitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEquivalent to the python sendKeys binding. Upload file if <br>\na local file is detected, otherwise behaves like type.<br>\nelement.sendKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n</tbody>\n</table>\n\n## JsonWireProtocol mapping\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Install the Selenium server and Chromedriver\n      node_modules/.bin/install_selenium\n      node_modules/.bin/install_chromedriver\n  - Run the selenium server with chromedriver:\n      node_modules/.bin/start_selenium_with_chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Monkey patching\n\nYou may want to monkey patch the webdriver class in order to add custom functionalities.\nThere is an example [here](https://github.com/admc/wd/blob/master/examples/example.monkey.patch.js).\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n<pre>\n  - make mapping > doc/jsonwire-mapping.md\n  - make full_mapping > doc/jsonwire-full-mapping.md\n  - make unsupported_mapping > doc/jsonwire-unsupported-mapping.md\n</pre>\n\nThe content of doc/jsonwire-mapping.md should then be manually integrated into\nREADME.md.\n\n## Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```javascript\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","readmeFilename":"README.md","_id":"wd@0.1.3","dist":{"shasum":"8da879c804c5857c04c4442834c19159b89c6de0","tarball":"http://registry.npmjs.org/wd/-/wd-0.1.3.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"jlipps","email":"jlipps@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.1.4":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.1.4","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.2.x","vargs":"~0.1.0","q":"0.9.x","request":"~2.21.0","archiver":"~0.4.6","lodash":"~1.3.1"},"devDependencies":{"mocha":"1.9.x","should":"1.2.x","nock":"~0.17.5","coffee-script":"1.6.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","dox":"0.4.x","mu2":"0.5.x","sv-selenium":"0.1.x","colors":"~0.6.0-1"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n  - Mailing List: https://groups.google.com/forum/#!forum/wdjs\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar wd = require('wd')\n  , assert = require('assert')\n  , colors = require('colors')\n  , browser = wd.remote();\n\nbrowser.on('status', function(info) {\n  console.log(info.cyan);\n});\n\nbrowser.on('command', function(meth, path, data) {\n  console.log(' > ' + meth.yellow, path.grey, data || '');\n});\n\nbrowser.init({\n    browserName:'chrome'\n    , tags : [\"examples\"]\n    , name: \"This is an example test\"\n  }, function() {\n\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, href) {\n            assert.ok(~href.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Browser initialization\n\n### Indexed parameters\n\n<pre>\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n</pre>\n\n### Named parameters\n\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module.\n\n<pre>\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n});\n</pre>\n\nThe following parameters may also be used (as in earlier versions):\n\n<pre>\nvar browser = wd.remote({\n  host: '127.0.0.1',\n  port: 4444,\n  username: 'username',\n  accessKey: 'password',\n});\n</pre>\n\n### Url string\n\n<pre>\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n</pre>\n\n### Url object created via `url.parse`\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n<pre>\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n</pre>\n\n### Defaults\n\n<pre>\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n</pre>\n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\n## Promises Api\n\nA promise api using [q](https://github.com/kriskowal/q) is\navailable. Code sample is\n[here](https://github.com/admc/wd/blob/master/examples/example.promise.chrome.js).\n\n## Generators Api\n\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\ngenerators in order to avoid nested callbacks, like so:\n\n```js\nwd.remote(function*() {\n  yield this.init(desiredCaps);\n  yield this.get(\"http://mysite.com\");\n  el = yield this.elementById(\"someId\");\n  yield el.click();\n  el2 = yield this.elementById(\"anotherThing\")\n  text = yield el2.text();\n  text.should.equal(\"What the text should be\");\n  yield this.quit();\n});\n```\n\n\n## Chain Api\n\nA chain api is also available. Code sample is [here](https://github.com/admc/wd/blob/master/examples/example.chain.chrome.js).\n\n### Injecting command to the chain\n\nAs [queue](https://github.com/caolan/async#queue) implementation that we're using has some limitations, a special helper method *next* was added. It allows you to inject new calls to the execution chain inside callbacks.\n\n#### Example 1 - the problem\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n    browser.clickElement(el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n#### Example 2 - solution, use *next*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // call to clickElement will be injected to the queue\n    // and will be executed sequentially after current function finishes\n    browser.next('clickElement', el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n### Inserting async code with *queueAddAsync*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n  })\n  .queueAddAsync( function(cb) {\n    // your code here\n    cb(null);\n  })\n  .clickElement(el, function() {\n    console.log(\"did the click!\");\n  })\n  // ...\n```\n\n## Supported Methods\n\n<table class=\"wikitable\">\n<tbody>\n<tr>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>JsonWireProtocol</strong>\n</td>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>wd</strong>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\nQuery the server's current status.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nstatus(cb) -&gt; cb(err, status)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\nCreate a new session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ninit(desired, cb) -&gt; cb(err, sessionID)<br>\nInitialize the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\nReturns a list of the currently active sessions.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsessions(cb) -&gt; cb(err, sessions)<br>\n</p>\n<p>\nAlternate strategy to get session capabilities from server session list:<br>\naltSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\nRetrieve the capabilities of the specified session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\nDelete the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nquit(cb) -&gt; cb(err)<br>\nDestroy the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\nConfigure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n(use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\nSet the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\nSet the amount of time the driver should wait when searching for elements.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\nRetrieve the current window handle.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandle(cb) -&gt; cb(err, handle)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\nRetrieve the list of all window handles available to the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nRetrieve the URL of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nurl(cb) -&gt; cb(err, url)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nNavigate to a new URL.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nget(url,cb) -&gt; cb(err)<br>\nGet a new url.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\nNavigate forwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nforward(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\nNavigate backwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nback(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\nRefresh the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrefresh(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecute(code, args, cb) -&gt; cb(err, result)<br>\nexecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute script within an eval block, always returning:<br>\nsafeExecute(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nEvaluate expression (using execute):<br>\neval(code, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nSafely evaluate expression, always returning  (using safeExecute):<br>\nsafeEval(code, cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nexecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute async script within an eval block, always returning:<br>\nsafeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\nTake a screenshot of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntakeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\nChange focus to another frame on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nframe(frameRef, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nChange focus to another window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindow(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nClose the current window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclose(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nChange the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nwindowSize(handle, width, height, cb) -&gt; cb(err)<br>\n</p>\n<p>\nsetWindowSize(width, height, handle, cb) -&gt; cb(err)<br>\nsetWindowSize(width, height, cb) -&gt; cb(err)<br>\nwidth: width in pixels to set size to<br>\nheight: height in pixels to set size to<br>\nhandle: window handle to set size for (optional, default: 'current')<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nGet the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowSize(handle, cb) -&gt; cb(err, size)<br>\ngetWindowSize(cb) -&gt; cb(err, size)<br>\nhandle: window handle to get size (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nChange the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetWindowPosition(x, y, handle, cb) -&gt; cb(err)<br>\nsetWindowPosition(x, y, cb) -&gt; cb(err)<br>\nx: the x-coordinate in pixels to set the window position<br>\ny: the y-coordinate in pixels to set the window position<br>\nhandle: window handle to set position for (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nGet the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowPosition(handle, cb) -&gt; cb(err, position)<br>\ngetWindowPosition(cb) -&gt; cb(err, position)<br>\nhandle: window handle to get position (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/maximize\">/session/:sessionId/window/:windowHandle/maximize</a><br>\nMaximize the specified window if not already maximized.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmaximize(handle, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nRetrieve all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nallCookies() -&gt; cb(err, cookies)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nSet a cookie.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetCookie(cookie, cb) -&gt; cb(err)<br>\ncookie example:<br>\n{name:'fruit', value:'apple'}<br>\nOptional cookie fields:<br>\npath, domain, secure, expiry<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nDelete all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteAllCookies(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\nDelete the cookie with the given name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteCookie(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/source\">/session/:sessionId/source</a><br>\nGet the current page source.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsource(cb) -&gt; cb(err, source)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\nGet the current page title.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntitle(cb) -&gt; cb(err, title)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\nSearch for an element on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassName(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelementById(value, cb) -&gt; cb(err, element)<br>\nelementByName(value, cb) -&gt; cb(err, element)<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByTagName(value, cb) -&gt; cb(err, element)<br>\nelementByXPath(value, cb) -&gt; cb(err, element)<br>\nelementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\nSearch for multiple elements on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelementsById(value, cb) -&gt; cb(err, elements)<br>\nelementsByName(value, cb) -&gt; cb(err, elements)<br>\nelementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning null instead:<br>\nelementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning undefined instead:<br>\nelementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nCheck if element exists:<br>\nhasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n</p>\n<p>\nhasElementByClassName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCssSelector(value, cb) -&gt; cb(err, boolean)<br>\nhasElementById(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByTagName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByXPath(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCss(value, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\nGet the element on the page that currently has focus.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nactive(cb) -&gt; cb(err, element)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/element\">/session/:sessionId/element/:id/element</a><br>\nSearch for an element on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.element(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelement.elementByClassName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelement.elementById(value, cb) -&gt; cb(err, element)<br>\nelement.elementByName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByTagName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByXPath(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/elements\">/session/:sessionId/element/:id/elements</a><br>\nSearch for multiple elements on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.elements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelement.elementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsById(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\nClick on an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclickElement(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.click(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/submit\">/session/:sessionId/element/:id/submit</a><br>\nSubmit a FORM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsubmit(element, cb) -&gt; cb(err)<br>\nSubmit a `FORM` element.<br>\n</p>\n<p>\nelement.submit(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\nReturns the visible text for the element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntext(element, cb) -&gt; cb(err, text)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.text(cb) -&gt; cb(err, text)<br>\n</p>\n<p>\nCheck if text is present:<br>\ntextPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\nSend a sequence of key strokes to an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntype(element, keys, cb) -&gt; cb(err)<br>\nType keys (all keys are up at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</p>\n<p>\nelement.type(keys, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\nSend a sequence of key strokes to the active element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nkeys(keys, cb) -&gt; cb(err)<br>\nPress keys (keys may still be down at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\nQuery for an element's tag name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetTagName(element, cb) -&gt; cb(err, name)<br>\n</p>\n<p>\nelement.getTagName(cb) -&gt; cb(err, name)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\nClear a TEXTAREA or text INPUT element's value.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclear(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.clear(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/selected\">/session/:sessionId/element/:id/selected</a><br>\nDetermine if an OPTION element, or an INPUT element of type checkbox or radiobutton is currently selected.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisSelected(element, cb) -&gt; cb(err, selected)<br>\n</p>\n<p>\nelement.isSelected(cb) -&gt; cb(err, selected)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/enabled\">/session/:sessionId/element/:id/enabled</a><br>\nDetermine if an element is currently enabled.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisEnabled(element, cb) -&gt; cb(err, enabled)<br>\n</p>\n<p>\nelement.isEnabled(cb) -&gt; cb(err, enabled)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\nGet the value of an element's attribute.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nGet element value (in value attribute):<br>\ngetValue(element, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getValue(cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/equals/:other\">/session/:sessionId/element/:id/equals/:other</a><br>\nTest if two element IDs refer to the same DOM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.equals(other, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nequalsElement(element, other , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\nDetermine if an element is currently displayed.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n</p>\n<p>\nelement.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location\">/session/:sessionId/element/:id/location</a><br>\nDetermine an element's location on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetLocation(element, cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocation(cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocationInView(cb) -&gt; cb(err, location)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location_in_view\">/session/:sessionId/element/:id/location_in_view</a><br>\nDetermine an element's location on the screen once it has been scrolled into view.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocationInView(element, cb) -&gt; cb(err, location)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size\">/session/:sessionId/element/:id/size</a><br>\nDetermine an element's size in pixels.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetSize(element, cb) -&gt; cb(err, size)<br>\n</p>\n<p>\nelement.getSize(cb) -&gt; cb(err, size)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\nQuery the value of an element's computed CSS property.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nGet the current browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nSet the browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nGets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertText(cb) -&gt; cb(err, text)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nSends keystrokes to a JavaScript prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\nAccepts the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nacceptAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\nDismisses the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndismissAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\nMove the mouse by an offset of the specificed element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmoveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\nMove to element, xoffset and y offset are optional.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\nClick any mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclick(button, cb) -&gt; cb(err)<br>\nClick on current element.<br>\nButtons: {left: 0, middle: 1 , right: 2}<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\nClick and hold the left mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonDown(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\nReleases the mouse button previously held (where the mouse is currently at).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonUp(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\nDouble-clicks at the current mouse coordinates (set by moveto).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ndoubleclick(cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.doubleClick(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/flick\">/session/:sessionId/touch/flick</a><br>\nFlick on the touch screen using finger motion events.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nflick(xSpeed, ySpeed, swipe, cb) -&gt; cb(err)<br>\nFlicks, starting anywhere on the screen.<br>\nflick(element, xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\nFlicks, starting at element center.<br>\n</p>\n<p>\nelement.flick(xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nSet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetLocalStorageKey(key, value, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nClear the storage.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclearLocalStorage(cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nGet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeEval() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nRemove the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nremoveLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nOpens a new window (using Javascript window.open):<br>\nnewWindow(url, name, cb) -&gt; cb(err)<br>\nnewWindow(url, cb) -&gt; cb(err)<br>\nname: optional window name<br>\nWindow can later be accessed by name with the window method,<br>\nor by getting the last handle returned by the windowHandles method.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowName(cb) -&gt; cb(err, name)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetHTTPInactivityTimeout(ms)<br>\nms: how many milliseconds to wait for any communication with the WebDriver server (i.e. any command to complete) before the connection is considered lost<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(element , cb) -&gt; cb(err, boolean)<br>\nisVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nRetrieves the pageIndex element (added for Appium):<br>\ngetPageIndex(element, cb) -&gt; cb(err, pageIndex)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nUploads a local file using undocumented<br>\nPOST /session/:sessionId/file<br>\nuploadFile(filepath, cb) -&gt; cb(err, filepath)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (polling within wd client):<br>\nwaitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (async script polling within browser):<br>\nwaitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEquivalent to the python sendKeys binding. Upload file if <br>\na local file is detected, otherwise behaves like type.<br>\nelement.sendKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n</tbody>\n</table>\n\n## JsonWireProtocol mapping\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Install the Selenium server and Chromedriver\n      node_modules/.bin/install_selenium\n      node_modules/.bin/install_chromedriver\n  - Run the selenium server with chromedriver:\n      node_modules/.bin/start_selenium_with_chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Monkey patching\n\nYou may want to monkey patch the webdriver class in order to add custom functionalities.\nThere is an example [here](https://github.com/admc/wd/blob/master/examples/example.monkey.patch.js).\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n<pre>\n  - make mapping > doc/jsonwire-mapping.md\n  - make full_mapping > doc/jsonwire-full-mapping.md\n  - make unsupported_mapping > doc/jsonwire-unsupported-mapping.md\n</pre>\n\nThe content of doc/jsonwire-mapping.md should then be manually integrated into\nREADME.md.\n\n## Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```javascript\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","readmeFilename":"README.md","_id":"wd@0.1.4","dist":{"shasum":"5adcf7265153edbf46abccb3e82de4c8696a344f","tarball":"http://registry.npmjs.org/wd/-/wd-0.1.4.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"jlipps","email":"jlipps@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.1.5":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.1.5","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"licenses":[{"type":"Apache","url":"http://www.apache.org/licenses/LICENSE-2.0.html"}],"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.2.x","vargs":"~0.1.0","q":"0.9.x","request":"~2.21.0","archiver":"~0.4.6","lodash":"~1.3.1"},"devDependencies":{"mocha":"1.9.x","should":"1.2.x","nock":"~0.17.5","coffee-script":"1.6.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","dox":"0.4.x","mu2":"0.5.x","sv-selenium":"0.1.x","colors":"~0.6.0-1"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n  - Mailing List: https://groups.google.com/forum/#!forum/wdjs\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar wd = require('wd')\n  , assert = require('assert')\n  , colors = require('colors')\n  , browser = wd.remote();\n\nbrowser.on('status', function(info) {\n  console.log(info.cyan);\n});\n\nbrowser.on('command', function(meth, path, data) {\n  console.log(' > ' + meth.yellow, path.grey, data || '');\n});\n\nbrowser.init({\n    browserName:'chrome'\n    , tags : [\"examples\"]\n    , name: \"This is an example test\"\n  }, function() {\n\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, href) {\n            assert.ok(~href.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n</pre>\n\n## Browser initialization\n\n### Indexed parameters\n\n<pre>\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n</pre>\n\n### Named parameters\n\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module.\n\n<pre>\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n});\n</pre>\n\nThe following parameters may also be used (as in earlier versions):\n\n<pre>\nvar browser = wd.remote({\n  host: '127.0.0.1',\n  port: 4444,\n  username: 'username',\n  accessKey: 'password',\n});\n</pre>\n\n### Url string\n\n<pre>\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n</pre>\n\n### Url object created via `url.parse`\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n<pre>\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n</pre>\n\n### Defaults\n\n<pre>\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n</pre>\n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\n## Promises Api\n\nA promise api using [q](https://github.com/kriskowal/q) is\navailable. Code sample is\n[here](https://github.com/admc/wd/blob/master/examples/example.promise.chrome.js).\n\n## Generators Api\n\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\ngenerators in order to avoid nested callbacks, like so:\n\n```js\nwd.remote(function*() {\n  yield this.init(desiredCaps);\n  yield this.get(\"http://mysite.com\");\n  el = yield this.elementById(\"someId\");\n  yield el.click();\n  el2 = yield this.elementById(\"anotherThing\")\n  text = yield el2.text();\n  text.should.equal(\"What the text should be\");\n  yield this.quit();\n});\n```\n\n\n## Chain Api\n\nA chain api is also available. Code sample is [here](https://github.com/admc/wd/blob/master/examples/example.chain.chrome.js).\n\n### Injecting command to the chain\n\nAs [queue](https://github.com/caolan/async#queue) implementation that we're using has some limitations, a special helper method *next* was added. It allows you to inject new calls to the execution chain inside callbacks.\n\n#### Example 1 - the problem\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n    browser.clickElement(el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n#### Example 2 - solution, use *next*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // call to clickElement will be injected to the queue\n    // and will be executed sequentially after current function finishes\n    browser.next('clickElement', el, function() {\n      console.log(\"did the click!\");\n    });\n  })\n  // ...\n```\n\n### Inserting async code with *queueAddAsync*\n\n```javascript\nbrowser\n  .chain()\n  // ...\n  .elementById('i am a link', function(err, el) {\n    // following call will be executed apart from the current execution chain\n    // you won't be able to pass results further in chain\n    // and it may cause racing conditions in your script\n  })\n  .queueAddAsync( function(cb) {\n    // your code here\n    cb(null);\n  })\n  .clickElement(el, function() {\n    console.log(\"did the click!\");\n  })\n  // ...\n```\n\n## Supported Methods\n\n<table class=\"wikitable\">\n<tbody>\n<tr>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>JsonWireProtocol</strong>\n</td>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>wd</strong>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\nQuery the server's current status.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nstatus(cb) -&gt; cb(err, status)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\nCreate a new session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ninit(desired, cb) -&gt; cb(err, sessionID, capabilities)<br>\nInitialize the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\nReturns a list of the currently active sessions.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsessions(cb) -&gt; cb(err, sessions)<br>\n</p>\n<p>\nAlternate strategy to get session capabilities from server session list:<br>\naltSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\nRetrieve the capabilities of the specified session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\nDelete the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nquit(cb) -&gt; cb(err)<br>\nDestroy the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\nConfigure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n(use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\nSet the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\nSet the amount of time the driver should wait when searching for elements.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\nRetrieve the current window handle.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandle(cb) -&gt; cb(err, handle)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\nRetrieve the list of all window handles available to the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nRetrieve the URL of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nurl(cb) -&gt; cb(err, url)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nNavigate to a new URL.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nget(url,cb) -&gt; cb(err)<br>\nGet a new url.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\nNavigate forwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nforward(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\nNavigate backwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nback(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\nRefresh the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrefresh(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecute(code, args, cb) -&gt; cb(err, result)<br>\nexecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute script within an eval block, always returning:<br>\nsafeExecute(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nEvaluate expression (using execute):<br>\neval(code, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nSafely evaluate expression, always returning  (using safeExecute):<br>\nsafeEval(code, cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nexecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute async script within an eval block, always returning:<br>\nsafeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\nTake a screenshot of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntakeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\nChange focus to another frame on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nframe(frameRef, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nChange focus to another window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindow(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nClose the current window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclose(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nChange the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nwindowSize(handle, width, height, cb) -&gt; cb(err)<br>\n</p>\n<p>\nsetWindowSize(width, height, handle, cb) -&gt; cb(err)<br>\nsetWindowSize(width, height, cb) -&gt; cb(err)<br>\nwidth: width in pixels to set size to<br>\nheight: height in pixels to set size to<br>\nhandle: window handle to set size for (optional, default: 'current')<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nGet the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowSize(handle, cb) -&gt; cb(err, size)<br>\ngetWindowSize(cb) -&gt; cb(err, size)<br>\nhandle: window handle to get size (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nChange the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetWindowPosition(x, y, handle, cb) -&gt; cb(err)<br>\nsetWindowPosition(x, y, cb) -&gt; cb(err)<br>\nx: the x-coordinate in pixels to set the window position<br>\ny: the y-coordinate in pixels to set the window position<br>\nhandle: window handle to set position for (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nGet the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowPosition(handle, cb) -&gt; cb(err, position)<br>\ngetWindowPosition(cb) -&gt; cb(err, position)<br>\nhandle: window handle to get position (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/maximize\">/session/:sessionId/window/:windowHandle/maximize</a><br>\nMaximize the specified window if not already maximized.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmaximize(handle, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nRetrieve all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nallCookies() -&gt; cb(err, cookies)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nSet a cookie.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetCookie(cookie, cb) -&gt; cb(err)<br>\ncookie example:<br>\n{name:'fruit', value:'apple'}<br>\nOptional cookie fields:<br>\npath, domain, secure, expiry<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nDelete all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteAllCookies(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\nDelete the cookie with the given name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteCookie(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/source\">/session/:sessionId/source</a><br>\nGet the current page source.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsource(cb) -&gt; cb(err, source)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\nGet the current page title.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntitle(cb) -&gt; cb(err, title)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\nSearch for an element on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassName(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelementById(value, cb) -&gt; cb(err, element)<br>\nelementByName(value, cb) -&gt; cb(err, element)<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByTagName(value, cb) -&gt; cb(err, element)<br>\nelementByXPath(value, cb) -&gt; cb(err, element)<br>\nelementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\nSearch for multiple elements on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelementsById(value, cb) -&gt; cb(err, elements)<br>\nelementsByName(value, cb) -&gt; cb(err, elements)<br>\nelementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning null instead:<br>\nelementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning undefined instead:<br>\nelementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nCheck if element exists:<br>\nhasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n</p>\n<p>\nhasElementByClassName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCssSelector(value, cb) -&gt; cb(err, boolean)<br>\nhasElementById(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByTagName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByXPath(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCss(value, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\nGet the element on the page that currently has focus.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nactive(cb) -&gt; cb(err, element)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/element\">/session/:sessionId/element/:id/element</a><br>\nSearch for an element on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.element(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelement.elementByClassName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelement.elementById(value, cb) -&gt; cb(err, element)<br>\nelement.elementByName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByTagName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByXPath(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/elements\">/session/:sessionId/element/:id/elements</a><br>\nSearch for multiple elements on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.elements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelement.elementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsById(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\nClick on an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclickElement(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.click(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/submit\">/session/:sessionId/element/:id/submit</a><br>\nSubmit a FORM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsubmit(element, cb) -&gt; cb(err)<br>\nSubmit a `FORM` element.<br>\n</p>\n<p>\nelement.submit(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\nReturns the visible text for the element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntext(element, cb) -&gt; cb(err, text)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.text(cb) -&gt; cb(err, text)<br>\n</p>\n<p>\nCheck if text is present:<br>\ntextPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\nSend a sequence of key strokes to an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntype(element, keys, cb) -&gt; cb(err)<br>\nType keys (all keys are up at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</p>\n<p>\nelement.type(keys, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\nSend a sequence of key strokes to the active element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nkeys(keys, cb) -&gt; cb(err)<br>\nPress keys (keys may still be down at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\nQuery for an element's tag name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetTagName(element, cb) -&gt; cb(err, name)<br>\n</p>\n<p>\nelement.getTagName(cb) -&gt; cb(err, name)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\nClear a TEXTAREA or text INPUT element's value.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclear(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.clear(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/selected\">/session/:sessionId/element/:id/selected</a><br>\nDetermine if an OPTION element, or an INPUT element of type checkbox or radiobutton is currently selected.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisSelected(element, cb) -&gt; cb(err, selected)<br>\n</p>\n<p>\nelement.isSelected(cb) -&gt; cb(err, selected)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/enabled\">/session/:sessionId/element/:id/enabled</a><br>\nDetermine if an element is currently enabled.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisEnabled(element, cb) -&gt; cb(err, enabled)<br>\n</p>\n<p>\nelement.isEnabled(cb) -&gt; cb(err, enabled)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\nGet the value of an element's attribute.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nGet element value (in value attribute):<br>\ngetValue(element, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getValue(cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/equals/:other\">/session/:sessionId/element/:id/equals/:other</a><br>\nTest if two element IDs refer to the same DOM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.equals(other, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nequalsElement(element, other , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\nDetermine if an element is currently displayed.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n</p>\n<p>\nelement.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location\">/session/:sessionId/element/:id/location</a><br>\nDetermine an element's location on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetLocation(element, cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocation(cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocationInView(cb) -&gt; cb(err, location)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location_in_view\">/session/:sessionId/element/:id/location_in_view</a><br>\nDetermine an element's location on the screen once it has been scrolled into view.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocationInView(element, cb) -&gt; cb(err, location)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size\">/session/:sessionId/element/:id/size</a><br>\nDetermine an element's size in pixels.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetSize(element, cb) -&gt; cb(err, size)<br>\n</p>\n<p>\nelement.getSize(cb) -&gt; cb(err, size)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\nQuery the value of an element's computed CSS property.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nGet the current browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nSet the browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nGets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertText(cb) -&gt; cb(err, text)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nSends keystrokes to a JavaScript prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\nAccepts the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nacceptAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\nDismisses the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndismissAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\nMove the mouse by an offset of the specificed element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmoveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\nMove to element, xoffset and y offset are optional.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\nClick any mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclick(button, cb) -&gt; cb(err)<br>\nClick on current element.<br>\nButtons: {left: 0, middle: 1 , right: 2}<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\nClick and hold the left mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonDown(button ,cb) -&gt; cb(err)<br>\nbutton is optional.<br>\n{LEFT = 0, MIDDLE = 1 , RIGHT = 2}.<br>\nLEFT if not specified.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\nReleases the mouse button previously held (where the mouse is currently at).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonUp(button, cb) -&gt; cb(err)<br>\nbutton is optional.<br>\n{LEFT = 0, MIDDLE = 1 , RIGHT = 2}.<br>\nLEFT if not specified.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\nDouble-clicks at the current mouse coordinates (set by moveto).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ndoubleclick(cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.doubleClick(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/click\">/session/:sessionId/touch/click</a><br>\nSingle tap on the touch enabled device.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntap(element) -&gt; cb(err)<br>\nTaps element<br>\n</p>\n<p>\nelement.tap(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/flick\">/session/:sessionId/touch/flick</a><br>\nFlick on the touch screen using finger motion events.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nflick(xSpeed, ySpeed, swipe, cb) -&gt; cb(err)<br>\nFlicks, starting anywhere on the screen.<br>\nflick(element, xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\nFlicks, starting at element center.<br>\n</p>\n<p>\nelement.flick(xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nSet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetLocalStorageKey(key, value, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nClear the storage.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclearLocalStorage(cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nGet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeEval() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nRemove the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nremoveLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/log\">/session/:sessionId/log</a><br>\nGet the log for a given log type.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nlog(logType, cb) -&gt; cb(err, arrayOfLogs)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/log/types\">/session/:sessionId/log/types</a><br>\nGet available log types.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nlogTypes(cb) -&gt; cb(err, arrayOfLogTypes)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nOpens a new window (using Javascript window.open):<br>\nnewWindow(url, name, cb) -&gt; cb(err)<br>\nnewWindow(url, cb) -&gt; cb(err)<br>\nname: optional window name<br>\nWindow can later be accessed by name with the window method,<br>\nor by getting the last handle returned by the windowHandles method.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowName(cb) -&gt; cb(err, name)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetHTTPInactivityTimeout(ms)<br>\nms: how many milliseconds to wait for any communication with the WebDriver server (i.e. any command to complete) before the connection is considered lost<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(element , cb) -&gt; cb(err, boolean)<br>\nisVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nRetrieves the pageIndex element (added for Appium):<br>\ngetPageIndex(element, cb) -&gt; cb(err, pageIndex)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nUploads a local file using undocumented<br>\nPOST /session/:sessionId/file<br>\nuploadFile(filepath, cb) -&gt; cb(err, filepath)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (polling within wd client):<br>\nwaitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (async script polling within browser):<br>\nwaitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEquivalent to the python sendKeys binding. Upload file if<br>\na local file is detected, otherwise behaves like type.<br>\nelement.sendKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n</tbody>\n</table>\n\n## JsonWireProtocol mapping\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Install the Selenium server and Chromedriver\n      node_modules/.bin/install_selenium\n      node_modules/.bin/install_chromedriver\n  - Run the selenium server with chromedriver:\n      node_modules/.bin/start_selenium_with_chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Monkey patching\n\nYou may want to monkey patch the webdriver class in order to add custom functionalities.\nThere is an example [here](https://github.com/admc/wd/blob/master/examples/example.monkey.patch.js).\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n<pre>\n  - make mapping > doc/jsonwire-mapping.md\n  - make full_mapping > doc/jsonwire-full-mapping.md\n  - make unsupported_mapping > doc/jsonwire-unsupported-mapping.md\n</pre>\n\nThe content of doc/jsonwire-mapping.md should then be manually integrated into\nREADME.md.\n\n## Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```javascript\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","readmeFilename":"README.md","_id":"wd@0.1.5","dist":{"shasum":"c0a9c8fb5f62ed6628a6f6e1d1958f9316dadfec","tarball":"http://registry.npmjs.org/wd/-/wd-0.1.5.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"sebv","email":"seb.vincent@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.2.0":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.2.0","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"licenses":[{"type":"Apache","url":"http://www.apache.org/licenses/LICENSE-2.0.html"}],"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"0.2.x","vargs":"~0.1.0","q":"0.9.x","request":"~2.21.0","archiver":"~0.4.6","lodash":"~1.3.1"},"devDependencies":{"mocha":"1.9.x","should":"1.2.x","nock":"~0.17.5","coffee-script":"1.6.x","express":"3.x","imageinfo":"1.0.x","covershot":"0.1.x","dox":"0.4.x","mu2":"0.5.x","sv-selenium":"0.1.x","colors":"~0.6.0-1","chai-as-promised":"~3.3.1","chai":"~1.7.2","mocha-as-promised":"~1.4.0"},"scripts":{"test":"make test_saucelabs"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n  - Mailing List: https://groups.google.com/forum/#!forum/wdjs\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n```\nnpm install wd\n```\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## 0.2.0 Release\n\nThis release contain the following major changes:\n\n- New wrapper: promise chain.\n- Old chain api is deprecated (It is still available, but you will see a depreciation message).\n- There are some changes in the way the element and webdriver classes are passed around\nwhich may affect external wrappers. External wrappers should now subclass those 2 classes. \n\n## Usage\n\n### Q promises + chaining\n\n```js\nvar wd = require('wd'),\n  assert = require('assert'),\n  colors = require('colors'),\n  browser = wd.promiseChainRemote();\n\nbrowser.on('status', function(info) {\n  console.log(info.cyan);\n});\n\nbrowser.on('command', function(meth, path, data) {\n  console.log(' > ' + meth.yellow, path.grey, data || '');\n});\n\nbrowser.init({\n    browserName:'chrome',\n    tags : ['examples'],\n    name: 'This is an example test'\n  })\n  .get('http://admc.io/wd/test-pages/guinea-pig.html')\n  .title().then(function(title) {\n     assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n  })\n  .elementById('i am a link')\n  .click()\n  .eval(\"window.location.href\").then(function(href) {\n    assert.ok(~href.indexOf('guinea-pig2'));\n  })\n  .catch(function(err) {\n    console.log(err);\n  })\n  .sleep(3000)\n  .quit();\n```\n\n### Pure async\n```js\nvar wd = require('wd'),\n  assert = require('assert'),\n  colors = require('colors'),\n  browser = wd.remote();\n\nbrowser.on('status', function(info) {\n  console.log(info.cyan);\n});\n\nbrowser.on('command', function(meth, path, data) {\n  console.log(' > ' + meth.yellow, path.grey, data || '');\n});\n\nbrowser.init({\n    browserName:'chrome'\n    , tags : ['examples']\n    , name: 'This is an example test'\n  }, function() {\n\n  browser.get('http://admc.io/wd/test-pages/guinea-pig.html', function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval('window.location.href', function(err, href) {\n            assert.ok(~href.indexOf('guinea-pig2'));\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n```\n\n### Q promises without chaining\n\nSee example [here](https://github.com/admc/wd/blob/master/examples/example.promise-no-chain.chrome.js).\n\n## Generators Api\n\n### Yiewd\n\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\ngenerators in order to avoid nested callbacks, like so:\n\n```js\nwd.remote(function*() {\n  yield this.init(desiredCaps);\n  yield this.get(\"http://mysite.com\");\n  el = yield this.elementById(\"someId\");\n  yield el.click();\n  el2 = yield this.elementById(\"anotherThing\")\n  text = yield el2.text();\n  text.should.equal(\"What the text should be\");\n  yield this.quit();\n});\n```\n\n## Repl\n\n```\n./node_modules/.bin/wd shell\n```\n\n```\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n```\n\n## Browser initialization\n\n### Indexed parameters\n\n```js\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n```\n### Named parameters\n\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module.\n\n```js\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n});\n```\n\nThe following parameters may also be used (as in earlier versions):\n\n```js\nvar browser = wd.remote({\n  host: '127.0.0.1',\n  port: 4444,\n  username: 'username',\n  accessKey: 'password',\n});\n```\n### Url string\n\n```js\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n```\n\n### Url object created via `url.parse`\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n```js\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n```\n\n### Defaults\n\n```js\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n```\n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\n## Supported Methods\n\n<table class=\"wikitable\">\n<tbody>\n<tr>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>JsonWireProtocol</strong>\n</td>\n<td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n<strong>wd</strong>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\nQuery the server's current status.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nstatus(cb) -&gt; cb(err, status)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\nCreate a new session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ninit(desired, cb) -&gt; cb(err, sessionID, capabilities)<br>\nInitialize the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\nReturns a list of the currently active sessions.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsessions(cb) -&gt; cb(err, sessions)<br>\n</p>\n<p>\nAlternate strategy to get session capabilities from server session list:<br>\naltSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\nRetrieve the capabilities of the specified session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\nDelete the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nquit(cb) -&gt; cb(err)<br>\nDestroy the browser.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\nConfigure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n(use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\nSet the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\nSet the amount of time the driver should wait when searching for elements.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\nRetrieve the current window handle.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandle(cb) -&gt; cb(err, handle)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\nRetrieve the list of all window handles available to the session.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nRetrieve the URL of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nurl(cb) -&gt; cb(err, url)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\nNavigate to a new URL.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nget(url,cb) -&gt; cb(err)<br>\nGet a new url.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\nNavigate forwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nforward(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\nNavigate backwards in the browser history, if possible.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nback(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\nRefresh the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nrefresh(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecute(code, args, cb) -&gt; cb(err, result)<br>\nexecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute script within an eval block, always returning:<br>\nsafeExecute(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecute(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nEvaluate expression (using execute):<br>\neval(code, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nSafely evaluate expression, always returning  (using safeExecute):<br>\nsafeEval(code, cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nexecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nexecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n<p>\nSafely execute async script within an eval block, always returning:<br>\nsafeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\nsafeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\nargs: script argument array (optional)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\nTake a screenshot of the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntakeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\nChange focus to another frame on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nframe(frameRef, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nChange focus to another window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindow(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\nClose the current window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclose(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nChange the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nwindowSize(handle, width, height, cb) -&gt; cb(err)<br>\n</p>\n<p>\nsetWindowSize(width, height, handle, cb) -&gt; cb(err)<br>\nsetWindowSize(width, height, cb) -&gt; cb(err)<br>\nwidth: width in pixels to set size to<br>\nheight: height in pixels to set size to<br>\nhandle: window handle to set size for (optional, default: 'current')<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/size\">/session/:sessionId/window/:windowHandle/size</a><br>\nGet the size of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowSize(handle, cb) -&gt; cb(err, size)<br>\ngetWindowSize(cb) -&gt; cb(err, size)<br>\nhandle: window handle to get size (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nChange the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetWindowPosition(x, y, handle, cb) -&gt; cb(err)<br>\nsetWindowPosition(x, y, cb) -&gt; cb(err)<br>\nx: the x-coordinate in pixels to set the window position<br>\ny: the y-coordinate in pixels to set the window position<br>\nhandle: window handle to set position for (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window/:windowHandle/position\">/session/:sessionId/window/:windowHandle/position</a><br>\nGet the position of the specified window.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetWindowPosition(handle, cb) -&gt; cb(err, position)<br>\ngetWindowPosition(cb) -&gt; cb(err, position)<br>\nhandle: window handle to get position (optional, default: 'current')<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window/:windowHandle/maximize\">/session/:sessionId/window/:windowHandle/maximize</a><br>\nMaximize the specified window if not already maximized.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmaximize(handle, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nRetrieve all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nallCookies() -&gt; cb(err, cookies)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nSet a cookie.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetCookie(cookie, cb) -&gt; cb(err)<br>\ncookie example:<br>\n{name:'fruit', value:'apple'}<br>\nOptional cookie fields:<br>\npath, domain, secure, expiry<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\nDelete all cookies visible to the current page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteAllCookies(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\nDelete the cookie with the given name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndeleteCookie(name, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/source\">/session/:sessionId/source</a><br>\nGet the current page source.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsource(cb) -&gt; cb(err, source)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\nGet the current page title.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ntitle(cb) -&gt; cb(err, title)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\nSearch for an element on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassName(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelementById(value, cb) -&gt; cb(err, element)<br>\nelementByName(value, cb) -&gt; cb(err, element)<br>\nelementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelementByTagName(value, cb) -&gt; cb(err, element)<br>\nelementByXPath(value, cb) -&gt; cb(err, element)<br>\nelementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\nSearch for multiple elements on the page, starting from the document root.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelementsById(value, cb) -&gt; cb(err, elements)<br>\nelementsByName(value, cb) -&gt; cb(err, elements)<br>\nelementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning null instead:<br>\nelementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\nelementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nRetrieve an element avoiding not found exception and returning undefined instead:<br>\nelementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\nelementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nCheck if element exists:<br>\nhasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n</p>\n<p>\nhasElementByClassName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCssSelector(value, cb) -&gt; cb(err, boolean)<br>\nhasElementById(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByTagName(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByXPath(value, cb) -&gt; cb(err, boolean)<br>\nhasElementByCss(value, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\nGet the element on the page that currently has focus.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nactive(cb) -&gt; cb(err, element)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/element\">/session/:sessionId/element/:id/element</a><br>\nSearch for an element on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.element(using, value, cb) -&gt; cb(err, element)<br>\n</p>\n<p>\nelement.elementByClassName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\nelement.elementById(value, cb) -&gt; cb(err, element)<br>\nelement.elementByName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\nelement.elementByTagName(value, cb) -&gt; cb(err, element)<br>\nelement.elementByXPath(value, cb) -&gt; cb(err, element)<br>\nelement.elementByCss(value, cb) -&gt; cb(err, element)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/elements\">/session/:sessionId/element/:id/elements</a><br>\nSearch for multiple elements on the page, starting from the identified element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.elements(using, value, cb) -&gt; cb(err, elements)<br>\n</p>\n<p>\nelement.elementsByClassName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCssSelector(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsById(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByTagName(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByXPath(value, cb) -&gt; cb(err, elements)<br>\nelement.elementsByCss(value, cb) -&gt; cb(err, elements)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\nClick on an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclickElement(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.click(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/submit\">/session/:sessionId/element/:id/submit</a><br>\nSubmit a FORM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nsubmit(element, cb) -&gt; cb(err)<br>\nSubmit a `FORM` element.<br>\n</p>\n<p>\nelement.submit(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\nReturns the visible text for the element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntext(element, cb) -&gt; cb(err, text)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.text(cb) -&gt; cb(err, text)<br>\n</p>\n<p>\nCheck if text is present:<br>\ntextPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\nelement: specific element, 'body', or undefined<br>\n</p>\n<p>\nelement.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\nSend a sequence of key strokes to an element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntype(element, keys, cb) -&gt; cb(err)<br>\nType keys (all keys are up at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</p>\n<p>\nelement.type(keys, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\nSend a sequence of key strokes to the active element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nkeys(keys, cb) -&gt; cb(err)<br>\nPress keys (keys may still be down at the end of command).<br>\nspecial key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\nQuery for an element's tag name.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetTagName(element, cb) -&gt; cb(err, name)<br>\n</p>\n<p>\nelement.getTagName(cb) -&gt; cb(err, name)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\nClear a TEXTAREA or text INPUT element's value.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nclear(element, cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.clear(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/selected\">/session/:sessionId/element/:id/selected</a><br>\nDetermine if an OPTION element, or an INPUT element of type checkbox or radiobutton is currently selected.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisSelected(element, cb) -&gt; cb(err, selected)<br>\n</p>\n<p>\nelement.isSelected(cb) -&gt; cb(err, selected)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/enabled\">/session/:sessionId/element/:id/enabled</a><br>\nDetermine if an element is currently enabled.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisEnabled(element, cb) -&gt; cb(err, enabled)<br>\n</p>\n<p>\nelement.isEnabled(cb) -&gt; cb(err, enabled)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\nGet the value of an element's attribute.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nGet element value (in value attribute):<br>\ngetValue(element, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getValue(cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/equals/:other\">/session/:sessionId/element/:id/equals/:other</a><br>\nTest if two element IDs refer to the same DOM element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nelement.equals(other, cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nequalsElement(element, other , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\nDetermine if an element is currently displayed.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nisDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n</p>\n<p>\nelement.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location\">/session/:sessionId/element/:id/location</a><br>\nDetermine an element's location on the page.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetLocation(element, cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocation(cb) -&gt; cb(err, location)<br>\n</p>\n<p>\nelement.getLocationInView(cb) -&gt; cb(err, location)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location_in_view\">/session/:sessionId/element/:id/location_in_view</a><br>\nDetermine an element's location on the screen once it has been scrolled into view.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocationInView(element, cb) -&gt; cb(err, location)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size\">/session/:sessionId/element/:id/size</a><br>\nDetermine an element's size in pixels.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetSize(element, cb) -&gt; cb(err, size)<br>\n</p>\n<p>\nelement.getSize(cb) -&gt; cb(err, size)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\nQuery the value of an element's computed CSS property.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ngetComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n<p>\nelement.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nGet the current browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/orientation\">/session/:sessionId/orientation</a><br>\nSet the browser orientation.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetOrientation(cb) -&gt; cb(err, orientation)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nGets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertText(cb) -&gt; cb(err, text)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/alert_text\">/session/:sessionId/alert_text</a><br>\nSends keystrokes to a JavaScript prompt() dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nalertKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\nAccepts the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nacceptAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\nDismisses the currently displayed alert dialog.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ndismissAlert(cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\nMove the mouse by an offset of the specificed element.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nmoveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\nMove to element, xoffset and y offset are optional.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\nClick any mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclick(button, cb) -&gt; cb(err)<br>\nClick on current element.<br>\nButtons: {left: 0, middle: 1 , right: 2}<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\nClick and hold the left mouse button (at the coordinates set by the last moveto command).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonDown(button ,cb) -&gt; cb(err)<br>\nbutton is optional.<br>\n{LEFT = 0, MIDDLE = 1 , RIGHT = 2}.<br>\nLEFT if not specified.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\nReleases the mouse button previously held (where the mouse is currently at).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nbuttonUp(button, cb) -&gt; cb(err)<br>\nbutton is optional.<br>\n{LEFT = 0, MIDDLE = 1 , RIGHT = 2}.<br>\nLEFT if not specified.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\nDouble-clicks at the current mouse coordinates (set by moveto).\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ndoubleclick(cb) -&gt; cb(err)<br>\n</p>\n<p>\nelement.doubleClick(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/click\">/session/:sessionId/touch/click</a><br>\nSingle tap on the touch enabled device.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\ntap(element) -&gt; cb(err)<br>\nTaps element<br>\n</p>\n<p>\nelement.tap(cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/touch/flick\">/session/:sessionId/touch/flick</a><br>\nFlick on the touch screen using finger motion events.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\n<p>\nflick(xSpeed, ySpeed, swipe, cb) -&gt; cb(err)<br>\nFlicks, starting anywhere on the screen.<br>\nflick(element, xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\nFlicks, starting at element center.<br>\n</p>\n<p>\nelement.flick(xoffset, yoffset, speed, cb) -&gt; cb(err)<br>\n</p>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nSet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetLocalStorageKey(key, value, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage\">/session/:sessionId/local_storage</a><br>\nClear the storage.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nclearLocalStorage(cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nGet the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\ngetLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeEval() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nDELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/local_storage/key/:key\">/session/:sessionId/local_storage/key/:key</a><br>\nRemove the storage item for the given key.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nremoveLocalStorageKey(key, cb) -&gt; cb(err)<br>\n# uses safeExecute() due to localStorage bug in Selenium<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nPOST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/log\">/session/:sessionId/log</a><br>\nGet the log for a given log type.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nlog(logType, cb) -&gt; cb(err, arrayOfLogs)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nGET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/log/types\">/session/:sessionId/log/types</a><br>\nGet available log types.\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nlogTypes(cb) -&gt; cb(err, arrayOfLogTypes)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nOpens a new window (using Javascript window.open):<br>\nnewWindow(url, name, cb) -&gt; cb(err)<br>\nnewWindow(url, cb) -&gt; cb(err)<br>\nname: optional window name<br>\nWindow can later be accessed by name with the window method,<br>\nor by getting the last handle returned by the windowHandles method.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwindowName(cb) -&gt; cb(err, name)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nsetHTTPInactivityTimeout(ms)<br>\nms: how many milliseconds to wait for any communication with the WebDriver server (i.e. any command to complete) before the connection is considered lost<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nwaitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\nwaitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(element , cb) -&gt; cb(err, boolean)<br>\nisVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nRetrieves the pageIndex element (added for Appium):<br>\ngetPageIndex(element, cb) -&gt; cb(err, pageIndex)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nUploads a local file using undocumented<br>\nPOST /session/:sessionId/file<br>\nuploadFile(filepath, cb) -&gt; cb(err, filepath)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (polling within wd client):<br>\nwaitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nWaits for JavaScript condition to be true (async script polling within browser):<br>\nwaitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\nwaitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\nconditionExpr: condition expression, should return a boolean<br>\ntimeout: timeout (optional, default: 1000)<br>\npollFreq: pooling frequency (optional, default: 100)<br>\nreturn true if condition satisfied, error otherwise.<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEquivalent to the python sendKeys binding. Upload file if<br>\na local file is detected, otherwise behaves like type.<br>\nelement.sendKeys(keys, cb) -&gt; cb(err)<br>\n</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nEXTRA\n</td>\n<td style=\"border: 1px solid #ccc; padding: 5px;\">\nisVisible(cb) -&gt; cb(err, boolean)<br>\n</td>\n</tr>\n</tbody>\n</table>\n\n## JsonWireProtocol mapping\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n## More docs!\n\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n\n## Run the tests!\n\n```\n# Install the Selenium server and Chromedriver\nnode_modules/.bin/install_selenium\nnode_modules/.bin/install_chromedriver\n\n#Run the selenium server with chromedriver:\nnode_modules/.bin/start_selenium_with_chromedriver\n\ncd wd\nnpm install\nmake test\n\n# look at the results!\n```\n\n## Run the tests on Sauce Labs cloud!\n```\ncd wd\nnpm install\nmake test_saucelabs\n```\n\n## Monkey patching\n\nYou may want to monkey patch the webdriver class in order to add custom functionalities.\nThere is an example [here](https://github.com/admc/wd/blob/master/examples/example.monkey.patch.js).\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n```\nmake mapping > doc/jsonwire-mapping.md\nmake full_mapping > doc/jsonwire-full-mapping.md\nmake unsupported_mapping > doc/jsonwire-unsupported-mapping.md\n```\n\nThe content of doc/jsonwire-mapping.md should then be manually integrated into\nREADME.md.\n\n## Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```js\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n","readmeFilename":"README.md","_id":"wd@0.2.0","dist":{"shasum":"0594e7997be3cbe08f0ec55a093bc50900915842","tarball":"http://registry.npmjs.org/wd/-/wd-0.2.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"sebv","email":"seb.vincent@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.2.2":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.2.2","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"licenses":[{"type":"Apache","url":"http://www.apache.org/licenses/LICENSE-2.0.html"}],"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"~0.2.9","vargs":"~0.1.0","q":"~0.9.7","request":"~2.21.0","archiver":"~0.4.10","lodash":"~1.3.1"},"devDependencies":{"mocha":"~1.13.0","nock":"~0.22.1","express":"~3.4.3","imageinfo":"~1.0.4","dox":"~0.4.4","mu2":"~0.5.19","sv-selenium":"~0.2.2","colors":"~0.6.2","chai-as-promised":"~4.1.0","chai":"~1.8.1","mocha-as-promised":"~1.4.0","hbs":"~2.4.0","istanbul":"~0.1.44","string":"~1.6.0"},"scripts":{"test":"make test","test_sauce":"make test_e2e_sauce"},"readme":"# WD.js -- WebDriver/Selenium 2 for node.js\n  - Mailing List: https://groups.google.com/forum/#!forum/wdjs\n\n## Status\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Install\n\n```\nnpm install wd\n```\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## 0.2.x Release\n\n### 0.2.0\n\n- New wrapper: promise chain.\n- Old chain api is deprecated (It is still available, but you will see a depreciation message).\n- There are some changes in the way the element and webdriver classes are passed around\nwhich may affect external wrappers. External wrappers should now subclass those 2 classes. \n\n### 0.2.1\n \n- New test suite using the promise chain api.\n- `browser.Q` was moved to `wd.Q`.\n\n### 0.2.2 \n\n- chai-as-promised v4 compatible.\n- Promise wrappers can now be monkey patched directly.\n- New saucelabs helpers.\n\nIncompatibilities: \n\n  - There is a new method to call, `wd.rewrap()`, to propagate async monkey \n  patching to promise. (see [here](https://github.com/admc/wd/blob/master/examples/promise/monkey.patch-with-async.js#L35) and the monkey patch section below)\n  - The chai-as-promised setup has changed in V4, look out for the `transferPromiseness` \n  line in the examples. (see [here](https://github.com/admc/wd/blob/master/examples/promise/chrome.js#L15))\n\n## Usage\n\n### Q promises + chaining\n\n```js\n...\n\nbrowser\n  .init({browserName:'chrome'})\n  .get(\"http://admc.io/wd/test-pages/guinea-pig.html\")\n  .title()\n    .should.become('WD Tests')\n  .elementById('i am a link')\n  .click()\n  .eval(\"window.location.href\")\n    .should.eventually.include('guinea-pig2')\n  .back()\n  .elementByCss('#comments').type('Bonjour!')\n  .getValue().should.become('Bonjour!')\n  .fin(function() { return browser.quit(); })\n  .done();\n```\n[full code here](https://github.com/admc/wd/blob/master/examples/promise/chrome.js)\n\n\n### Pure async\n\n```js\n...\n\nbrowser.init({browserName:'chrome'}, function() {\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      title.should.include('WD');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          /* jshint evil: true */\n          browser.eval(\"window.location.href\", function(err, href) {\n            href.should.include('guinea-pig2');\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n```\n[full code here](https://github.com/admc/wd/blob/master/examples/async/chrome.js)\n\n\n### Q promises without chaining\n\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/no-chain.js).\n\n## Generators Api\n\n### Yiewd\n\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\ngenerators in order to avoid nested callbacks, like so:\n\n```js\nwd.remote(function*() {\n  yield this.init(desiredCaps);\n  yield this.get(\"http://mysite.com\");\n  el = yield this.elementById(\"someId\");\n  yield el.click();\n  el2 = yield this.elementById(\"anotherThing\")\n  text = yield el2.text();\n  text.should.equal(\"What the text should be\");\n  yield this.quit();\n});\n```\n## Mocha integration\n\n```js\n...\n\ndescribe(\"using mocha-as-promised and chai-as-promised\", function() {\n  var browser;\n\n  before(function() {\n    browser = wd.promiseChainRemote();\n    ...\n\n    return browser.init({browserName:'chrome'});\n  });\n\n  beforeEach(function() {\n    return browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\");\n  });\n\n  after(function() {\n    return browser.quit();\n  });\n\n  it(\"should retrieve the page title\", function() {\n    return browser.title().should.become(\"WD Tests\");\n  });\n\n  it(\"submit element should be clicked\", function() {\n    return browser.elementById(\"submit\").click().eval(\"window.location.href\")\n      .should.eventually.include(\"&submit\");\n  });\n});\n```\n\n[example here](https://github.com/admc/wd/blob/master/examples/promise/mocha-specs.js)\n\n\n## Repl\n\n```\n./node_modules/.bin/wd shell\n```\n\n```\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n```\n\n## Doc\n\n### Api\n\n[supported](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full json wire mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n### JsonWireProtocol\n\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n\n### Browser initialization\n\n#### Indexed parameters\n\n```js\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n```\n#### Named parameters\n\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module.\n\n```js\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n});\n```\n\nThe following parameters may also be used (as in earlier versions):\n\n```js\nvar browser = wd.remote({\n  host: '127.0.0.1',\n  port: 4444,\n  username: 'username',\n  accessKey: 'password',\n});\n```\n#### Url string\n\n```js\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n```\n\n#### Url object created via `url.parse`\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n```js\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n```\n\n#### Defaults\n\n```js\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n```\n\n### Element function chaining (using promise chains)\n\nWith the promise chain api the method from the `browser` prototype and the \n`element` prototype are all available within the `browser` instance, so it might\nbe confusing at first. However we tried to keep the logic as simple as possible \nusing the principles below: \n\n- There is no state passed between calls, except for what the method returns.\n- If the method returns an element the element scope is propagated.\n- If the method returns nothing (click, type etc...) we make the method return the current element, so the element scope is propagated.\n- If the method returns something (text, getAttribute...), the element scope is lost.\n- You may use \"<\" as the first parameter to get out of the element scope.\n- You may use \">\" as the first parameter to force the call to be done within the current context (mainly used to retrieve subelements).\n\nIf you need to do something more complicated, like reusing an element for 2 calls, then \ncan either Q promise functionnality (like then, Q.all or Q sequences), or retrieve your\nelement twice (since the promise chain api is very terse, this is usually acceptable).\n\nElement function chaining example [here](https://github.com/admc/wd/blob/master/examples/promise/chained-el-func-call.js)\n\n### Monkey patching\n\nYou may want to monkey patch the webdriver class in order to add custom functionalities.\nPlease refer to the following examples:\n\n- [pure promise](https://github.com/admc/wd/blob/master/examples/promise/monkey.patch.js).\n- [async patch used by promise](https://github.com/admc/wd/blob/master/examples/promise/monkey.patch-with-async.js).\n- [promise no-chain](https://github.com/admc/wd/blob/master/examples/promise/monkey.patch-no-chain.js).\n- [full async](https://github.com/admc/wd/blob/master/examples/async/monkey.patch.js).\n\nCaveat: You now need to call `wd.rewrap()` to propagate async monkey patching to the \npromise wrapper. This will ovewrite the promise wrapper prototype, so you need to do \nyour monkey patching in order, async first, call `wd.rewrap()` , and only then promise.\n\n### Promise helpers\n\nThis is a clean alternative to monkey patching.\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/helper.js).\n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\nThe following helper are also available to update sauce jobs: `sauceJobUpdate` and `sauceJobStatus`.\n\n### Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```js\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Run the tests!\n\n```\n# Install the Selenium server, Chromedriver connect\nnode_modules/.bin/install_selenium\nnode_modules/.bin/install_chromedriver\n\n#Run the selenium server with chromedriver:\nnode_modules/.bin/start_selenium_with_chromedriver\n\ncd wd\nnpm install\nmake test\n\n# look at the results!\n```\n\n## Run the tests on Sauce Labs cloud!\n\n```\n# Install Sauce Connect\nnode_modules/.bin/install_sauce_connect\n\n# Set the following env variales: SAUCE_USERNAME and SAUCE_ACCESS_KEY \n\n# Start Sauce Sonnect:\nnode_modules/.bin/start_sauce_connect\n\ncd wd\nnpm install\nmake test_e2e_sauce # may be run without sauce connect\nmake test_midway_sauce_connect\n\n# look at the results on Saucelabs site!\n```\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Generating doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n```\nmake mapping > doc/jsonwire-mapping.md\nmake full_mapping > doc/jsonwire-full-mapping.md\nmake unsupported_mapping > doc/jsonwire-unsupported-mapping.md\n```\n\n## Publishing\n\n```\nnpm version [patch|minor|major]\ngit push --tags\nnpm publish\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/istanbul/coverage/lcov-report/index.html)\n","readmeFilename":"README.md","homepage":"https://github.com/admc/wd","_id":"wd@0.2.2","dist":{"shasum":"3358bf23d58622c8b6422d356eeaf76ed8d0e320","tarball":"http://registry.npmjs.org/wd/-/wd-0.2.2.tgz"},"_from":".","_npmVersion":"1.3.12","_npmUser":{"name":"sebv","email":"seb.vincent@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.2.3":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.2.3","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"licenses":[{"type":"Apache","url":"http://www.apache.org/licenses/LICENSE-2.0.html"}],"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"~0.2.9","vargs":"~0.1.0","q":"~0.9.7","request":"~2.21.0","archiver":"~0.4.10","lodash":"~1.3.1","tmp":"0.0.21","string":"~1.6.1"},"devDependencies":{"mocha":"~1.13.0","nock":"~0.22.1","express":"~3.4.3","imageinfo":"~1.0.4","dox":"~0.4.4","mu2":"~0.5.19","sv-selenium":"~0.2.2","colors":"~0.6.2","chai-as-promised":"~4.1.0","chai":"~1.8.1","mocha-as-promised":"~1.4.0","hbs":"~2.4.0","istanbul":"~0.1.44","promise-simple":"~0.1.0"},"scripts":{"test":"make test","test_sauce":"make test_e2e_sauce"},"readme":"# WD.js\n\n**node.js Webdriver/Selenium 2 client**\n\n- [Site](http://admc.io/wd/)\n- [Mailing List](https://groups.google.com/forum/#!forum/wdjs)\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Install\n\n```\nnpm install wd\n```\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Release notes\n\nMany changes have been introduced in 0.2.x versions, please check \n[here](https://github.com/admc/wd/blob/master/doc/release-notes.md) for more details.\n\n### 0.2.3 caveats\n  - Most wait methods have been deprecated replaced by waitFor/waitForElement + asserters. See doc below, don't hesitate to add more asserters if you feel it is useful for others.\n  - Manual monkey patching is not recommended anymore, there were some side use cases which were not easy to cover.\n  Use addAsyncMethod/addPromiseMethod/addPromiseChainMethod methods instead. See doc below.\n\n## Usage\n\n### Q promises + chaining\n\n```js\n...\n\nbrowser\n  .init({browserName:'chrome'})\n  .get(\"http://admc.io/wd/test-pages/guinea-pig.html\")\n  .title()\n    .should.become('WD Tests')\n  .elementById('i am a link')\n  .click()\n  .eval(\"window.location.href\")\n    .should.eventually.include('guinea-pig2')\n  .back()\n  .elementByCss('#comments').type('Bonjour!')\n  .getValue().should.become('Bonjour!')\n  .fin(function() { return browser.quit(); })\n  .done();\n```\n[full code here](https://github.com/admc/wd/blob/master/examples/promise/chrome.js)\n\n\n### Pure async\n\n```js\n...\n\nbrowser.init({browserName:'chrome'}, function() {\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      title.should.include('WD');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          /* jshint evil: true */\n          browser.eval(\"window.location.href\", function(err, href) {\n            href.should.include('guinea-pig2');\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n```\n[full code here](https://github.com/admc/wd/blob/master/examples/async/chrome.js)\n\n\n### Q promises without chaining\n\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/no-chain.js).\n\n## Generators api\n\n### Yiewd\n\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\ngenerators in order to avoid nested callbacks, like so:\n\n```js\nwd.remote(function*() {\n  yield this.init(desiredCaps);\n  yield this.get(\"http://mysite.com\");\n  el = yield this.elementById(\"someId\");\n  yield el.click();\n  el2 = yield this.elementById(\"anotherThing\")\n  text = yield el2.text();\n  text.should.equal(\"What the text should be\");\n  yield this.quit();\n});\n```\n## Mocha integration\n\n```js\n...\n\ndescribe(\"using mocha-as-promised and chai-as-promised\", function() {\n  var browser;\n\n  before(function() {\n    browser = wd.promiseChainRemote();\n    ...\n\n    return browser.init({browserName:'chrome'});\n  });\n\n  beforeEach(function() {\n    return browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\");\n  });\n\n  after(function() {\n    return browser.quit();\n  });\n\n  it(\"should retrieve the page title\", function() {\n    return browser.title().should.become(\"WD Tests\");\n  });\n\n  it(\"submit element should be clicked\", function() {\n    return browser.elementById(\"submit\").click().eval(\"window.location.href\")\n      .should.eventually.include(\"&submit\");\n  });\n});\n```\n\n[example here](https://github.com/admc/wd/blob/master/examples/promise/mocha-specs.js)\n\n\n## Repl\n\n```\n./node_modules/.bin/wd shell\n```\n\n```\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n```\n\n## Doc\n\n### Api\n\n[jsonwire mapping + api doc](https://github.com/admc/wd/blob/master/doc/api.md)\n\n[åfull jsonwire mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n### JsonWireProtocol\n\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n\n### Browser initialization\n\n#### Indexed parameters\n\n```js\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n```\n#### Named parameters\n\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module.\n\n```js\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n});\n```\n\nThe following parameters may also be used (as in earlier versions):\n\n```js\nvar browser = wd.remote({\n  host: '127.0.0.1',\n  port: 4444,\n  username: 'username',\n  accessKey: 'password',\n});\n```\n#### Url string\n\n```js\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n```\n\n#### Url object created via url.parse\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n```js\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n```\n\n#### Defaults\n\n```js\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n```\n\n### Element function chaining (using promise chains)\n\nWith the promise chain api the method from the `browser` prototype and the \n`element` prototype are all available within the `browser` instance, so it might\nbe confusing at first. However we tried to keep the logic as simple as possible \nusing the principles below: \n\n- There is no state passed between calls, except for what the method returns.\n- If the method returns an element the element scope is propagated.\n- If the method returns nothing (click, type etc...) we make the method return the current element, so the element scope is propagated.\n- If the method returns something (text, getAttribute...), the element scope is lost.\n- You may use \"<\" as the first parameter to get out of the element scope.\n- You may use \">\" as the first parameter to force the call to be done within the current context (mainly used to retrieve subelements).\n\nIf you need to do something more complicated, like reusing an element for 2 calls, then \ncan either Q promise functionnality (like then, Q.all or Q sequences), or retrieve your\nelement twice (since the promise chain api is very terse, this is usually acceptable).\n\nElement function chaining example [here](https://github.com/admc/wd/blob/master/examples/promise/chained-el-func-call.js)\n\n### Waiting for something\n\nBelow are the methods to use to wait for a condition:\n\n- `browser.waitFor(asserter, timeout, pollFreq, cb) -> cb(err, value)`: generic wait method, the return value is provided by the asserter when the condition is satisfied.\n- `browser.waitForElementBy???(value ,asserter, timeout, pollFreq, cb) -> cb(err, el)`: waits for a element then a \ncondition, then returns the element.\n- `browser.waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)`: waits for a js condition within a browser, then returns a boolean.\n\nAsserters should be written using either models below . `target` may be `browser` and/or `element` depending on the context.\n\n```js\n// async\nvar asyncAsserter = new Asserter(\n  function(target,cb) {\n    ...\n    cb(err, satisfied, value);\n  }\n);\n\n// promise\nvar promiseAsserter = new Asserter(\n  function(target) {\n    ...\n    return promise; // promise resolved with the wait_for return value.\n    \n    // Promise asserter should throw errors marked with `err.retriable=true` \n    // when the condition is not satisfied.    \n  }\n);\n\n```\n\nExample [here](https://github.com/admc/wd/blob/master/examples/promise/wait-for.js).\n\nThere are ready to use asserters [here](https://github.com/admc/wd/blob/master/lib/asserters.js),\nSee also the asserter category in the api doc [here](https://github.com/admc/wd/blob/master/doc/api.md).\n\n### Adding custom methods\n\n- `wd.addAsyncMethod(name, method)`: This is for regular async methods with callback as the last argument. This will not only add the method to the async browser prototype, but also wrap the method and add it to the promise and promiseChain prototypes.\n- `wd.addPromiseMethod(name, method)`: This is for promise returning methods NOT USING CHAIN internally. This will not only add the method to the promise browser prototype, but also wrap the method and add it to the promiseChain prototype (but not to the async prototype).\n- `wd.addPromiseChainMethod(name, method)`: This is for promise returning methods USING CHAIN internally. This will only add the method to the promiseChain browser prototype (but neither to async nor to promise browser prototypes).\n\nIf you are only using the promise chain api, you should probably stick with `wd.addPromiseChainMethod(name, method)`.\n\nYou may remove a custom method with `wd.removeMethod(name)`. Not sure why you would want to do that, but that will remove the method from the 3 prototypes.\n\nPlease refer to the following examples:\n\n- [promise chain](https://github.com/admc/wd/blob/master/examples/promise/add-method.js).\n- [async method used by promise chain](https://github.com/admc/wd/blob/master/examples/promise/add-method-async.js).\n- [promise no-chain](https://github.com/admc/wd/blob/master/examples/promise/add-method-no-chain.js).\n- [async](https://github.com/admc/wd/blob/master/examples/async/add-method.js).\n\nNote: No need to call rewrap anymore.\n\n### Promise helpers\n\nThis is an alternative to adding custom methods.\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/helper.js).\n\n### Starting the promise chain\n\nThe `browser` and `element` object are not themselves promises (cause that would lead to chaos), so you \ncannot call Q core methods on them. However you may call one of the method below to initiate the promise \nchain:\n\n- `browser.chain()`\n- `browser.noop()`\n- `browser.resolve(promise)`\n- `element.chain()`\n- `element.noop()`\n- `element.resolve(promise)`\n\nThe `resolve` methods work like `Q` `thenResolve`.\n\n### Working with external promise libraries\n\n`wd` uses `Q` internally, but you may use promises from other libraries with the following methods:\n\n- `browser.resolve(externalPromise)`\n- `wd.addPromiseChainMethod(name, externalPromise)`\n- `wd.addPromiseMethod(name, externalPromise)`\n\nThe external promise will be automatically wrapped within a Q promise using `new Q(externalPromise)`.\n\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/external-promise.js).\n\n### Http configuration / base url\n\nHttp behaviour and base url may be configured via the `configureHttp` method as \nin the code below:\n\n```js\n// global config\nwd.configureHttp({\n  timeout: 60000,\n  retries: 3,\n  retryDelay: 100,\n  baseUrl = 'http://example.com/'\n});\n// per browser config\nbrowser.configureHttp({\n  timeout: 60000,\n  retries: 3,\n  retryDelay: 100,\n  baseUrl = 'http://example.com/'\n});\n``` \n\n- timeout: http timeout in ms, default is `undefined` (uses the server timeout, \n  usually 60 seconds). Use `'default'` or `undefined` for server default.\n- retries: Number of reconnection attempts in case the connection is dropped. \n  Default is `3`. Pass `0` or `always` to keep trying. Pass `-1` or `never` to disable.\n- retryDelay: the number of ms to wait before reconnecting. Default is `15`.\n- baseUrl: the base url use by the `get` method. The destination url is computed using\n`url.resolve`. Default is empty.\n- If a field is not specified, the current configuration for this field is\n  unchanged.\n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\nThe following helper are also available to update sauce jobs: `sauceJobUpdate` and `sauceJobStatus`.\n\n### Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```js\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Run the tests!\n\n```\n# Install the Selenium server, Chromedriver connect\nnode_modules/.bin/install_selenium\nnode_modules/.bin/install_chromedriver\n\n#Run the selenium server with chromedriver:\nnode_modules/.bin/start_selenium_with_chromedriver\n\ncd wd\nnpm install\nmake test\n\n# look at the results!\n```\n\n## Run the tests on Sauce Labs cloud!\n\n```\n# Install Sauce Connect\nnode_modules/.bin/install_sauce_connect\n\n# Set the following env variales: SAUCE_USERNAME and SAUCE_ACCESS_KEY \n\n# Start Sauce Sonnect:\nnode_modules/.bin/start_sauce_connect\n\ncd wd\nnpm install\nmake test_e2e_sauce # may be run without sauce connect\nmake test_midway_sauce_connect\n\n# look at the results on Saucelabs site!\n```\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Generating doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n```\nmake mapping > doc/api.md\nmake full_mapping > doc/jsonwire-full-mapping.md\nmake unsupported_mapping > doc/jsonwire-unsupported-mapping.md\n```\n\n## Publishing\n\n```\nnpm version [patch|minor|major]\ngit push --tags origin master\nnpm publish\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/istanbul/coverage/lcov-report/index.html)\n ","readmeFilename":"README.md","_id":"wd@0.2.3","dist":{"shasum":"4d85b7cbded7e2533cd4ce90b7e4bb2ba67ec73d","tarball":"http://registry.npmjs.org/wd/-/wd-0.2.3.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"sebv","email":"seb.vincent@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.2.4":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.2.4","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"licenses":[{"type":"Apache","url":"http://www.apache.org/licenses/LICENSE-2.0.html"}],"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"~0.2.9","vargs":"~0.1.0","q":"~0.9.7","request":"~2.21.0","archiver":"~0.4.10","lodash":"~1.3.1","tmp":"0.0.21","underscore.string":"~2.3.3"},"devDependencies":{"mocha":"~1.13.0","nock":"~0.22.1","express":"~3.4.3","imageinfo":"~1.0.4","dox":"~0.4.4","mu2":"~0.5.19","sv-selenium":"~0.2.2","colors":"~0.6.2","chai-as-promised":"~4.1.0","chai":"~1.8.1","mocha-as-promised":"~1.4.0","hbs":"~2.4.0","istanbul":"~0.1.44","promise-simple":"~0.1.0"},"scripts":{"test":"make test","test_sauce":"make test_e2e_sauce"},"readme":"# WD.js\n\n**node.js Webdriver/Selenium 2 client**\n\n- [Site](http://admc.io/wd/)\n- [Mailing List](https://groups.google.com/forum/#!forum/wdjs)\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Install\n\n```\nnpm install wd\n```\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Release notes\n\nMany changes have been introduced in 0.2.x versions, please check\n[here](https://github.com/admc/wd/blob/master/doc/release-notes.md) for more details.\n\n### 0.2.3 caveats\n  - Most wait methods have been deprecated replaced by waitFor/waitForElement + asserters. See doc below, don't hesitate to add more asserters if you feel it is useful for others.\n  - Manual monkey patching is not recommended anymore, there were some side use cases which were not easy to cover.\n  Use addAsyncMethod/addPromiseMethod/addPromiseChainMethod methods instead. See doc below.\n\n## Usage\n\n### Q promises + chaining\n\n```js\n...\n\nbrowser\n  .init({browserName:'chrome'})\n  .get(\"http://admc.io/wd/test-pages/guinea-pig.html\")\n  .title()\n    .should.become('WD Tests')\n  .elementById('i am a link')\n  .click()\n  .eval(\"window.location.href\")\n    .should.eventually.include('guinea-pig2')\n  .back()\n  .elementByCss('#comments').type('Bonjour!')\n  .getValue().should.become('Bonjour!')\n  .fin(function() { return browser.quit(); })\n  .done();\n```\n[full code here](https://github.com/admc/wd/blob/master/examples/promise/chrome.js)\n\n\n### Pure async\n\n```js\n...\n\nbrowser.init({browserName:'chrome'}, function() {\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      title.should.include('WD');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          /* jshint evil: true */\n          browser.eval(\"window.location.href\", function(err, href) {\n            href.should.include('guinea-pig2');\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n```\n[full code here](https://github.com/admc/wd/blob/master/examples/async/chrome.js)\n\n\n### Q promises without chaining\n\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/no-chain.js).\n\n## Generators api\n\n### Yiewd\n\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\ngenerators in order to avoid nested callbacks, like so:\n\n```js\nwd.remote(function*() {\n  yield this.init(desiredCaps);\n  yield this.get(\"http://mysite.com\");\n  el = yield this.elementById(\"someId\");\n  yield el.click();\n  el2 = yield this.elementById(\"anotherThing\")\n  text = yield el2.text();\n  text.should.equal(\"What the text should be\");\n  yield this.quit();\n});\n```\n## Mocha integration\n\n```js\n...\n\ndescribe(\"using mocha-as-promised and chai-as-promised\", function() {\n  var browser;\n\n  before(function() {\n    browser = wd.promiseChainRemote();\n    ...\n\n    return browser.init({browserName:'chrome'});\n  });\n\n  beforeEach(function() {\n    return browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\");\n  });\n\n  after(function() {\n    return browser.quit();\n  });\n\n  it(\"should retrieve the page title\", function() {\n    return browser.title().should.become(\"WD Tests\");\n  });\n\n  it(\"submit element should be clicked\", function() {\n    return browser.elementById(\"submit\").click().eval(\"window.location.href\")\n      .should.eventually.include(\"&submit\");\n  });\n});\n```\n\n[example here](https://github.com/admc/wd/blob/master/examples/promise/mocha-specs.js)\n\n\n## Repl\n\n```\n./node_modules/.bin/wd shell\n```\n\n```\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n```\n\n## Doc\n\n### Api\n\n[jsonwire mapping + api doc](https://github.com/admc/wd/blob/master/doc/api.md)\n\n[full jsonwire mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n### JsonWireProtocol\n\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n\n### Browser initialization\n\n#### Indexed parameters\n\n```js\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n```\n#### Named parameters\n\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module.\n\n```js\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n});\n```\n\nThe following parameters may also be used (as in earlier versions):\n\n```js\nvar browser = wd.remote({\n  host: '127.0.0.1',\n  port: 4444,\n  username: 'username',\n  accessKey: 'password',\n});\n```\n#### Url string\n\n```js\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n```\n\n#### Url object created via url.parse\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n```js\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n```\n\n#### Defaults\n\n```js\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n```\n\n### Element function chaining (using promise chains)\n\nWith the promise chain api the method from the `browser` prototype and the\n`element` prototype are all available within the `browser` instance, so it might\nbe confusing at first. However we tried to keep the logic as simple as possible\nusing the principles below:\n\n- There is no state passed between calls, except for what the method returns.\n- If the method returns an element the element scope is propagated.\n- If the method returns nothing (click, type etc...) we make the method return the current element, so the element scope is propagated.\n- If the method returns something (text, getAttribute...), the element scope is lost.\n- You may use \"<\" as the first parameter to get out of the element scope.\n- You may use \">\" as the first parameter to force the call to be done within the current context (mainly used to retrieve subelements).\n\nIf you need to do something more complicated, like reusing an element for 2 calls, then\ncan either Q promise functionnality (like then, Q.all or Q sequences), or retrieve your\nelement twice (since the promise chain api is very terse, this is usually acceptable).\n\nElement function chaining example [here](https://github.com/admc/wd/blob/master/examples/promise/chained-el-func-call.js)\n\n### Waiting for something\n\nBelow are the methods to use to wait for a condition:\n\n- `browser.waitFor(asserter, timeout, pollFreq, cb) -> cb(err, value)`: generic wait method, the return value is provided by the asserter when the condition is satisfied.\n- `browser.waitForElementBy???(value ,asserter, timeout, pollFreq, cb) -> cb(err, el)`: waits for a element then a\ncondition, then returns the element.\n- `browser.waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)`: waits for a js condition within a browser, then returns a boolean.\n\nAsserters should be written using either models below . `target` may be `browser` and/or `element` depending on the context.\n\n```js\n// async\nvar asyncAsserter = new Asserter(\n  function(target,cb) {\n    ...\n    cb(err, satisfied, value);\n  }\n);\n\n// promise\nvar promiseAsserter = new Asserter(\n  function(target) {\n    ...\n    return promise; // promise resolved with the wait_for return value.\n\n    // Promise asserter should throw errors marked with `err.retriable=true`\n    // when the condition is not satisfied.\n  }\n);\n\n```\n\nExample [here](https://github.com/admc/wd/blob/master/examples/promise/wait-for.js).\n\nThere are ready to use asserters [here](https://github.com/admc/wd/blob/master/lib/asserters.js),\nSee also the asserter category in the api doc [here](https://github.com/admc/wd/blob/master/doc/api.md).\n\n### Adding custom methods\n\n- `wd.addAsyncMethod(name, method)`: This is for regular async methods with callback as the last argument. This will not only add the method to the async browser prototype, but also wrap the method and add it to the promise and promiseChain prototypes.\n- `wd.addPromiseMethod(name, method)`: This is for promise returning methods NOT USING CHAIN internally. This will not only add the method to the promise browser prototype, but also wrap the method and add it to the promiseChain prototype (but not to the async prototype).\n- `wd.addPromiseChainMethod(name, method)`: This is for promise returning methods USING CHAIN internally. This will only add the method to the promiseChain browser prototype (but neither to async nor to promise browser prototypes).\n\nIf you are only using the promise chain api, you should probably stick with `wd.addPromiseChainMethod`.\n\nCustom methods may be removed with `wd.removeMethod(name)`. That will remove the method from the 3 prototypes.\n\nPlease refer to the following examples:\n\n- [promise chain](https://github.com/admc/wd/blob/master/examples/promise/add-method.js).\n- [async method used by promise chain](https://github.com/admc/wd/blob/master/examples/promise/add-method-async.js).\n- [promise no-chain](https://github.com/admc/wd/blob/master/examples/promise/add-method-no-chain.js).\n- [async](https://github.com/admc/wd/blob/master/examples/async/add-method.js).\n\nNote: No need to call rewrap anymore.\n\n### Promise helpers\n\nThis is an alternative to adding custom methods.\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/helper.js).\n\n### Starting the promise chain\n\nThe `browser` and `element` object are not themselves promises (cause that would lead to chaos), so you\ncannot call Q core methods on them. However you may call one of the method below to initiate the promise\nchain:\n\n- `browser.chain()`\n- `browser.noop()`\n- `browser.resolve(promise)`\n- `element.chain()`\n- `element.noop()`\n- `element.resolve(promise)`\n\nThe `resolve` methods work like `Q` `thenResolve`.\n\n### Working with external promise libraries\n\n`wd` uses `Q` internally, but you may use promises from other libraries with the following methods:\n\n- `browser.resolve(externalPromise)`\n- `wd.addPromiseChainMethod(name, externalPromise)`\n- `wd.addPromiseMethod(name, externalPromise)`\n\nThe external promise will be automatically wrapped within a Q promise using `new Q(externalPromise)`.\n\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/external-promise.js).\n\n### Http configuration / base url\n\nHttp behaviour and base url may be configured via the `configureHttp` method as\nin the code below:\n\n```js\n// global config\nwd.configureHttp({\n  timeout: 60000,\n  retries: 3,\n  retryDelay: 100,\n  baseUrl = 'http://example.com/'\n});\n// per browser config\nbrowser.configureHttp({\n  timeout: 60000,\n  retries: 3,\n  retryDelay: 100,\n  baseUrl = 'http://example.com/'\n});\n```\n\n- timeout: http timeout in ms, default is `undefined` (uses the server timeout,\n  usually 60 seconds). Use `'default'` or `undefined` for server default.\n- retries: Number of reconnection attempts in case the connection is dropped.\n  Default is `3`. Pass `0` or `always` to keep trying. Pass `-1` or `never` to disable.\n- retryDelay: the number of ms to wait before reconnecting. Default is `15`.\n- baseUrl: the base url use by the `get` method. The destination url is computed using\n`url.resolve`. Default is empty.\n- If a field is not specified, the current configuration for this field is\n  unchanged.\n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\nThe following helper are also available to update sauce jobs: `sauceJobUpdate` and `sauceJobStatus`.\n\n### Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```js\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Working with mobile device emulators\n\nIt is possible to use `wd` to test mobile devices using either Selenium or Appium. However\nin either case the full JsonWire protocol is not supported (or is buggy).\n\nExamples [here](https://github.com/admc/wd/tree/master/examples/mobile).\n\n### Selenium\n\nBoth Android (using AndroidDriver) and ios (using ios-driver) are supported, locally or using\nSauce Labs cloud.\n\n### Appium\n\nAndroid is only supported locally.\n\nios6 is supported locally or using Sauce Labs cloud. There is an issue with ios7, the Appium\nteam is working to solve it.\n\n## Run the tests!\n\n```\n# Install the Selenium server, Chromedriver connect\nnode_modules/.bin/install_selenium\nnode_modules/.bin/install_chromedriver\n\n#Run the selenium server with chromedriver:\nnode_modules/.bin/start_selenium_with_chromedriver\n\ncd wd\nnpm install\nmake test\n\n# look at the results!\n```\n\n## Run the tests on Sauce Labs cloud!\n\n```\n# Install Sauce Connect\nnode_modules/.bin/install_sauce_connect\n\n# Set the following env variales: SAUCE_USERNAME and SAUCE_ACCESS_KEY\n\n# Start Sauce Sonnect:\nnode_modules/.bin/start_sauce_connect\n\ncd wd\nnpm install\nmake test_e2e_sauce # may be run without sauce connect\nmake test_midway_sauce_connect\n\n# look at the results on Saucelabs site!\n```\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Generating doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n```\nmake mapping > doc/api.md\nmake full_mapping > doc/jsonwire-full-mapping.md\nmake unsupported_mapping > doc/jsonwire-unsupported-mapping.md\n```\n\n## Publishing\n\n```\nnpm version [patch|minor|major]\ngit push --tags origin master\nnpm publish\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/istanbul/coverage/lcov-report/lib/index.html)\n\n","readmeFilename":"README.md","_id":"wd@0.2.4","dist":{"shasum":"ba1e2b12ca47542809577450d29f4180c4614a61","tarball":"http://registry.npmjs.org/wd/-/wd-0.2.4.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"sebv","email":"seb.vincent@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.2.5":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.2.5","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"licenses":[{"type":"Apache","url":"http://www.apache.org/licenses/LICENSE-2.0.html"}],"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"~0.2.9","vargs":"~0.1.0","q":"~0.9.7","request":"~2.21.0","archiver":"~0.4.10","lodash":"~1.3.1","tmp":"0.0.21","underscore.string":"~2.3.3"},"devDependencies":{"mocha":"~1.13.0","nock":"~0.22.1","express":"~3.4.3","imageinfo":"~1.0.4","dox":"~0.4.4","mu2":"~0.5.19","sv-selenium":"~0.2.2","colors":"~0.6.2","chai-as-promised":"~4.1.0","chai":"~1.8.1","mocha-as-promised":"~1.4.0","hbs":"~2.4.0","istanbul":"~0.1.44","promise-simple":"~0.1.0"},"scripts":{"test":"make test","test_sauce":"make test_e2e_sauce"},"readme":"# WD.js\n\n**node.js Webdriver/Selenium 2 client**\n\n- [Site](http://admc.io/wd/)\n- [Mailing List](https://groups.google.com/forum/#!forum/wdjs)\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Install\n\n```\nnpm install wd\n```\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Release notes\n\nLatest version is `0.2.5`.\n\nMany changes have been introduced in 0.2.x versions, please check\n[here](https://github.com/admc/wd/blob/master/doc/release-notes.md) for more details.\n\n### caveats when upgrading to 0.2.3\n  - Most wait methods have been deprecated replaced by waitFor/waitForElement + asserters. See doc below, don't hesitate to add more asserters if you feel it is useful for others.\n  - Manual monkey patching is not recommended anymore, there were some side use cases which were not easy to cover.\n  Use addAsyncMethod/addPromiseMethod/addPromiseChainMethod methods instead. See doc below.\n\n## Usage\n\n### Q promises + chaining\n\n```js\n...\n\nbrowser\n  .init({browserName:'chrome'})\n  .get(\"http://admc.io/wd/test-pages/guinea-pig.html\")\n  .title()\n    .should.become('WD Tests')\n  .elementById('i am a link')\n  .click()\n  .eval(\"window.location.href\")\n    .should.eventually.include('guinea-pig2')\n  .back()\n  .elementByCss('#comments').type('Bonjour!')\n  .getValue().should.become('Bonjour!')\n  .fin(function() { return browser.quit(); })\n  .done();\n```\n[full code here](https://github.com/admc/wd/blob/master/examples/promise/chrome.js)\n\n\n### Pure async\n\n```js\n...\n\nbrowser.init({browserName:'chrome'}, function() {\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      title.should.include('WD');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          /* jshint evil: true */\n          browser.eval(\"window.location.href\", function(err, href) {\n            href.should.include('guinea-pig2');\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n```\n[full code here](https://github.com/admc/wd/blob/master/examples/async/chrome.js)\n\n\n### Q promises without chaining\n\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/no-chain.js).\n\n## Generators api\n\n### Yiewd\n\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\ngenerators in order to avoid nested callbacks, like so:\n\n```js\nwd.remote(function*() {\n  yield this.init(desiredCaps);\n  yield this.get(\"http://mysite.com\");\n  el = yield this.elementById(\"someId\");\n  yield el.click();\n  el2 = yield this.elementById(\"anotherThing\")\n  text = yield el2.text();\n  text.should.equal(\"What the text should be\");\n  yield this.quit();\n});\n```\n## Mocha integration\n\n```js\n...\n\ndescribe(\"using mocha-as-promised and chai-as-promised\", function() {\n  var browser;\n\n  before(function() {\n    browser = wd.promiseChainRemote();\n    ...\n\n    return browser.init({browserName:'chrome'});\n  });\n\n  beforeEach(function() {\n    return browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\");\n  });\n\n  after(function() {\n    return browser.quit();\n  });\n\n  it(\"should retrieve the page title\", function() {\n    return browser.title().should.become(\"WD Tests\");\n  });\n\n  it(\"submit element should be clicked\", function() {\n    return browser.elementById(\"submit\").click().eval(\"window.location.href\")\n      .should.eventually.include(\"&submit\");\n  });\n});\n```\n\n[example here](https://github.com/admc/wd/blob/master/examples/promise/mocha-specs.js)\n\n\n## Repl\n\n```\n./node_modules/.bin/wd shell\n```\n\n```\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n```\n\n## Doc\n\n### Api\n\n[jsonwire mapping + api doc](https://github.com/admc/wd/blob/master/doc/api.md)\n\n[full jsonwire mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n### JsonWireProtocol\n\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n\n### Browser initialization\n\n#### Indexed parameters\n\n```js\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n```\n#### Named parameters\n\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module.\n\n```js\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n});\n```\n\nThe following parameters may also be used (as in earlier versions):\n\n```js\nvar browser = wd.remote({\n  host: '127.0.0.1',\n  port: 4444,\n  username: 'username',\n  accessKey: 'password',\n});\n```\n#### Url string\n\n```js\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n```\n\n#### Url object created via url.parse\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n```js\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n```\n\n#### Defaults\n\n```js\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n```\n\n### Element function chaining (using promise chains)\n\nWith the promise chain api the method from the `browser` prototype and the\n`element` prototype are all available within the `browser` instance, so it might\nbe confusing at first. However we tried to keep the logic as simple as possible\nusing the principles below:\n\n- There is no state passed between calls, except for what the method returns.\n- If the method returns an element the element scope is propagated.\n- If the method returns nothing (click, type etc...) we make the method return the current element, so the element scope is propagated.\n- If the method returns something (text, getAttribute...), the element scope is lost.\n- You may use \"<\" as the first parameter to get out of the element scope.\n- You may use \">\" as the first parameter to force the call to be done within the current context (mainly used to retrieve subelements).\n\nIf you need to do something more complicated, like reusing an element for 2 calls, then\ncan either Q promise functionnality (like then, Q.all or Q sequences), or retrieve your\nelement twice (since the promise chain api is very terse, this is usually acceptable).\n\nElement function chaining example [here](https://github.com/admc/wd/blob/master/examples/promise/chained-el-func-call.js)\n\n### Waiting for something\n\nBelow are the methods to use to wait for a condition:\n\n- `browser.waitFor(asserter, timeout, pollFreq, cb) -> cb(err, value)`: generic wait method, the return value is provided by the asserter when the condition is satisfied.\n- `browser.waitForElementBy???(value ,asserter, timeout, pollFreq, cb) -> cb(err, el)`: waits for a element then a\ncondition, then returns the element.\n- `browser.waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)`: waits for a js condition within a browser, then returns a boolean.\n\nAsserters should be written using either models below . `target` may be `browser` and/or `element` depending on the context.\n\n```js\n// async\nvar asyncAsserter = new Asserter(\n  function(target,cb) {\n    ...\n    cb(err, satisfied, value);\n  }\n);\n\n// promise\nvar promiseAsserter = new Asserter(\n  function(target) {\n    ...\n    return promise; // promise resolved with the wait_for return value.\n\n    // Promise asserter should throw errors marked with `err.retriable=true`\n    // when the condition is not satisfied.\n  }\n);\n\n```\n\nExample [here](https://github.com/admc/wd/blob/master/examples/promise/wait-for.js).\n\nThere are ready to use asserters [here](https://github.com/admc/wd/blob/master/lib/asserters.js),\nSee also the asserter category in the api doc [here](https://github.com/admc/wd/blob/master/doc/api.md).\n\n### Adding custom methods\n\n- `wd.addAsyncMethod(name, method)`: This is for regular async methods with callback as the last argument. This will not only add the method to the async browser prototype, but also wrap the method and add it to the promise and promiseChain prototypes.\n- `wd.addPromiseMethod(name, method)`: This is for promise returning methods NOT USING CHAIN internally. This will not only add the method to the promise browser prototype, but also wrap the method and add it to the promiseChain prototype (but not to the async prototype).\n- `wd.addPromiseChainMethod(name, method)`: This is for promise returning methods USING CHAIN internally. This will only add the method to the promiseChain browser prototype (but neither to async nor to promise browser prototypes).\n\nIf you are only using the promise chain api, you should probably stick with `wd.addPromiseChainMethod`.\n\nCustom methods may be removed with `wd.removeMethod(name)`. That will remove the method from the 3 prototypes.\n\nPlease refer to the following examples:\n\n- [promise chain](https://github.com/admc/wd/blob/master/examples/promise/add-method.js).\n- [async method used by promise chain](https://github.com/admc/wd/blob/master/examples/promise/add-method-async.js).\n- [promise no-chain](https://github.com/admc/wd/blob/master/examples/promise/add-method-no-chain.js).\n- [async](https://github.com/admc/wd/blob/master/examples/async/add-method.js).\n\nNote: No need to call rewrap anymore.\n\n### Promise helpers\n\nThis is an alternative to adding custom methods.\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/helper.js).\n\n### Starting the promise chain\n\nThe `browser` and `element` object are not themselves promises (cause that would lead to chaos), so you\ncannot call Q core methods on them. However you may call one of the method below to initiate the promise\nchain:\n\n- `browser.chain()`\n- `browser.noop()`\n- `browser.resolve(promise)`\n- `element.chain()`\n- `element.noop()`\n- `element.resolve(promise)`\n\nThe `resolve` methods work like `Q` `thenResolve`.\n\n### Working with external promise libraries\n\n`wd` uses `Q` internally, but you may use promises from other libraries with the following methods:\n\n- `browser.resolve(externalPromise)`\n- `wd.addPromiseChainMethod(name, externalPromise)`\n- `wd.addPromiseMethod(name, externalPromise)`\n\nThe external promise will be automatically wrapped within a Q promise using `new Q(externalPromise)`.\n\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/external-promise.js).\n\n### Http configuration / base url\n\nHttp behaviour and base url may be configured via the `configureHttp` method as\nin the code below:\n\n```js\n// global config\nwd.configureHttp({\n  timeout: 60000,\n  retries: 3,\n  retryDelay: 100,\n  baseUrl = 'http://example.com/'\n});\n// per browser config\nbrowser.configureHttp({\n  timeout: 60000,\n  retries: 3,\n  retryDelay: 100,\n  baseUrl = 'http://example.com/'\n});\n```\n\n- timeout: http timeout in ms, default is `undefined` (uses the server timeout,\n  usually 60 seconds). Use `'default'` or `undefined` for server default.\n- retries: Number of reconnection attempts in case the connection is dropped.\n  Default is `3`. Pass `0` or `always` to keep trying. Pass `-1` or `never` to disable.\n- retryDelay: the number of ms to wait before reconnecting. Default is `15`.\n- baseUrl: the base url use by the `get` method. The destination url is computed using\n`url.resolve`. Default is empty.\n- If a field is not specified, the current configuration for this field is\n  unchanged.\n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\nThe following helper are also available to update sauce jobs: `sauceJobUpdate` and `sauceJobStatus`.\n\n### Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```js\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Working with mobile device emulators\n\nIt is possible to use `wd` to test mobile devices using either Selenium or Appium. However\nin either case the full JsonWire protocol is not supported (or is buggy).\n\nExamples [here](https://github.com/admc/wd/tree/master/examples/mobile).\n\n### Selenium\n\nBoth Android (using AndroidDriver) and ios (using ios-driver) are supported, locally or using\nSauce Labs cloud.\n\n### Appium\n\nAndroid is only supported locally.\n\nios6 is supported locally or using Sauce Labs cloud. There is an issue with ios7, the Appium\nteam is working to solve it.\n\n## Run the tests!\n\n```\n# Install the Selenium server, Chromedriver connect\nnode_modules/.bin/install_selenium\nnode_modules/.bin/install_chromedriver\n\n#Run the selenium server with chromedriver:\nnode_modules/.bin/start_selenium_with_chromedriver\n\ncd wd\nnpm install\nmake test\n\n# look at the results!\n```\n\n## Run the tests on Sauce Labs cloud!\n\n```\n# Install Sauce Connect\nnode_modules/.bin/install_sauce_connect\n\n# Set the following env variales: SAUCE_USERNAME and SAUCE_ACCESS_KEY\n\n# Start Sauce Sonnect:\nnode_modules/.bin/start_sauce_connect\n\ncd wd\nnpm install\nmake test_e2e_sauce # may be run without sauce connect\nmake test_midway_sauce_connect\n\n# look at the results on Saucelabs site!\n```\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Generating doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n```\nmake mapping > doc/api.md\nmake full_mapping > doc/jsonwire-full-mapping.md\nmake unsupported_mapping > doc/jsonwire-unsupported-mapping.md\n```\n\n## Publishing\n\n```\nnpm version [patch|minor|major]\ngit push --tags origin master\nnpm publish\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/istanbul/coverage/lcov-report/lib/index.html)\n\n\n","readmeFilename":"README.md","_id":"wd@0.2.5","dist":{"shasum":"3ce384a92233d7446c8edc88b6eaf98cfb9cb032","tarball":"http://registry.npmjs.org/wd/-/wd-0.2.5.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"sebv","email":"seb.vincent@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.2.6":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.2.6","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"licenses":[{"type":"Apache","url":"http://www.apache.org/licenses/LICENSE-2.0.html"}],"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"~0.2.9","vargs":"~0.1.0","q":"~0.9.7","request":"~2.21.0","archiver":"~0.4.10","lodash":"~1.3.1","underscore.string":"~2.3.3"},"devDependencies":{"mocha":"~1.14.0","nock":"~0.23.0","express":"~3.4.5","imageinfo":"~1.0.4","dox":"~0.4.4","mu2":"~0.5.20","sv-selenium":"~0.2.2","colors":"~0.6.2","chai-as-promised":"~4.1.0","chai":"~1.8.1","mocha-as-promised":"~1.4.1","hbs":"~2.4.0","istanbul":"~0.1.45","promise-simple":"~0.1.0"},"scripts":{"test":"make test","test_sauce":"make test_e2e_sauce"},"readme":"# WD.js\n\n**node.js Webdriver/Selenium 2 client**\n\n- [Site](http://admc.io/wd/)\n- [Mailing List](https://groups.google.com/forum/#!forum/wdjs)\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Install\n\n```\nnpm install wd\n```\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Release notes\n\nLatest version is `0.2.6`.\n\nMany changes have been introduced in 0.2.x versions, please check\n[here](https://github.com/admc/wd/blob/master/doc/release-notes.md) for more details.\n\n### caveats when upgrading to 0.2.3\n  - Most wait methods have been deprecated replaced by waitFor/waitForElement + asserters. See doc below, don't hesitate to add more asserters if you feel it is useful for others.\n  - Manual monkey patching is not recommended anymore, there were some side use cases which were not easy to cover.\n  Use addAsyncMethod/addPromiseMethod/addPromiseChainMethod methods instead. See doc below.\n\n## Usage\n\n### Q promises + chaining\n\n```js\n...\n\nbrowser\n  .init({browserName:'chrome'})\n  .get(\"http://admc.io/wd/test-pages/guinea-pig.html\")\n  .title()\n    .should.become('WD Tests')\n  .elementById('i am a link')\n  .click()\n  .eval(\"window.location.href\")\n    .should.eventually.include('guinea-pig2')\n  .back()\n  .elementByCss('#comments').type('Bonjour!')\n  .getValue().should.become('Bonjour!')\n  .fin(function() { return browser.quit(); })\n  .done();\n```\n[full code here](https://github.com/admc/wd/blob/master/examples/promise/chrome.js)\n\n\n### Pure async\n\n```js\n...\n\nbrowser.init({browserName:'chrome'}, function() {\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      title.should.include('WD');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          /* jshint evil: true */\n          browser.eval(\"window.location.href\", function(err, href) {\n            href.should.include('guinea-pig2');\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n```\n[full code here](https://github.com/admc/wd/blob/master/examples/async/chrome.js)\n\n\n### Q promises without chaining\n\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/no-chain.js).\n\n## Generators api\n\n### Yiewd\n\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\ngenerators in order to avoid nested callbacks, like so:\n\n```js\nwd.remote(function*() {\n  yield this.init(desiredCaps);\n  yield this.get(\"http://mysite.com\");\n  el = yield this.elementById(\"someId\");\n  yield el.click();\n  el2 = yield this.elementById(\"anotherThing\")\n  text = yield el2.text();\n  text.should.equal(\"What the text should be\");\n  yield this.quit();\n});\n```\n## Mocha integration\n\n```js\n...\n\ndescribe(\"using mocha-as-promised and chai-as-promised\", function() {\n  var browser;\n\n  before(function() {\n    browser = wd.promiseChainRemote();\n    ...\n\n    return browser.init({browserName:'chrome'});\n  });\n\n  beforeEach(function() {\n    return browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\");\n  });\n\n  after(function() {\n    return browser.quit();\n  });\n\n  it(\"should retrieve the page title\", function() {\n    return browser.title().should.become(\"WD Tests\");\n  });\n\n  it(\"submit element should be clicked\", function() {\n    return browser.elementById(\"submit\").click().eval(\"window.location.href\")\n      .should.eventually.include(\"&submit\");\n  });\n});\n```\n\n[example here](https://github.com/admc/wd/blob/master/examples/promise/mocha-specs.js)\n\n\n## Repl\n\n```\n./node_modules/.bin/wd shell\n```\n\n```\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n```\n\n## Doc\n\n### Api\n\n[jsonwire mapping + api doc](https://github.com/admc/wd/blob/master/doc/api.md)\n\n[full jsonwire mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n### JsonWireProtocol\n\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n\n### Browser initialization\n\n#### Indexed parameters\n\n```js\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n```\n#### Named parameters\n\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module.\n\n```js\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n});\n```\n\nThe following parameters may also be used (as in earlier versions):\n\n```js\nvar browser = wd.remote({\n  host: '127.0.0.1',\n  port: 4444,\n  username: 'username',\n  accessKey: 'password',\n});\n```\n#### Url string\n\n```js\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n```\n\n#### Url object created via url.parse\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n```js\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n```\n\n#### Defaults\n\n```js\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n```\n\n### Capabilities\n\n[doc here](https://code.google.com/p/selenium/wiki/DesiredCapabilities).\n\n### Element function chaining (using promise chains)\n\nWith the promise chain api the method from the `browser` prototype and the\n`element` prototype are all available within the `browser` instance, so it might\nbe confusing at first. However we tried to keep the logic as simple as possible\nusing the principles below:\n\n- There is no state passed between calls, except for what the method returns.\n- If the method returns an element the element scope is propagated.\n- If the method returns nothing (click, type etc...) we make the method return the current element, so the element scope is propagated.\n- If the method returns something (text, getAttribute...), the element scope is lost.\n- You may use \"<\" as the first parameter to get out of the element scope.\n- You may use \">\" as the first parameter to force the call to be done within the current context (mainly used to retrieve subelements).\n\nIf you need to do something more complicated, like reusing an element for 2 calls, then\ncan either Q promise functionnality (like then, Q.all or Q sequences), or retrieve your\nelement twice (since the promise chain api is very terse, this is usually acceptable).\n\nElement function chaining example [here](https://github.com/admc/wd/blob/master/examples/promise/chained-el-func-call.js)\n\n### Waiting for something\n\nBelow are the methods to use to wait for a condition:\n\n- `browser.waitFor(asserter, timeout, pollFreq, cb) -> cb(err, value)`: generic wait method, the return value is provided by the asserter when the condition is satisfied.\n- `browser.waitForElementBy???(value ,asserter, timeout, pollFreq, cb) -> cb(err, el)`: waits for a element then a\ncondition, then returns the element.\n- `browser.waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)`: waits for a js condition within a browser, then returns a boolean.\n\nAsserters should be written using either models below . `target` may be `browser` and/or `element` depending on the context.\n\n```js\n// async\nvar asyncAsserter = new Asserter(\n  function(target,cb) {\n    ...\n    cb(err, satisfied, value);\n  }\n);\n\n// promise\nvar promiseAsserter = new Asserter(\n  function(target) {\n    ...\n    return promise; // promise resolved with the wait_for return value.\n\n    // Promise asserter should throw errors marked with `err.retriable=true`\n    // when the condition is not satisfied.\n  }\n);\n\n```\n\nExample [here](https://github.com/admc/wd/blob/master/examples/promise/wait-for.js).\n\nThere are ready to use asserters [here](https://github.com/admc/wd/blob/master/lib/asserters.js),\nSee also the asserter category in the api doc [here](https://github.com/admc/wd/blob/master/doc/api.md).\n\n### Adding custom methods\n\n- `wd.addAsyncMethod(name, method)`: This is for regular async methods with callback as the last argument. This will not only add the method to the async browser prototype, but also wrap the method and add it to the promise and promiseChain prototypes.\n- `wd.addPromiseMethod(name, method)`: This is for promise returning methods NOT USING CHAIN internally. This will not only add the method to the promise browser prototype, but also wrap the method and add it to the promiseChain prototype (but not to the async prototype).\n- `wd.addPromiseChainMethod(name, method)`: This is for promise returning methods USING CHAIN internally. This will only add the method to the promiseChain browser prototype (but neither to async nor to promise browser prototypes).\n\nIf you are only using the promise chain api, you should probably stick with `wd.addPromiseChainMethod`.\n\nCustom methods may be removed with `wd.removeMethod(name)`. That will remove the method from the 3 prototypes.\n\nPlease refer to the following examples:\n\n- [promise chain](https://github.com/admc/wd/blob/master/examples/promise/add-method.js).\n- [async method used by promise chain](https://github.com/admc/wd/blob/master/examples/promise/add-method-async.js).\n- [promise no-chain](https://github.com/admc/wd/blob/master/examples/promise/add-method-no-chain.js).\n- [async](https://github.com/admc/wd/blob/master/examples/async/add-method.js).\n\nNote: No need to call rewrap anymore.\n\n### Promise helpers\n\nThis is an alternative to adding custom methods.\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/helper.js).\n\n### Starting the promise chain\n\nThe `browser` and `element` object are not themselves promises (cause that would lead to chaos), so you\ncannot call Q core methods on them. However you may call one of the method below to initiate the promise\nchain:\n\n- `browser.chain()`\n- `browser.noop()`\n- `browser.resolve(promise)`\n- `element.chain()`\n- `element.noop()`\n- `element.resolve(promise)`\n\nThe `resolve` methods work like `Q` `thenResolve`.\n\n### Working with external promise libraries\n\n`wd` uses `Q` internally, but you may use promises from other libraries with the following methods:\n\n- `browser.resolve(externalPromise)`\n- `wd.addPromiseChainMethod(name, externalPromise)`\n- `wd.addPromiseMethod(name, externalPromise)`\n\nThe external promise will be automatically wrapped within a Q promise using `new Q(externalPromise)`.\n\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/external-promise.js).\n\n### Http configuration / base url\n\nHttp behaviour and base url may be configured via the `configureHttp` method as\nin the code below:\n\n```js\n// global config\nwd.configureHttp({\n  timeout: 60000,\n  retries: 3,\n  retryDelay: 100,\n  baseUrl = 'http://example.com/'\n});\n// per browser config\nbrowser.configureHttp({\n  timeout: 60000,\n  retries: 3,\n  retryDelay: 100,\n  baseUrl = 'http://example.com/'\n});\n```\n\n- timeout: http timeout in ms, default is `undefined` (uses the server timeout,\n  usually 60 seconds). Use `'default'` or `undefined` for server default.\n- retries: Number of reconnection attempts in case the connection is dropped.\n  Default is `3`. Pass `0` or `always` to keep trying. Pass `-1` or `never` to disable.\n- retryDelay: the number of ms to wait before reconnecting. Default is `15`.\n- baseUrl: the base url use by the `get` method. The destination url is computed using\n`url.resolve`. Default is empty.\n- If a field is not specified, the current configuration for this field is\n  unchanged.\n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\nThe following helper are also available to update sauce jobs: `sauceJobUpdate` and `sauceJobStatus`.\n\n### Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```js\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Working with mobile device emulators\n\nIt is possible to use `wd` to test mobile devices using either Selenium or Appium. However\nin either case the full JsonWire protocol is not supported (or is buggy).\n\nExamples [here](https://github.com/admc/wd/tree/master/examples/mobile).\n\n### Selenium\n\nBoth Android (using AndroidDriver) and ios (using ios-driver) are supported, locally or using\nSauce Labs cloud.\n\n### Appium\n\nAndroid is only supported locally.\n\nios6 is supported locally or using Sauce Labs cloud. There is an issue with ios7, the Appium\nteam is working to solve it.\n\n## Run the tests!\n\n```\n# Install the Selenium server, Chromedriver connect\nnode_modules/.bin/install_selenium\nnode_modules/.bin/install_chromedriver\n\n#Run the selenium server with chromedriver:\nnode_modules/.bin/start_selenium_with_chromedriver\n\ncd wd\nnpm install\nmake test\n\n# look at the results!\n```\n\n## Run the tests on Sauce Labs cloud!\n\n```\n# Install Sauce Connect\nnode_modules/.bin/install_sauce_connect\n\n# Set the following env variales: SAUCE_USERNAME and SAUCE_ACCESS_KEY\n\n# Start Sauce Sonnect:\nnode_modules/.bin/start_sauce_connect\n\ncd wd\nnpm install\nmake test_e2e_sauce # may be run without sauce connect\nmake test_midway_sauce_connect\n\n# look at the results on Saucelabs site!\n```\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Generating doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n```\nmake mapping > doc/api.md\nmake full_mapping > doc/jsonwire-full-mapping.md\nmake unsupported_mapping > doc/jsonwire-unsupported-mapping.md\n```\n\n## Publishing\n\n```\nnpm version [patch|minor|major]\ngit push --tags origin master\nnpm publish\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/istanbul/coverage/lcov-report/lib/index.html)\n\n\n","readmeFilename":"README.md","homepage":"https://github.com/admc/wd","_id":"wd@0.2.6","dist":{"shasum":"651f2bf0c6c499546b1317c75c16cec87dc61921","tarball":"http://registry.npmjs.org/wd/-/wd-0.2.6.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"sebv","email":"seb.vincent@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]},"0.2.7":{"name":"wd","description":"WebDriver/Selenium 2 node.js client","tags":["web","automation","browser","javascript"],"version":"0.2.7","author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"contributors":[{"name":"Ruben Daniels","url":"https://github.com/javruben"},{"name":"Peter Braden","url":"https://github.com/peterbraden"},{"name":"Seb Vincent","url":"https://github.com/sebv"},{"name":"Peter 'Pita' Martischka","url":"https://github.com/Pita"},{"name":"Jonathan Lipps","url":"https://github.com/jlipps"},{"name":"Phil Sarin","url":"https://github.com/pdsarin"},{"name":"Mathieu Sabourin","url":"https://github.com/OniOni"},{"name":"Bjorn Tipling","url":"https://github.com/btipling"},{"name":"Santiago Suarez Ordonez","url":"https://github.com/santiycr"},{"name":"Bernard Kobos","url":"https://github.com/bernii"},{"name":"Jason Carr","url":"https://github.com/maudineormsby"},{"name":"Matti Schneider","email":"hi@mattischneider.fr","url":"https://github.com/MattiSG"}],"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"licenses":[{"type":"Apache","url":"http://www.apache.org/licenses/LICENSE-2.0.html"}],"bugs":{"url":"https://github.com/admc/wd/issues"},"engines":["node"],"main":"./lib/main","bin":{"wd":"./lib/bin.js"},"directories":{"lib":"./lib"},"dependencies":{"async":"~0.2.9","vargs":"~0.1.0","q":"~0.9.7","request":"~2.21.0","archiver":"~0.4.10","lodash":"~1.3.1","underscore.string":"~2.3.3"},"devDependencies":{"mocha":"~1.14.0","nock":"~0.23.0","express":"~3.4.5","imageinfo":"~1.0.4","dox":"~0.4.4","mu2":"~0.5.20","sv-selenium":"~0.2.2","colors":"~0.6.2","chai-as-promised":"~4.1.0","chai":"~1.8.1","mocha-as-promised":"~1.4.1","hbs":"~2.4.0","istanbul":"~0.1.45","promise-simple":"~0.1.0"},"scripts":{"test":"make test","test_sauce":"make test_e2e_sauce"},"readme":"# WD.js\n\n**node.js Webdriver/Selenium 2 client**\n\n- [Site](http://admc.io/wd/)\n- [Mailing List](https://groups.google.com/forum/#!forum/wdjs)\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n[![Selenium Test Status](https://saucelabs.com/buildstatus/wdjs)](https://saucelabs.com/u/wdjs)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/wdjs.svg)](https://saucelabs.com/u/wdjs)\n\n## Install\n\n```\nnpm install wd\n```\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  - Santiago Suarez Ordonez ([santiycr](https://github.com/santiycr))\n  - Bernard Kobos ([bernii](https://github.com/bernii))\n  - Jason Carr ([maudineormsby](https://github.com/maudineormsby))\n  - Matti Schneider ([MattiSG](https://github.com/MattiSG))\n\n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Release notes\n\nLatest version is `0.2.7`.\n\nMany changes have been introduced in 0.2.x versions, please check\n[here](https://github.com/admc/wd/blob/master/doc/release-notes.md) for more details.\n\n### caveats when upgrading to 0.2.3\n  - Most wait methods have been deprecated replaced by waitFor/waitForElement + asserters. See doc below, don't hesitate to add more asserters if you feel it is useful for others.\n  - Manual monkey patching is not recommended anymore, there were some side use cases which were not easy to cover.\n  Use addAsyncMethod/addPromiseMethod/addPromiseChainMethod methods instead. See doc below.\n\n## Usage\n\n### Q promises + chaining\n\n```js\n...\n\nbrowser\n  .init({browserName:'chrome'})\n  .get(\"http://admc.io/wd/test-pages/guinea-pig.html\")\n  .title()\n    .should.become('WD Tests')\n  .elementById('i am a link')\n  .click()\n  .eval(\"window.location.href\")\n    .should.eventually.include('guinea-pig2')\n  .back()\n  .elementByCss('#comments').type('Bonjour!')\n  .getValue().should.become('Bonjour!')\n  .fin(function() { return browser.quit(); })\n  .done();\n```\n[full code here](https://github.com/admc/wd/blob/master/examples/promise/chrome.js)\n\n\n### Pure async\n\n```js\n...\n\nbrowser.init({browserName:'chrome'}, function() {\n  browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\", function() {\n    browser.title(function(err, title) {\n      title.should.include('WD');\n      browser.elementById('i am a link', function(err, el) {\n        browser.clickElement(el, function() {\n          /* jshint evil: true */\n          browser.eval(\"window.location.href\", function(err, href) {\n            href.should.include('guinea-pig2');\n            browser.quit();\n          });\n        });\n      });\n    });\n  });\n});\n```\n[full code here](https://github.com/admc/wd/blob/master/examples/async/chrome.js)\n\n\n### Q promises without chaining\n\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/no-chain.js).\n\n## Generators api\n\n### Yiewd\n\n[Yiewd](https://github.com/jlipps/yiewd) is a wrapper around Wd.js that uses\ngenerators in order to avoid nested callbacks, like so:\n\n```js\nwd.remote(function*() {\n  yield this.init(desiredCaps);\n  yield this.get(\"http://mysite.com\");\n  el = yield this.elementById(\"someId\");\n  yield el.click();\n  el2 = yield this.elementById(\"anotherThing\")\n  text = yield el2.text();\n  text.should.equal(\"What the text should be\");\n  yield this.quit();\n});\n```\n## Mocha integration\n\n```js\n...\n\ndescribe(\"using mocha-as-promised and chai-as-promised\", function() {\n  var browser;\n\n  before(function() {\n    browser = wd.promiseChainRemote();\n    ...\n\n    return browser.init({browserName:'chrome'});\n  });\n\n  beforeEach(function() {\n    return browser.get(\"http://admc.io/wd/test-pages/guinea-pig.html\");\n  });\n\n  after(function() {\n    return browser.quit();\n  });\n\n  it(\"should retrieve the page title\", function() {\n    return browser.title().should.become(\"WD Tests\");\n  });\n\n  it(\"submit element should be clicked\", function() {\n    return browser.elementById(\"submit\").click().eval(\"window.location.href\")\n      .should.eventually.include(\"&submit\");\n  });\n});\n```\n\n[example here](https://github.com/admc/wd/blob/master/examples/promise/mocha-specs.js)\n\n\n## Repl\n\n```\n./node_modules/.bin/wd shell\n```\n\n```\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities override})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n```\n\n## Doc\n\n### Api\n\n[jsonwire mapping + api doc](https://github.com/admc/wd/blob/master/doc/api.md)\n\n[full jsonwire mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n### JsonWireProtocol\n\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n\n### Browser initialization\n\n#### Indexed parameters\n\n```js\nvar browser = wd.remote();\n// or\nvar browser = wd.remote('localhost');\n// or\nvar browser = wd.remote('localhost', 8888);\n// or\nvar browser = wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\");\n```\n#### Named parameters\n\nThe parameters used are similar to those in the [url](http://nodejs.org/docs/latest/api/url.html) module.\n\n```js\nvar browser = wd.remote()\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n});\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n});\n```\n\nThe following parameters may also be used (as in earlier versions):\n\n```js\nvar browser = wd.remote({\n  host: '127.0.0.1',\n  port: 4444,\n  username: 'username',\n  accessKey: 'password',\n});\n```\n#### Url string\n\n```js\nvar browser = wd.remote('http://localhost:4444/wd/hub');\n// or\nvar browser = wd.remote('http://user:apiKey@ondemand.saucelabs.com/wd/hub');\n```\n\n#### Url object created via url.parse\n\n[URL module documentation](http://nodejs.org/docs/v0.10.0/api/url.html#url_url)\n\n```js\nvar url = require('url');\nvar browser = wd.remote(url.parse('http://localhost:4444/wd/hub'));\n// or\nvar browser = wd.remote(url.parse('http://user:apiKey@ondemand.saucelabs.com:80/wd/hub'));\n```\n\n#### Defaults\n\n```js\n{\n    protocol: 'http:'\n    hostname: '127.0.0.1',\n    port: '4444'\n    path: '/wd/hub'\n}\n```\n\n#### Specifying driver type in remote\n\nYou may pass `async`,`promise` or `promiseChain` to `remote` to specify the driver type instead of\ncalling the driver specific method.\n\n```js\nvar browser = wd.remote('promiseChain')\n// or\nvar browser = wd.remote('localhost', 8888, 'promise');\n// or\nvar browser = wd.remote('localhost', 'promiseChain');\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  user: 'username',\n  pwd: 'password',\n}, 'promise');\n// or\nvar browser = wd.remote({\n  hostname: '127.0.0.1',\n  port: 4444,\n  auth: 'username:password',\n}, 'promiseChain');\n```\n\n#### Attach to an already-existing session\n\nInstead of calling 'init' use 'attach' using the WebDriver session ID. Use `detach`\nto detach from the session (callbacks are optional).\n\n```js\nvar browser = wd.remote('http://localhost:4444/wd/hub');\nbrowser.attach('df606fdd-f4b7-4651-aaba-fe37a39c86e3', function(err, capabilities) {\n  // The 'capabilities' object as returned by sessionCapabilities\n  if (err) { /* that session doesn't exist */ }\n  else {\n    browser.elementByCss(\"button.groovy-button\", function(err, el) {\n      ...\n    });\n  }\n});\n...\nbrowser.detach();\n\n```\n\n### Capabilities\n\n[doc here](https://code.google.com/p/selenium/wiki/DesiredCapabilities).\n\n### Element function chaining (using promise chains)\n\nWith the promise chain api the method from the `browser` prototype and the\n`element` prototype are all available within the `browser` instance, so it might\nbe confusing at first. However we tried to keep the logic as simple as possible\nusing the principles below:\n\n- There is no state passed between calls, except for what the method returns.\n- If the method returns an element the element scope is propagated.\n- If the method returns nothing (click, type etc...) we make the method return the current element, so the element scope is propagated.\n- If the method returns something (text, getAttribute...), the element scope is lost.\n- You may use \"<\" as the first parameter to get out of the element scope.\n- You may use \">\" as the first parameter to force the call to be done within the current context (mainly used to retrieve subelements).\n\nIf you need to do something more complicated, like reusing an element for 2 calls, then\ncan either Q promise functionnality (like then, Q.all or Q sequences), or retrieve your\nelement twice (since the promise chain api is very terse, this is usually acceptable).\n\nElement function chaining example [here](https://github.com/admc/wd/blob/master/examples/promise/chained-el-func-call.js)\n\n### Waiting for something\n\nBelow are the methods to use to wait for a condition:\n\n- `browser.waitFor(asserter, timeout, pollFreq, cb) -> cb(err, value)`: generic wait method, the return value is provided by the asserter when the condition is satisfied.\n- `browser.waitForElementBy???(value ,asserter, timeout, pollFreq, cb) -> cb(err, el)`: waits for a element then a\ncondition, then returns the element.\n- `browser.waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -> cb(err, boolean)`: waits for a js condition within a browser, then returns a boolean.\n\nAsserters should be written using either models below . `target` may be `browser` and/or `element` depending on the context.\n\n```js\n// async\nvar asyncAsserter = new Asserter(\n  function(target,cb) {\n    ...\n    cb(err, satisfied, value);\n  }\n);\n\n// promise\nvar promiseAsserter = new Asserter(\n  function(target) {\n    ...\n    return promise; // promise resolved with the wait_for return value.\n\n    // Promise asserter should throw errors marked with `err.retriable=true`\n    // when the condition is not satisfied.\n  }\n);\n\n```\n\nExample [here](https://github.com/admc/wd/blob/master/examples/promise/wait-for.js).\n\nThere are ready to use asserters [here](https://github.com/admc/wd/blob/master/lib/asserters.js),\nSee also the asserter category in the api doc [here](https://github.com/admc/wd/blob/master/doc/api.md).\n\n### Adding custom methods\n\n- `wd.addAsyncMethod(name, method)`: This is for regular async methods with callback as the last argument. This will not only add the method to the async browser prototype, but also wrap the method and add it to the promise and promiseChain prototypes.\n- `wd.addPromiseMethod(name, method)`: This is for promise returning methods NOT USING CHAIN internally. This will not only add the method to the promise browser prototype, but also wrap the method and add it to the promiseChain prototype (but not to the async prototype).\n- `wd.addPromiseChainMethod(name, method)`: This is for promise returning methods USING CHAIN internally. This will only add the method to the promiseChain browser prototype (but neither to async nor to promise browser prototypes).\n\nIf you are only using the promise chain api, you should probably stick with `wd.addPromiseChainMethod`.\n\nCustom methods may be removed with `wd.removeMethod(name)`. That will remove the method from the 3 prototypes.\n\nPlease refer to the following examples:\n\n- [promise chain](https://github.com/admc/wd/blob/master/examples/promise/add-method.js).\n- [async method used by promise chain](https://github.com/admc/wd/blob/master/examples/promise/add-method-async.js).\n- [promise no-chain](https://github.com/admc/wd/blob/master/examples/promise/add-method-no-chain.js).\n- [async](https://github.com/admc/wd/blob/master/examples/async/add-method.js).\n\nNote: No need to call rewrap anymore.\n\n### Promise helpers\n\nThis is an alternative to adding custom methods.\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/helper.js).\n\n### Starting the promise chain\n\nThe `browser` and `element` object are not themselves promises (cause that would lead to chaos), so you\ncannot call Q core methods on them. However you may call one of the method below to initiate the promise\nchain:\n\n- `browser.chain()`\n- `browser.noop()`\n- `browser.resolve(promise)`\n- `element.chain()`\n- `element.noop()`\n- `element.resolve(promise)`\n\nThe `resolve` methods work like `Q` `thenResolve`.\n\n### Working with external promise libraries\n\n`wd` uses `Q` internally, but you may use promises from other libraries with the following methods:\n\n- `browser.resolve(externalPromise)`\n- `wd.addPromiseChainMethod(name, externalPromise)`\n- `wd.addPromiseMethod(name, externalPromise)`\n\nThe external promise will be automatically wrapped within a Q promise using `new Q(externalPromise)`.\n\nSee example [here](https://github.com/admc/wd/blob/master/examples/promise/external-promise.js).\n\n### Http configuration / base url\n\nHttp behaviour and base url may be configured via the `configureHttp` method as\nin the code below:\n\n```js\n// global config\nwd.configureHttp({\n  timeout: 60000,\n  retries: 3,\n  retryDelay: 100,\n  baseUrl = 'http://example.com/'\n});\n// per browser config\nbrowser.configureHttp({\n  timeout: 60000,\n  retries: 3,\n  retryDelay: 100,\n  baseUrl = 'http://example.com/'\n});\n```\n\n- timeout: http timeout in ms, default is `undefined` (uses the server timeout,\n  usually 60 seconds). Use `'default'` or `undefined` for server default.\n- retries: Number of reconnection attempts in case the connection is dropped.\n  Default is `3`. Pass `0` or `always` to keep trying. Pass `-1` or `never` to disable.\n- retryDelay: the number of ms to wait before reconnecting. Default is `15`.\n- baseUrl: the base url use by the `get` method. The destination url is computed using\n`url.resolve`. Default is empty.\n- If a field is not specified, the current configuration for this field is\n  unchanged.\n\n### Environment variables for Saucelabs\n\nWhen connecting to Saucelabs, the `user` and `pwd` fields can also be set through the `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY` environment variables.\n\nThe following helper are also available to update sauce jobs: `sauceJobUpdate` and `sauceJobStatus`.\n\n### Safe Methods\n\nThe `safeExecute` and `safeEval` methods are equivalent to `execute` and `eval` but the code is\nexecuted within a `eval` block. They are safe in the sense that eventual\ncode syntax issues are tackled earlier returning as syntax error and\navoiding browser hanging in some cases.\n\nAn example below of expression hanging Chrome:\n\n```js\nbrowser.eval(\"wrong!!!\", function(err, res) { // hangs\nbrowser.safeEval(\"wrong!!!\", function(err, res) { // returns\nbrowser.execute(\"wrong!!!\", function(err, res) { //hangs\nbrowser.safeExecute(\"wrong!!!\", function(err, res) { //returns\n```\n\n## Working with mobile device emulators\n\nIt is possible to use `wd` to test mobile devices using either Selenium or Appium. However\nin either case the full JsonWire protocol is not supported (or is buggy).\n\nExamples [here](https://github.com/admc/wd/tree/master/examples/mobile).\n\n### Selenium\n\nBoth Android (using AndroidDriver) and ios (using ios-driver) are supported, locally or using\nSauce Labs cloud.\n\n### Appium\n\nAndroid is only supported locally.\n\nios6 is supported locally or using Sauce Labs cloud. There is an issue with ios7, the Appium\nteam is working to solve it.\n\n## Run the tests!\n\n```\n# Install the Selenium server, Chromedriver connect\nnode_modules/.bin/install_selenium\nnode_modules/.bin/install_chromedriver\n\n#Run the selenium server with chromedriver:\nnode_modules/.bin/start_selenium_with_chromedriver\n\ncd wd\nnpm install\nmake test\n\n# look at the results!\n```\n\n## Run the tests on Sauce Labs cloud!\n\n```\n# Install Sauce Connect\nnode_modules/.bin/install_sauce_connect\n\n# Set the following env variales: SAUCE_USERNAME and SAUCE_ACCESS_KEY\n\n# Start Sauce Sonnect:\nnode_modules/.bin/start_sauce_connect\n\ncd wd\nnpm install\nmake test_e2e_sauce # may be run without sauce connect\nmake test_midway_sauce_connect\n\n# look at the results on Saucelabs site!\n```\n\n## Adding new method / Contributing\n\nIf the method you want to use is not yet implemented, that should be\neasy to add it to `lib/webdriver.js`. You can use the `doubleclick`\nmethod as a template for methods not returning data, and `getOrientation`\nfor methods which returns data. No need to modify README as the doc\ngeneration is automated. Other contributions are welcomed.\n\n## Generating doc\n\nThe JsonWire mappings in the README and mapping files are generated from code\ncomments using [dox](https://github.com/visionmedia/dox).\n\nTo update the mappings run the following commands:\n\n```\nmake mapping > doc/api.md\nmake full_mapping > doc/jsonwire-full-mapping.md\nmake unsupported_mapping > doc/jsonwire-unsupported-mapping.md\n```\n\n## Publishing\n\n```\nnpm version [patch|minor|major]\ngit push --tags origin master\nnpm publish\n```\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/istanbul/coverage/lcov-report/lib/index.html)\n","readmeFilename":"README.md","homepage":"https://github.com/admc/wd","_id":"wd@0.2.7","dist":{"shasum":"d6ee250038fc15e8c56757f7a899133e8dd496ab","tarball":"http://registry.npmjs.org/wd/-/wd-0.2.7.tgz"},"_from":".","_npmVersion":"1.3.15","_npmUser":{"name":"sebv","email":"seb.vincent@gmail.com"},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}]}},"maintainers":[{"name":"admc","email":"adam.christian@gmail.com"},{"name":"sebv","email":"seb.vincent@gmail.com"},{"name":"jlipps","email":"jlipps@gmail.com"},{"name":"sourishkrout","email":"sebastiantiedtke@gmail.com"}],"time":{"0.0.1":"2011-04-27T19:53:09.428Z","0.0.2":"2011-04-27T22:06:28.668Z","0.0.3":"2011-04-28T02:03:48.154Z","0.0.4":"2011-05-03T21:16:06.298Z","0.0.5":"2011-05-06T21:43:14.643Z","0.0.6":"2011-05-06T23:37:05.272Z","0.0.7":"2011-08-15T20:53:44.740Z","0.0.8":"2011-10-11T23:04:53.844Z","0.0.9":"2011-12-09T07:34:25.249Z","0.0.10":"2012-05-02T15:15:27.975Z","0.0.11":"2012-05-04T02:11:19.000Z","0.0.12":"2012-05-04T18:42:20.040Z","0.0.13":"2012-05-05T19:13:10.562Z","0.0.14":"2012-05-08T08:10:06.389Z","0.0.15":"2012-05-09T21:09:40.212Z","0.0.16":"2012-05-11T09:02:43.937Z","0.0.17":"2012-05-15T17:17:09.379Z","0.0.18":"2012-06-07T00:15:03.888Z","0.0.19":"2012-06-09T19:59:11.315Z","0.0.20":"2012-06-19T18:14:55.046Z","0.0.21":"2012-07-18T07:32:17.471Z","0.1.0":"2013-08-15T08:42:50.888Z","0.0.22":"2012-09-25T01:18:11.122Z","0.0.23":"2012-10-03T00:55:22.683Z","0.0.24":"2012-10-03T06:07:59.621Z","0.0.25":"2012-10-07T16:20:54.203Z","0.0.26":"2012-10-30T00:41:10.723Z","0.0.27":"2012-12-10T23:40:05.844Z","0.0.28":"2013-01-21T21:26:56.380Z","0.0.29":"2013-01-26T04:06:25.687Z","0.0.30":"2013-01-30T08:05:29.423Z","0.0.31":"2013-02-08T23:31:18.969Z","0.0.32":"2013-05-03T18:47:11.146Z","0.0.33":"2013-07-19T21:52:06.974Z","0.0.34":"2013-08-01T16:47:38.362Z","0.1.1":"2013-08-31T19:59:22.832Z","0.1.2":"2013-09-04T22:38:08.461Z","0.1.3":"2013-09-09T16:37:57.034Z","0.1.4":"2013-09-09T17:18:10.903Z","0.1.5":"2013-09-20T09:28:48.748Z","0.2.0":"2013-10-19T05:08:28.640Z","0.2.2":"2013-10-30T12:50:34.960Z","0.2.3":"2013-11-13T03:31:30.588Z","0.2.4":"2013-11-15T07:50:31.086Z","0.2.5":"2013-11-17T15:37:33.940Z","0.2.6":"2013-12-04T13:56:46.014Z","0.2.7":"2013-12-14T13:03:34.338Z"},"author":{"name":"Adam Christian","email":"adam.christian@gmail.com"},"repository":{"type":"git","url":"https://github.com/admc/wd.git"},"users":{"sandeepmistry":true,"conradz":true},"_attachments":{"wd-0.2.7.tgz":{"content_type":"application/octet-stream","revpos":135,"digest":"md5-bujEHUxx+KvE4zCS2+y+4g==","length":152141,"stub":true},"wd-0.2.6.tgz":{"content_type":"application/octet-stream","revpos":129,"digest":"md5-+Bi1Yac7PX0T7XlHjExbPQ==","length":151417,"stub":true},"wd-0.2.5.tgz":{"content_type":"application/octet-stream","revpos":126,"digest":"md5-MajTSwoJLz38KiY6ytpE3A==","length":148490,"stub":true},"wd-0.2.4.tgz":{"content_type":"application/octet-stream","revpos":124,"digest":"md5-DD4KCyhd7sX5USYmnzIrPQ==","length":148111,"stub":true},"wd-0.2.3.tgz":{"content_type":"application/octet-stream","revpos":122,"digest":"md5-vmPj4Co2btwcpF97kLn/xg==","length":145821,"stub":true},"wd-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":108,"digest":"md5-lSMTPx1UI5BNJaRW3ZKJ9w==","length":133791,"stub":true},"wd-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":106,"digest":"md5-HzZaaEOYf1ITQwr7R77yZQ==","length":137532,"stub":true},"wd-0.1.5.tgz":{"content_type":"application/octet-stream","revpos":100,"digest":"md5-yZrPgiHQ0CYJiINGZDnDwQ==","length":132147,"stub":true},"wd-0.1.4.tgz":{"content_type":"application/octet-stream","revpos":90,"digest":"md5-TCLmJ6QSeA6j2H5Zr6cgFA==","length":30379043,"stub":true},"wd-0.1.3.tgz":{"content_type":"application/octet-stream","revpos":88,"digest":"md5-CCdIyQU029YpYmVIpG5CKA==","length":30378522,"stub":true},"wd-0.1.2.tgz":{"content_type":"application/octet-stream","revpos":86,"digest":"md5-h6UzN1chgJK/GeVZN5Mdvw==","length":145879,"stub":true},"wd-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":84,"digest":"md5-hmiz52HHBrOAQbEPEwjeRA==","length":131615,"stub":true},"wd-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":82,"digest":"md5-tV8mBVyCZMqRPIVbmb2KMA==","length":131376,"stub":true},"wd-0.0.34.tgz":{"content_type":"application/octet-stream","revpos":80,"digest":"md5-YRkhJy+mFvKzUeP8xphZvg==","length":130297,"stub":true},"wd-0.0.33.tgz":{"content_type":"application/octet-stream","revpos":78,"digest":"md5-EtFThDRBWLieusUO46wYGQ==","length":91119,"stub":true},"wd-0.0.32.tgz":{"content_type":"application/octet-stream","revpos":76,"digest":"md5-nTL12z2oAlrkBmPj66irAA==","length":55745,"stub":true},"wd-0.0.31.tgz":{"content_type":"application/octet-stream","revpos":70,"digest":"md5-Ec3X12pjbc15DQQgbusvvg==","length":50802,"stub":true},"wd-0.0.30.tgz":{"content_type":"application/octet-stream","revpos":68,"digest":"md5-cFZvHpCeHk3YU72eYL37xA==","length":50605,"stub":true},"wd-0.0.29.tgz":{"content_type":"application/octet-stream","revpos":66,"digest":"md5-bi2XSiykX2Rp0yRp4FwxLQ==","length":50310,"stub":true},"wd-0.0.28.tgz":{"content_type":"application/octet-stream","revpos":64,"digest":"md5-i7jyzKW2XpLYhDlSXIZOtw==","length":49975,"stub":true},"wd-0.0.27.tgz":{"content_type":"application/octet-stream","revpos":61,"digest":"md5-w2OrdEmEFy9zsAiIZsBsXQ==","length":48749,"stub":true},"wd-0.0.26.tgz":{"content_type":"application/octet-stream","revpos":59,"digest":"md5-sdgVZiET1nV1gH2KCMdR+A==","length":60781,"stub":true},"wd-0.0.25.tgz":{"content_type":"application/octet-stream","revpos":57,"digest":"md5-nPDWp95Hb9C9gKeAbsM2Zw==","length":56684,"stub":true},"wd-0.0.24.tgz":{"content_type":"application/octet-stream","revpos":55,"digest":"md5-9hAbfbpNXPpGVsMvpwjU3g==","length":41331,"stub":true},"wd-0.0.23.tgz":{"content_type":"application/octet-stream","revpos":53,"digest":"md5-+1gswYQXrvujhSBx2yvDdA==","length":40182,"stub":true},"wd-0.0.22.tgz":{"content_type":"application/octet-stream","revpos":51,"digest":"md5-mvej2ZHDEUD6u2l228dIUA==","length":37257,"stub":true},"wd-0.0.21.tgz":{"content_type":"application/octet-stream","revpos":47,"digest":"md5-FDxiOOZ34nKYvZN9pRBO9w==","length":36434,"stub":true},"wd-0.0.20.tgz":{"content_type":"application/octet-stream","revpos":45,"digest":"md5-cCIxucycm8icoaHQ0AfKbQ==","length":36038,"stub":true},"wd-0.0.19.tgz":{"content_type":"application/octet-stream","revpos":43,"digest":"md5-LcCylaPV1/etBpglkgDZuQ==","length":37614,"stub":true},"wd-0.0.18.tgz":{"content_type":"application/octet-stream","revpos":41,"digest":"md5-vPyVipo0Ft/0kCoVKQ0nGQ==","length":36563,"stub":true},"wd-0.0.17.tgz":{"content_type":"application/octet-stream","revpos":39,"digest":"md5-5EwpRUqzkB5qbeSXTMFbZw==","length":32980,"stub":true},"wd-0.0.16.tgz":{"content_type":"application/octet-stream","revpos":37,"digest":"md5-sQsWP6PrKev2PtnCB3XtMQ==","length":27280,"stub":true},"wd-0.0.15.tgz":{"content_type":"application/octet-stream","revpos":35,"digest":"md5-Voi5sFZgH1vMLboXTEfl/A==","length":24721,"stub":true},"wd-0.0.14.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-KZJ5mO/xNLJ3ihw/dLVDCA==","length":23958,"stub":true},"wd-0.0.13.tgz":{"content_type":"application/octet-stream","revpos":31,"digest":"md5-7gLfxLGuIo0+X23BP65nWA==","length":10194,"stub":true},"wd-0.0.12.tgz":{"content_type":"application/octet-stream","revpos":29,"digest":"md5-u6VHpfPD5S/Ua2swBQKskA==","length":6567,"stub":true},"wd-0.0.11.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-FbIi3nHnO72p5F5QoWz6Vw==","length":5806,"stub":true},"wd-0.0.10.tgz":{"content_type":"application/octet-stream","revpos":25,"digest":"md5-QmGPo0BYex+FpAPvaH3Uxw==","length":5294,"stub":true},"wd-0.0.9.tgz":{"content_type":"application/octet-stream","revpos":23,"digest":"md5-Y/pQ2Jbu+fOBaZRI5qYpMw==","length":3964,"stub":true},"wd-0.0.8.tgz":{"content_type":"application/octet-stream","revpos":21,"digest":"md5-BaHjUrTRzKBc5kXVjAQ+Mg==","length":2755,"stub":true},"wd-0.0.7.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-Kdmcg+04HSotKQZZ1PTi6w==","length":2712,"stub":true},"wd-0.0.6.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-Xpk2Cb4yexRMLfiSM1Krbg==","length":2690,"stub":true},"wd-0.0.5.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-lXK2D/dl3YaJceGzMYvIkg==","length":2689,"stub":true},"wd-0.0.4.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-hY1brQ3DLRHzPS5aigIvtA==","length":2530,"stub":true},"wd-0.0.3.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-hfLVm6mDKj7/8nJY4HtR3A==","length":2520,"stub":true},"wd-0.0.2.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-X9n0ZvldWWw0ov8vFyNLTw==","length":2533,"stub":true},"wd-0.0.1.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-o2qC+laxVvWxZdIzZNY9vw==","length":2350,"stub":true}},"_etag":"\"1JLJ1B59Q5R408JGSMT3AMWUG\""}